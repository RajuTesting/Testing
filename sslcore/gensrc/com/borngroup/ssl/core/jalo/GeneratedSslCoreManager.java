/*
 * ----------------------------------------------------------------
 * --- WARNING: THIS FILE IS GENERATED AND WILL BE OVERWRITTEN! ---
 * --- Generated at 22 Oct, 2018 11:46:56 AM                    ---
 * ----------------------------------------------------------------
 */
package com.borngroup.ssl.core.jalo;

import com.borngroup.ssl.core.constants.SslCoreConstants;
import com.borngroup.ssl.core.jalo.AbandonedCartReportCronJob;
import com.borngroup.ssl.core.jalo.Age;
import com.borngroup.ssl.core.jalo.ApparelProduct;
import com.borngroup.ssl.core.jalo.ApparelSizeVariantProduct;
import com.borngroup.ssl.core.jalo.ApparelStyleVariantProduct;
import com.borngroup.ssl.core.jalo.BestSellerCMSComponent;
import com.borngroup.ssl.core.jalo.BluedartResponseMapping;
import com.borngroup.ssl.core.jalo.BrandCategoryComponent;
import com.borngroup.ssl.core.jalo.BrandDetailComponent;
import com.borngroup.ssl.core.jalo.BrandListingComponent;
import com.borngroup.ssl.core.jalo.BrandMapping;
import com.borngroup.ssl.core.jalo.BrandMicrositeContentsComponent;
import com.borngroup.ssl.core.jalo.BrandMicrositeCrouselComponent;
import com.borngroup.ssl.core.jalo.BrandMicrositeDetailsComponent;
import com.borngroup.ssl.core.jalo.BrandSpecifcCategoryComponent;
import com.borngroup.ssl.core.jalo.BrandVideoComponent;
import com.borngroup.ssl.core.jalo.CMSBlogComponent;
import com.borngroup.ssl.core.jalo.CMSMediaParagraphComponent;
import com.borngroup.ssl.core.jalo.CMSMediaParagraphContainer;
import com.borngroup.ssl.core.jalo.CMSMediaParagraphLinkComponent;
import com.borngroup.ssl.core.jalo.CMSTabContainer;
import com.borngroup.ssl.core.jalo.CategorySizeGuideMapping;
import com.borngroup.ssl.core.jalo.ColorMapping;
import com.borngroup.ssl.core.jalo.ConfigurablePageIndex;
import com.borngroup.ssl.core.jalo.CustomerBirthdayProcess;
import com.borngroup.ssl.core.jalo.CustomerFeedback;
import com.borngroup.ssl.core.jalo.CustomerSocialAccount;
import com.borngroup.ssl.core.jalo.DealCollectionComponent;
import com.borngroup.ssl.core.jalo.DealComponent;
import com.borngroup.ssl.core.jalo.DelhiveryResponseMapping;
import com.borngroup.ssl.core.jalo.DeliveryPostalCode;
import com.borngroup.ssl.core.jalo.DepartmentBufferStock;
import com.borngroup.ssl.core.jalo.DisableReturnEntries;
import com.borngroup.ssl.core.jalo.Ean;
import com.borngroup.ssl.core.jalo.EgvEmailProcess;
import com.borngroup.ssl.core.jalo.EkartResponseMapping;
import com.borngroup.ssl.core.jalo.ExchangeStockLevel;
import com.borngroup.ssl.core.jalo.FCCMedia;
import com.borngroup.ssl.core.jalo.FccCrmTicketProcess;
import com.borngroup.ssl.core.jalo.FeedBackEmailProcess;
import com.borngroup.ssl.core.jalo.FirstCitizenMembershipAmazon;
import com.borngroup.ssl.core.jalo.FirstCitizenPrimeSignup;
import com.borngroup.ssl.core.jalo.GPCMapping;
import com.borngroup.ssl.core.jalo.GstTax;
import com.borngroup.ssl.core.jalo.InvoiceAnalyzer;
import com.borngroup.ssl.core.jalo.MobileAppReleaseDetails;
import com.borngroup.ssl.core.jalo.MobileVersionUpdateInfo;
import com.borngroup.ssl.core.jalo.NewsLettersProcess;
import com.borngroup.ssl.core.jalo.NotifyCustomer;
import com.borngroup.ssl.core.jalo.OfferPage;
import com.borngroup.ssl.core.jalo.OffersProcess;
import com.borngroup.ssl.core.jalo.OrderDropTask;
import com.borngroup.ssl.core.jalo.OrderThresholdFixedDiscountPromotion;
import com.borngroup.ssl.core.jalo.OrderValuePromotionVoucher;
import com.borngroup.ssl.core.jalo.OurBrandComponent;
import com.borngroup.ssl.core.jalo.OurBrandDescriptionComponent;
import com.borngroup.ssl.core.jalo.PSAppointment;
import com.borngroup.ssl.core.jalo.PSAppointmentFeedback;
import com.borngroup.ssl.core.jalo.PSBookingType;
import com.borngroup.ssl.core.jalo.PSPersonalShopper;
import com.borngroup.ssl.core.jalo.PSServices;
import com.borngroup.ssl.core.jalo.PSStoreMaster;
import com.borngroup.ssl.core.jalo.PaginationComponent;
import com.borngroup.ssl.core.jalo.PaytmOrderDropTask;
import com.borngroup.ssl.core.jalo.PayuOrderDropTask;
import com.borngroup.ssl.core.jalo.PickFromStoreBuffer;
import com.borngroup.ssl.core.jalo.PincodePickupStoreMapping;
import com.borngroup.ssl.core.jalo.PincodesList;
import com.borngroup.ssl.core.jalo.ProductDetailFCCComponent;
import com.borngroup.ssl.core.jalo.ProductSkuList;
import com.borngroup.ssl.core.jalo.ProductclassificationComponent;
import com.borngroup.ssl.core.jalo.PromotionPercentageDiscountRow;
import com.borngroup.ssl.core.jalo.PromotionQuantityAndDiscountRow;
import com.borngroup.ssl.core.jalo.PromotionValueAndDiscountRow;
import com.borngroup.ssl.core.jalo.PromotionalMessageInfoComponent;
import com.borngroup.ssl.core.jalo.ReturnExchangeEntries;
import com.borngroup.ssl.core.jalo.ReturnRequestBankDetails;
import com.borngroup.ssl.core.jalo.SSLBannerCarouselComponent;
import com.borngroup.ssl.core.jalo.SSLBannerWidgetComponent;
import com.borngroup.ssl.core.jalo.SSLBannerWidgetGridComponent;
import com.borngroup.ssl.core.jalo.SSLBannerWidgetWithOptionsComponent;
import com.borngroup.ssl.core.jalo.SSLBestSellerProductsInL3CategoryCronjob;
import com.borngroup.ssl.core.jalo.SSLButtonWidgetComponent;
import com.borngroup.ssl.core.jalo.SSLCategoryWidgetComponent;
import com.borngroup.ssl.core.jalo.SSLCheckoutMessages;
import com.borngroup.ssl.core.jalo.SSLCircleWidgetComponent;
import com.borngroup.ssl.core.jalo.SSLCollections;
import com.borngroup.ssl.core.jalo.SSLConfigurableTab;
import com.borngroup.ssl.core.jalo.SSLContentWidgetComponent;
import com.borngroup.ssl.core.jalo.SSLCustomerFit;
import com.borngroup.ssl.core.jalo.SSLCustomerType;
import com.borngroup.ssl.core.jalo.SSLFAQCollectionComponent;
import com.borngroup.ssl.core.jalo.SSLFAQComponent;
import com.borngroup.ssl.core.jalo.SSLFemaleCustomerFit;
import com.borngroup.ssl.core.jalo.SSLHeadingWidgetComponent;
import com.borngroup.ssl.core.jalo.SSLLinkGridWidgetComponent;
import com.borngroup.ssl.core.jalo.SSLLuxuryStoreCategoryBannerCollectionComponent;
import com.borngroup.ssl.core.jalo.SSLLuxuryStoreNewArrivalsCollectionComponent;
import com.borngroup.ssl.core.jalo.SSLLuxuryStoreParallaxComponent;
import com.borngroup.ssl.core.jalo.SSLMaleCustomerFit;
import com.borngroup.ssl.core.jalo.SSLMobileContentPage;
import com.borngroup.ssl.core.jalo.SSLMobileWidgetComponent;
import com.borngroup.ssl.core.jalo.SSLMobileWidgetLimit;
import com.borngroup.ssl.core.jalo.SSLOrderRestriction;
import com.borngroup.ssl.core.jalo.SSLPDPProductInfoCollectionComponent;
import com.borngroup.ssl.core.jalo.SSLPDPSimpleCMSTabComponent;
import com.borngroup.ssl.core.jalo.SSLPostalCodeCityStateMapping;
import com.borngroup.ssl.core.jalo.SSLProductAttrTranslationData;
import com.borngroup.ssl.core.jalo.SSLProductBOGOFPromotion;
import com.borngroup.ssl.core.jalo.SSLProductDetailBlogsComponent;
import com.borngroup.ssl.core.jalo.SSLProductDetailImageCarousalComponent;
import com.borngroup.ssl.core.jalo.SSLProductDetailReviewRatingComponent;
import com.borngroup.ssl.core.jalo.SSLProductDetailSimilarProductComponent;
import com.borngroup.ssl.core.jalo.SSLProductLinkSimilarProductsCronJob;
import com.borngroup.ssl.core.jalo.SSLProductPrimaryImageUrlReportCronJob;
import com.borngroup.ssl.core.jalo.SSLProductWidgetCarouselComponent;
import com.borngroup.ssl.core.jalo.SSLRecentlyViewedProductsComponent;
import com.borngroup.ssl.core.jalo.SSLReturnEntry;
import com.borngroup.ssl.core.jalo.SSLStyleHubCollectionComponent;
import com.borngroup.ssl.core.jalo.SSLStyleHubComponent;
import com.borngroup.ssl.core.jalo.SSLTestimonialCollectionComponent;
import com.borngroup.ssl.core.jalo.SSLTestimonialComponent;
import com.borngroup.ssl.core.jalo.SSLTextWidgetComponent;
import com.borngroup.ssl.core.jalo.SSLTextWidgetListComponent;
import com.borngroup.ssl.core.jalo.SSLUndeliverPincodeInfo;
import com.borngroup.ssl.core.jalo.SSLUniqueDeviceIdentifier;
import com.borngroup.ssl.core.jalo.SSLViewAllWidgetComponent;
import com.borngroup.ssl.core.jalo.SSlCMSTabContainer;
import com.borngroup.ssl.core.jalo.SearchBrandsComponent;
import com.borngroup.ssl.core.jalo.SearchPaginationComponent;
import com.borngroup.ssl.core.jalo.Season;
import com.borngroup.ssl.core.jalo.SeasonGroup;
import com.borngroup.ssl.core.jalo.ShopByComponent;
import com.borngroup.ssl.core.jalo.ShopByTrendComponent;
import com.borngroup.ssl.core.jalo.SizeGuideMapping;
import com.borngroup.ssl.core.jalo.SizeMapping;
import com.borngroup.ssl.core.jalo.SslAltBrandCodeRestriction;
import com.borngroup.ssl.core.jalo.SslAltBrandCodeVoucherOrderRestriction;
import com.borngroup.ssl.core.jalo.SslAltBrandCodeVoucherRestriction;
import com.borngroup.ssl.core.jalo.SslBinRestriction;
import com.borngroup.ssl.core.jalo.SslBundleProduct;
import com.borngroup.ssl.core.jalo.SslCCAvenueCustomerCardDetail;
import com.borngroup.ssl.core.jalo.SslCollectionsBannerComponent;
import com.borngroup.ssl.core.jalo.SslCollectionsStyleComponent;
import com.borngroup.ssl.core.jalo.SslFirstCitizenCardLevelRestriction;
import com.borngroup.ssl.core.jalo.SslMediumTypeRestriction;
import com.borngroup.ssl.core.jalo.SslOrderLimitDiscountPercentagePromotion;
import com.borngroup.ssl.core.jalo.SslOrderSteppedMultiBuyDiscountPromotion;
import com.borngroup.ssl.core.jalo.SslProductBOGODiscountPromotion;
import com.borngroup.ssl.core.jalo.SslProductMultiBuyDiscountPromotion;
import com.borngroup.ssl.core.jalo.SslProductPerfectPartnerDiscountPromotion;
import com.borngroup.ssl.core.jalo.SslProductPromotionRestriction;
import com.borngroup.ssl.core.jalo.SslProductSteppedMultiBuyDiscountPromotion;
import com.borngroup.ssl.core.jalo.SslProductValueDiscountPromotion;
import com.borngroup.ssl.core.jalo.SslShopBySizeMapping;
import com.borngroup.ssl.core.jalo.SslTax;
import com.borngroup.ssl.core.jalo.SslUserTypeRestriction;
import com.borngroup.ssl.core.jalo.SterlingHybrisStatusMapping;
import com.borngroup.ssl.core.jalo.UserOTP;
import com.borngroup.ssl.core.jalo.UserOTPConfigRules;
import com.borngroup.ssl.core.jalo.VirtualCategoryEntry;
import com.borngroup.ssl.core.jalo.WomenCollectionComponent;
import com.borngroup.ssl.core.jalo.WomenTopCollectionComponent;
import com.borngroup.ssl.core.jalo.components.AccessoriesBrandsParentComponent;
import com.borngroup.ssl.core.jalo.components.AccessoriesComponent;
import com.borngroup.ssl.core.jalo.components.AccountWalletComponent;
import com.borngroup.ssl.core.jalo.components.BrandsBestSellersComponent;
import com.borngroup.ssl.core.jalo.components.BrandsWeLoveCMSComponent;
import com.borngroup.ssl.core.jalo.components.BrandsWeLoveComponent;
import com.borngroup.ssl.core.jalo.components.BrandsWeLoveHomePageComponent;
import com.borngroup.ssl.core.jalo.components.BrandsWeLoveHomepageCMSComponent;
import com.borngroup.ssl.core.jalo.components.CMSImageLinkComponent;
import com.borngroup.ssl.core.jalo.components.CMSJspLinkVideoComponent;
import com.borngroup.ssl.core.jalo.components.CMSLinkImageTextFavoritesComponent;
import com.borngroup.ssl.core.jalo.components.CMSLinkTextComponent;
import com.borngroup.ssl.core.jalo.components.CMSMediaParagraphLinkTabComponent;
import com.borngroup.ssl.core.jalo.components.CMSNonMemberLinkComponent;
import com.borngroup.ssl.core.jalo.components.CMSRecentOrderParagraphComponent;
import com.borngroup.ssl.core.jalo.components.CMSYourReviewsRatingsParagraphComponent;
import com.borngroup.ssl.core.jalo.components.CardTypesAndRewardComponent;
import com.borngroup.ssl.core.jalo.components.CategoryBottomListingComponent;
import com.borngroup.ssl.core.jalo.components.CategoryListingComponent;
import com.borngroup.ssl.core.jalo.components.ChatWithUsComponent;
import com.borngroup.ssl.core.jalo.components.ColorCollectionComponent;
import com.borngroup.ssl.core.jalo.components.ColorExplosionComponent;
import com.borngroup.ssl.core.jalo.components.CouponComponent;
import com.borngroup.ssl.core.jalo.components.CustomerFeedbackTypesComponent;
import com.borngroup.ssl.core.jalo.components.CustomerQuestionsComponent;
import com.borngroup.ssl.core.jalo.components.DeliveryParagraphComponent;
import com.borngroup.ssl.core.jalo.components.DynamicLinkComponent;
import com.borngroup.ssl.core.jalo.components.ExtendedCitizenSimpleBannerComponent;
import com.borngroup.ssl.core.jalo.components.ExtendedMemberSimpleBannerComponent;
import com.borngroup.ssl.core.jalo.components.ExtendedSimpleBannerComponent;
import com.borngroup.ssl.core.jalo.components.FCCBalanceComponent;
import com.borngroup.ssl.core.jalo.components.FCCBannerComponent;
import com.borngroup.ssl.core.jalo.components.FCCCardComponent;
import com.borngroup.ssl.core.jalo.components.FirstCitizenCmsComponent;
import com.borngroup.ssl.core.jalo.components.FirstCitizenPointsComponent;
import com.borngroup.ssl.core.jalo.components.FrequentlySearchedComponent;
import com.borngroup.ssl.core.jalo.components.GiftWrapComponent;
import com.borngroup.ssl.core.jalo.components.HomeCouponComponent;
import com.borngroup.ssl.core.jalo.components.InStoreAndOnlineComponent;
import com.borngroup.ssl.core.jalo.components.InspirationAndStyleComponent;
import com.borngroup.ssl.core.jalo.components.InstantGiftingTabListComponent;
import com.borngroup.ssl.core.jalo.components.InternalLinkComponent;
import com.borngroup.ssl.core.jalo.components.LatestFromCMSComponent;
import com.borngroup.ssl.core.jalo.components.LatestFromSSComponent;
import com.borngroup.ssl.core.jalo.components.MSiteChildCategoriesComponent;
import com.borngroup.ssl.core.jalo.components.ManageOrderComponent;
import com.borngroup.ssl.core.jalo.components.MiniAlertListComponent;
import com.borngroup.ssl.core.jalo.components.MiniWishListComponent;
import com.borngroup.ssl.core.jalo.components.NavigationBarImageComponent;
import com.borngroup.ssl.core.jalo.components.NavigationBarWithImageComponent;
import com.borngroup.ssl.core.jalo.components.NewArrivalsCMSComponent;
import com.borngroup.ssl.core.jalo.components.NewArrivalsComponent;
import com.borngroup.ssl.core.jalo.components.NewInCategoryComponent;
import com.borngroup.ssl.core.jalo.components.NewShorterLengthComponent;
import com.borngroup.ssl.core.jalo.components.OfferDetailsComponent;
import com.borngroup.ssl.core.jalo.components.OfferSuggestionComponent;
import com.borngroup.ssl.core.jalo.components.OffersZoneCMSComponent;
import com.borngroup.ssl.core.jalo.components.OffersZoneComponent;
import com.borngroup.ssl.core.jalo.components.OrderDetailsComponent;
import com.borngroup.ssl.core.jalo.components.OrderSummeryComponent;
import com.borngroup.ssl.core.jalo.components.OurFavoritesBrandsComponent;
import com.borngroup.ssl.core.jalo.components.OurFavoritesOfferComponent;
import com.borngroup.ssl.core.jalo.components.OutfitFooterComponent;
import com.borngroup.ssl.core.jalo.components.OutfitsComponent;
import com.borngroup.ssl.core.jalo.components.OutsideStoreBenefitsComponent;
import com.borngroup.ssl.core.jalo.components.ParagraphComponent;
import com.borngroup.ssl.core.jalo.components.ParagraphLinkComponent;
import com.borngroup.ssl.core.jalo.components.PaySecurilyByComponent;
import com.borngroup.ssl.core.jalo.components.PincodesDeliverList;
import com.borngroup.ssl.core.jalo.components.ProductCarouselListingComponent;
import com.borngroup.ssl.core.jalo.components.ProductRecommendationCMSComponent;
import com.borngroup.ssl.core.jalo.components.ProductRecommendationComponent;
import com.borngroup.ssl.core.jalo.components.ProductSpecificCategoryComponent;
import com.borngroup.ssl.core.jalo.components.ProfilePictureComponent;
import com.borngroup.ssl.core.jalo.components.PromotionBannerComponent;
import com.borngroup.ssl.core.jalo.components.PromotionBrandsCMSComponent;
import com.borngroup.ssl.core.jalo.components.PromotionBrandsComponent;
import com.borngroup.ssl.core.jalo.components.PromotionDealComponent;
import com.borngroup.ssl.core.jalo.components.PromotionOfferComponent;
import com.borngroup.ssl.core.jalo.components.PromotionsComponent;
import com.borngroup.ssl.core.jalo.components.PromotionsDealsParentComponent;
import com.borngroup.ssl.core.jalo.components.PromotionsHeaderBannerComponent;
import com.borngroup.ssl.core.jalo.components.PromotionsHeaderCarouselComponent;
import com.borngroup.ssl.core.jalo.components.PromotionsProductsBannerComponent;
import com.borngroup.ssl.core.jalo.components.PromotionsProductsCarouselComponent;
import com.borngroup.ssl.core.jalo.components.PromotionsTabParentComponent;
import com.borngroup.ssl.core.jalo.components.RecommendedProductsComponent;
import com.borngroup.ssl.core.jalo.components.ResponsiveMultiClickBannerComponent;
import com.borngroup.ssl.core.jalo.components.ResponsiveShopByCategoryComponent;
import com.borngroup.ssl.core.jalo.components.SSLBrandBannerComponent;
import com.borngroup.ssl.core.jalo.components.SSLBrandBannerTitleComponent;
import com.borngroup.ssl.core.jalo.components.SSLBrandBannerTitleComponentCollection;
import com.borngroup.ssl.core.jalo.components.SSLBrandButtonBannerComponent;
import com.borngroup.ssl.core.jalo.components.SSLBrandContentImageComponent;
import com.borngroup.ssl.core.jalo.components.SSLBrandCustomBannerComponent;
import com.borngroup.ssl.core.jalo.components.SSLBrandLogoComponent;
import com.borngroup.ssl.core.jalo.components.SSLBrandNavigationCollectionComponent;
import com.borngroup.ssl.core.jalo.components.SSLBrandNavigationComponent;
import com.borngroup.ssl.core.jalo.components.SSLBrandProductCarouselComponent;
import com.borngroup.ssl.core.jalo.components.SSLBrandThreeStepCarouselComponent;
import com.borngroup.ssl.core.jalo.components.SSLBrandVideoComponent;
import com.borngroup.ssl.core.jalo.components.SSLImageLinkComponent;
import com.borngroup.ssl.core.jalo.components.SSLImageRollOverComponent;
import com.borngroup.ssl.core.jalo.components.SSLImageRollOverLinkComponent;
import com.borngroup.ssl.core.jalo.components.SSLImageRollOverSubComponent;
import com.borngroup.ssl.core.jalo.components.SSLLeftRightComponent;
import com.borngroup.ssl.core.jalo.components.SSLLuxuryStoreCategoryBannerCMSComponent;
import com.borngroup.ssl.core.jalo.components.SSLLuxuryStoreInstagramCMSComponent;
import com.borngroup.ssl.core.jalo.components.SSLLuxuryStoreNewArrivalsCMSComponent;
import com.borngroup.ssl.core.jalo.components.SSLSilverShopperComponent;
import com.borngroup.ssl.core.jalo.components.ServiceLinksComponent;
import com.borngroup.ssl.core.jalo.components.ShopByCategoryComponent;
import com.borngroup.ssl.core.jalo.components.SlimBannerCarouselComponent;
import com.borngroup.ssl.core.jalo.components.SocialHubComponent;
import com.borngroup.ssl.core.jalo.components.SslBookOverPhoneComponent;
import com.borngroup.ssl.core.jalo.components.SslCategoryBestBrandsComponent;
import com.borngroup.ssl.core.jalo.components.SslCategoryCollectionComponent;
import com.borngroup.ssl.core.jalo.components.SslCollectionsCarouselComponent;
import com.borngroup.ssl.core.jalo.components.SslCollectionsImageMapComponent;
import com.borngroup.ssl.core.jalo.components.SslColletionsParagraphComponent;
import com.borngroup.ssl.core.jalo.components.SslContactUsParagraphComponent;
import com.borngroup.ssl.core.jalo.components.SslDiscoverBlogUpdateParentComponent;
import com.borngroup.ssl.core.jalo.components.SslEventCarouselComponent;
import com.borngroup.ssl.core.jalo.components.SslEventListComponent;
import com.borngroup.ssl.core.jalo.components.SslExclusiveBrandLinksComponent;
import com.borngroup.ssl.core.jalo.components.SslExclusiveBrandsComponent;
import com.borngroup.ssl.core.jalo.components.SslGiftImageTextComponent;
import com.borngroup.ssl.core.jalo.components.SslHTMLContentComponent;
import com.borngroup.ssl.core.jalo.components.SslImageComponent;
import com.borngroup.ssl.core.jalo.components.SslImageMapComponent;
import com.borngroup.ssl.core.jalo.components.SslImageTextComponent;
import com.borngroup.ssl.core.jalo.components.SslMultiClickBannerComponent;
import com.borngroup.ssl.core.jalo.components.SslMyAccountAlertComponent;
import com.borngroup.ssl.core.jalo.components.SslProductDetailJspIncludeComponent;
import com.borngroup.ssl.core.jalo.components.SslProductVariantJspIncludeComponent;
import com.borngroup.ssl.core.jalo.components.SslRecentlyViewedProductComponent;
import com.borngroup.ssl.core.jalo.components.SslSimpleBannerComponent;
import com.borngroup.ssl.core.jalo.components.SslUpcomingEventComponent;
import com.borngroup.ssl.core.jalo.components.SslVerticalCarouselComponent;
import com.borngroup.ssl.core.jalo.components.SslVideoTextComponent;
import com.borngroup.ssl.core.jalo.components.SslVoucherComponent;
import com.borngroup.ssl.core.jalo.components.StoreFinderHeaderComponent;
import com.borngroup.ssl.core.jalo.components.StyleAndInspirationCMSComponent;
import com.borngroup.ssl.core.jalo.components.TopFooterComponent;
import com.borngroup.ssl.core.jalo.components.VerifiedByComponent;
import com.borngroup.ssl.core.jalo.components.VideoBrandDescComponent;
import com.borngroup.ssl.core.jalo.components.WishListComponent;
import com.borngroup.ssl.core.jalo.news.NewsLetterSubscribeForCustomer;
import com.borngroup.ssl.core.jalo.restrictions.CMSSslGenderRestriction;
import com.pcm.perf.jalo.SSLClassificationAttrTemplateCronJob;
import com.pcm.perf.jalo.SSLProductAttrTemplateCronJob;
import com.ssl.core.jalo.BestSellerComponent;
import com.ssl.core.jalo.CategoryMediaUploadCronJob;
import com.ssl.core.jalo.SSLUserDomainRestriction;
import com.ssl.core.jalo.SSLUserGroupRestriction;
import com.ssl.core.jalo.UserDomains;
import de.hybris.platform.acceleratorcms.jalo.actions.AddToCartAction1;
import de.hybris.platform.acceleratorcms.jalo.components.AbstractResponsiveBannerComponent;
import de.hybris.platform.acceleratorcms.jalo.components.ExclusiveBrandsComponent;
import de.hybris.platform.acceleratorcms.jalo.components.NavigationBarCollectionComponent;
import de.hybris.platform.acceleratorcms.jalo.components.ProductAddToCartComponent1;
import de.hybris.platform.acceleratorcms.jalo.components.ProductVariantSelectorComponent1;
import de.hybris.platform.acceleratorcms.jalo.components.SimpleBannerComponent;
import de.hybris.platform.acceleratorcms.jalo.components.SimpleResponsiveBannerComponent;
import de.hybris.platform.basecommerce.jalo.site.BaseSite;
import de.hybris.platform.category.jalo.Category;
import de.hybris.platform.cms2.jalo.contents.CMSItem;
import de.hybris.platform.cms2.jalo.contents.components.CMSImageComponent;
import de.hybris.platform.cms2.jalo.contents.components.CMSLinkComponent;
import de.hybris.platform.cms2.jalo.contents.components.CMSParagraphComponent;
import de.hybris.platform.cms2.jalo.contents.components.SimpleCMSComponent;
import de.hybris.platform.cms2.jalo.navigation.CMSNavigationNode;
import de.hybris.platform.cms2.jalo.pages.AbstractPage;
import de.hybris.platform.cms2.jalo.pages.CategoryPage;
import de.hybris.platform.cms2.jalo.site.CMSSite;
import de.hybris.platform.cms2lib.components.AbstractBannerComponent;
import de.hybris.platform.commerceservices.jalo.process.ContactUsStoreFrontProcess;
import de.hybris.platform.commerceservices.jalo.process.OrderCompletionFeedbackStoreFrontProcess;
import de.hybris.platform.commerceservices.jalo.process.ProductUploadAutoApprovalStoreFrontProcess;
import de.hybris.platform.commerceservices.jalo.process.SslWalletRefundEmailProcess;
import de.hybris.platform.commerceservices.jalo.process.TemporaryPasswordProcess;
import de.hybris.platform.commerceservices.jalo.process.WalletCreditsBulkUploadStoreFrontProcess;
import de.hybris.platform.commerceservices.jalo.solrsearch.config.SolrSort;
import de.hybris.platform.cronjob.jalo.CronJob;
import de.hybris.platform.customerreview.jalo.CustomerReview;
import de.hybris.platform.europe1.jalo.AbstractDiscountRow;
import de.hybris.platform.europe1.jalo.DiscountRow;
import de.hybris.platform.europe1.jalo.PDTRow;
import de.hybris.platform.europe1.jalo.PriceRow;
import de.hybris.platform.jalo.GenericItem;
import de.hybris.platform.jalo.Item;
import de.hybris.platform.jalo.Item.AttributeMode;
import de.hybris.platform.jalo.JaloBusinessException;
import de.hybris.platform.jalo.JaloInvalidParameterException;
import de.hybris.platform.jalo.JaloSystemException;
import de.hybris.platform.jalo.SessionContext;
import de.hybris.platform.jalo.c2l.C2LItem;
import de.hybris.platform.jalo.c2l.C2LManager;
import de.hybris.platform.jalo.c2l.Language;
import de.hybris.platform.jalo.c2l.Region;
import de.hybris.platform.jalo.enumeration.EnumerationValue;
import de.hybris.platform.jalo.extension.Extension;
import de.hybris.platform.jalo.link.Link;
import de.hybris.platform.jalo.media.AbstractMedia;
import de.hybris.platform.jalo.media.Media;
import de.hybris.platform.jalo.order.AbstractOrder;
import de.hybris.platform.jalo.order.AbstractOrderEntry;
import de.hybris.platform.jalo.order.Cart;
import de.hybris.platform.jalo.order.Order;
import de.hybris.platform.jalo.order.payment.PaymentInfo;
import de.hybris.platform.jalo.order.price.Discount;
import de.hybris.platform.jalo.order.price.Tax;
import de.hybris.platform.jalo.product.Product;
import de.hybris.platform.jalo.type.CollectionType;
import de.hybris.platform.jalo.type.ComposedType;
import de.hybris.platform.jalo.type.JaloGenericCreationException;
import de.hybris.platform.jalo.user.Address;
import de.hybris.platform.jalo.user.Customer;
import de.hybris.platform.jalo.user.Title;
import de.hybris.platform.jalo.user.User;
import de.hybris.platform.ordermodify.jalo.OrderEntryModificationRecordEntry;
import de.hybris.platform.ordermodify.jalo.OrderModificationRecordEntry;
import de.hybris.platform.orderprocessing.jalo.SterlingCustomerNotificationProcess;
import de.hybris.platform.ordersplitting.jalo.ConsignmentEntry;
import de.hybris.platform.ordersplitting.jalo.StockLevel;
import de.hybris.platform.ordersplitting.jalo.Vendor;
import de.hybris.platform.ordersplitting.jalo.Warehouse;
import de.hybris.platform.payment.jalo.PaymentTransaction;
import de.hybris.platform.payment.jalo.PaymentTransactionEntry;
import de.hybris.platform.promotions.jalo.AbstractPromotion;
import de.hybris.platform.returns.jalo.OrderEntryReturnRecordEntry;
import de.hybris.platform.returns.jalo.OrderReturnRecordEntry;
import de.hybris.platform.returns.jalo.ReplacementEntry;
import de.hybris.platform.returns.jalo.ReturnEntry;
import de.hybris.platform.returns.jalo.ReturnRequest;
import de.hybris.platform.solrfacetsearch.jalo.config.SolrFacetSearchConfig;
import de.hybris.platform.solrfacetsearch.jalo.config.SolrIndexedProperty;
import de.hybris.platform.solrfacetsearch.jalo.indexer.cron.SslSolrExtIndexerCronJob;
import de.hybris.platform.store.BaseStore;
import de.hybris.platform.storelocator.jalo.PointOfService;
import de.hybris.platform.ticket.jalo.CsTicket;
import de.hybris.platform.util.OneToManyHandler;
import de.hybris.platform.util.Utilities;
import de.hybris.platform.voucher.jalo.PromotionVoucher;
import de.hybris.platform.voucher.jalo.Voucher;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Generated class for type <code>SslCoreManager</code>.
 */
@SuppressWarnings({"deprecation","unused","cast","PMD"})
public abstract class GeneratedSslCoreManager extends Extension
{
	/** Relation ordering override parameter constants for ProductAgeRelation from ((sslcore))*/
	protected static String PRODUCTAGERELATION_SRC_ORDERED = "relation.ProductAgeRelation.source.ordered";
	protected static String PRODUCTAGERELATION_TGT_ORDERED = "relation.ProductAgeRelation.target.ordered";
	/** Relation disable markmodifed parameter constants for ProductAgeRelation from ((sslcore))*/
	protected static String PRODUCTAGERELATION_MARKMODIFIED = "relation.ProductAgeRelation.markmodified";
	/** Relation ordering override parameter constants for Product2EanRelation from ((sslcore))*/
	protected static String PRODUCT2EANRELATION_SRC_ORDERED = "relation.Product2EanRelation.source.ordered";
	protected static String PRODUCT2EANRELATION_TGT_ORDERED = "relation.Product2EanRelation.target.ordered";
	/** Relation disable markmodifed parameter constants for Product2EanRelation from ((sslcore))*/
	protected static String PRODUCT2EANRELATION_MARKMODIFIED = "relation.Product2EanRelation.markmodified";
	/**
	* {@link OneToManyHandler} for handling 1:n CUSTOMERNOTIFICATION's relation attributes from 'many' side.
	**/
	protected static final OneToManyHandler<NotifyCustomer> SSLPRODUCTCUSTOMERNOTIFICATIONRELCUSTOMERNOTIFICATIONHANDLER = new OneToManyHandler<NotifyCustomer>(
	SslCoreConstants.TC.NOTIFYCUSTOMER,
	false,
	"product",
	null,
	false,
	true,
	CollectionType.COLLECTION
	);
	/**
	* {@link OneToManyHandler} for handling 1:n STERLINGCUSTOMERNOTIFICATIONPROCESS's relation attributes from 'many' side.
	**/
	protected static final OneToManyHandler<SterlingCustomerNotificationProcess> ORDER2STERLINGCUSTOMERNOTIFICATIONPROCESSSTERLINGCUSTOMERNOTIFICATIONPROCESSHANDLER = new OneToManyHandler<SterlingCustomerNotificationProcess>(
	SslCoreConstants.TC.STERLINGCUSTOMERNOTIFICATIONPROCESS,
	false,
	"order",
	null,
	false,
	true,
	CollectionType.COLLECTION
	);
	/**
	* {@link OneToManyHandler} for handling 1:n SOCIALACCOUNTS's relation attributes from 'many' side.
	**/
	protected static final OneToManyHandler<CustomerSocialAccount> CUSTOMERSOCIALACCOUNTRELATIONSOCIALACCOUNTSHANDLER = new OneToManyHandler<CustomerSocialAccount>(
	SslCoreConstants.TC.CUSTOMERSOCIALACCOUNT,
	false,
	"customer",
	null,
	false,
	true,
	CollectionType.COLLECTION
	);
	/**
	* {@link OneToManyHandler} for handling 1:n EXCHANGESTOCKLEVELS's relation attributes from 'many' side.
	**/
	protected static final OneToManyHandler<ExchangeStockLevel> REPLACEMENTENTRYSTOCKLEVELRELATIONEXCHANGESTOCKLEVELSHANDLER = new OneToManyHandler<ExchangeStockLevel>(
	SslCoreConstants.TC.EXCHANGESTOCKLEVEL,
	false,
	"replacementEntry",
	null,
	false,
	true,
	CollectionType.SET
	);
	protected static final Map<String, Map<String, AttributeMode>> DEFAULT_INITIAL_ATTRIBUTES;
	static
	{
		final Map<String, Map<String, AttributeMode>> ttmp = new HashMap();
		Map<String, AttributeMode> tmp = new HashMap<String, AttributeMode>();
		tmp.put("dropShip", AttributeMode.INITIAL);
		tmp.put("CoDSelected", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.ordersplitting.jalo.Vendor", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("preOrderQty", AttributeMode.INITIAL);
		tmp.put("metaTitle", AttributeMode.INITIAL);
		tmp.put("shippingWeight", AttributeMode.INITIAL);
		tmp.put("sellableMarketPlaces", AttributeMode.INITIAL);
		tmp.put("alternateEANList", AttributeMode.INITIAL);
		tmp.put("giftWrap", AttributeMode.INITIAL);
		tmp.put("isGiftProduct", AttributeMode.INITIAL);
		tmp.put("sellingInMobile", AttributeMode.INITIAL);
		tmp.put("sellingInDesktop", AttributeMode.INITIAL);
		tmp.put("comingSoon", AttributeMode.INITIAL);
		tmp.put("outOfStockNotice", AttributeMode.INITIAL);
		tmp.put("styleCode", AttributeMode.INITIAL);
		tmp.put("styleDesc", AttributeMode.INITIAL);
		tmp.put("brandCode", AttributeMode.INITIAL);
		tmp.put("altBrandCode", AttributeMode.INITIAL);
		tmp.put("seasonCode", AttributeMode.INITIAL);
		tmp.put("departmentCode", AttributeMode.INITIAL);
		tmp.put("departmentName", AttributeMode.INITIAL);
		tmp.put("subDepartmentCode", AttributeMode.INITIAL);
		tmp.put("subdepartmentName", AttributeMode.INITIAL);
		tmp.put("classCode", AttributeMode.INITIAL);
		tmp.put("className", AttributeMode.INITIAL);
		tmp.put("subClassCode", AttributeMode.INITIAL);
		tmp.put("subClassName", AttributeMode.INITIAL);
		tmp.put("isAvailable", AttributeMode.INITIAL);
		tmp.put("multi360images", AttributeMode.INITIAL);
		tmp.put("preOrder", AttributeMode.INITIAL);
		tmp.put("channelLicence", AttributeMode.INITIAL);
		tmp.put("shortName", AttributeMode.INITIAL);
		tmp.put("careInstructions", AttributeMode.INITIAL);
		tmp.put("brandInfo", AttributeMode.INITIAL);
		tmp.put("brandLogo", AttributeMode.INITIAL);
		tmp.put("returnPolicy", AttributeMode.INITIAL);
		tmp.put("shippingInfo", AttributeMode.INITIAL);
		tmp.put("courierShippingFlag", AttributeMode.INITIAL);
		tmp.put("packingType", AttributeMode.INITIAL);
		tmp.put("shipAlone", AttributeMode.INITIAL);
		tmp.put("sameDayDelivery", AttributeMode.INITIAL);
		tmp.put("internationalShipping", AttributeMode.INITIAL);
		tmp.put("giftTo", AttributeMode.INITIAL);
		tmp.put("giftAgeGroup", AttributeMode.INITIAL);
		tmp.put("occasion", AttributeMode.INITIAL);
		tmp.put("relationship", AttributeMode.INITIAL);
		tmp.put("shipType", AttributeMode.INITIAL);
		tmp.put("brandName", AttributeMode.INITIAL);
		tmp.put("isAvailableForCoD", AttributeMode.INITIAL);
		tmp.put("sizeGuide", AttributeMode.INITIAL);
		tmp.put("sizeGuideHTML", AttributeMode.INITIAL);
		tmp.put("videos", AttributeMode.INITIAL);
		tmp.put("codPinCodes", AttributeMode.INITIAL);
		tmp.put("deliveryPinCodes", AttributeMode.INITIAL);
		tmp.put("videosLinks", AttributeMode.INITIAL);
		tmp.put("seoKeywords", AttributeMode.INITIAL);
		tmp.put("searchKeywords", AttributeMode.INITIAL);
		tmp.put("tags", AttributeMode.INITIAL);
		tmp.put("metaDescription", AttributeMode.INITIAL);
		tmp.put("eGift", AttributeMode.INITIAL);
		tmp.put("showGiftProductLabel", AttributeMode.INITIAL);
		tmp.put("limited", AttributeMode.INITIAL);
		tmp.put("onlineExclusive", AttributeMode.INITIAL);
		tmp.put("dealOfTheDay", AttributeMode.INITIAL);
		tmp.put("exclusive", AttributeMode.INITIAL);
		tmp.put("bestSeller", AttributeMode.INITIAL);
		tmp.put("newArrival", AttributeMode.INITIAL);
		tmp.put("heroProduct", AttributeMode.INITIAL);
		tmp.put("returnDays", AttributeMode.INITIAL);
		tmp.put("variantSkuList", AttributeMode.INITIAL);
		tmp.put("popularityRank", AttributeMode.INITIAL);
		tmp.put("categoryOfSupply", AttributeMode.INITIAL);
		tmp.put("hsnCode", AttributeMode.INITIAL);
		tmp.put("uqc", AttributeMode.INITIAL);
		tmp.put("classificationOfGoods", AttributeMode.INITIAL);
		tmp.put("taxCategoryCode", AttributeMode.INITIAL);
		tmp.put("disclaimer", AttributeMode.INITIAL);
		tmp.put("isAlterationAvailable", AttributeMode.INITIAL);
		tmp.put("onhandSafetyFactorPercentage", AttributeMode.INITIAL);
		tmp.put("onhandSafetyFactorQuantity", AttributeMode.INITIAL);
		tmp.put("useUnplannedInventory", AttributeMode.INITIAL);
		tmp.put("productHighlights", AttributeMode.INITIAL);
		tmp.put("wordPressTags", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.jalo.product.Product", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("customerService", AttributeMode.INITIAL);
		tmp.put("isCsPaymentMethodSelected", AttributeMode.INITIAL);
		tmp.put("lastUpdatedTime", AttributeMode.INITIAL);
		tmp.put("isApplicableForAbondedNotify", AttributeMode.INITIAL);
		tmp.put("userCart", AttributeMode.INITIAL);
		tmp.put("paymentFailureMessages", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.jalo.order.Cart", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("pointOfService", AttributeMode.INITIAL);
		tmp.put("isPromotionalPrice", AttributeMode.INITIAL);
		tmp.put("locationID", AttributeMode.INITIAL);
		tmp.put("isSumofProductsPriceRow", AttributeMode.INITIAL);
		tmp.put("wasPrice", AttributeMode.INITIAL);
		tmp.put("eventId", AttributeMode.INITIAL);
		tmp.put("useThisPriceRow", AttributeMode.INITIAL);
		tmp.put("eventDate", AttributeMode.INITIAL);
		tmp.put("priceType", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.europe1.jalo.PriceRow", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("locationID", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.europe1.jalo.DiscountRow", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("holdQuantity", AttributeMode.INITIAL);
		tmp.put("bufferQuantity", AttributeMode.INITIAL);
		tmp.put("nonSellableQuantity", AttributeMode.INITIAL);
		tmp.put("onlineSuspense", AttributeMode.INITIAL);
		tmp.put("onlineReserved", AttributeMode.INITIAL);
		tmp.put("onlineDamaged", AttributeMode.INITIAL);
		tmp.put("onlineHold", AttributeMode.INITIAL);
		tmp.put("totalUnavailable", AttributeMode.INITIAL);
		tmp.put("totalDamaged", AttributeMode.INITIAL);
		tmp.put("mmsDamage", AttributeMode.INITIAL);
		tmp.put("mmsSuspense", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.ordersplitting.jalo.StockLevel", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("orderCompleteMailsent", AttributeMode.INITIAL);
		tmp.put("csAgentId", AttributeMode.INITIAL);
		tmp.put("storeFrontReturnList", AttributeMode.INITIAL);
		tmp.put("firstOrderFlag", AttributeMode.INITIAL);
		tmp.put("loyaltyOrderFlag", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.jalo.order.Order", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("IP", AttributeMode.INITIAL);
		tmp.put("giftRecipientName", AttributeMode.INITIAL);
		tmp.put("giftMessage", AttributeMode.INITIAL);
		tmp.put("giftSenderName", AttributeMode.INITIAL);
		tmp.put("giftImage", AttributeMode.INITIAL);
		tmp.put("eGiftRecipientFirstName", AttributeMode.INITIAL);
		tmp.put("eGiftRecipientLastName", AttributeMode.INITIAL);
		tmp.put("eGiftRecipientEmail", AttributeMode.INITIAL);
		tmp.put("ccAvenueOrderNumber", AttributeMode.INITIAL);
		tmp.put("fccCardNumber", AttributeMode.INITIAL);
		tmp.put("awbNumber", AttributeMode.INITIAL);
		tmp.put("cartId", AttributeMode.INITIAL);
		tmp.put("carrier", AttributeMode.INITIAL);
		tmp.put("previousStatus", AttributeMode.INITIAL);
		tmp.put("mobileAppPlatform", AttributeMode.INITIAL);
		tmp.put("gstinNumber", AttributeMode.INITIAL);
		tmp.put("nonSeamless", AttributeMode.INITIAL);
		tmp.put("pickupPersonName", AttributeMode.INITIAL);
		tmp.put("pickupPersonNumber", AttributeMode.INITIAL);
		tmp.put("userEnteredPincode", AttributeMode.INITIAL);
		tmp.put("paytmTransactionRequestId", AttributeMode.INITIAL);
		tmp.put("payuTransactionRequestId", AttributeMode.INITIAL);
		tmp.put("mobileAppVersion", AttributeMode.INITIAL);
		tmp.put("payuCartPaymentRetryCount", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.jalo.order.AbstractOrder", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("captured", AttributeMode.INITIAL);
		tmp.put("typeOfPayment", AttributeMode.INITIAL);
		tmp.put("merchantIdUsed", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.jalo.order.payment.PaymentInfo", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("refundCardAmounts", AttributeMode.INITIAL);
		tmp.put("transferRef", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.payment.jalo.PaymentTransactionEntry", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("pieceDiscount", AttributeMode.INITIAL);
		tmp.put("simulatedWarehouseStockMap", AttributeMode.INITIAL);
		tmp.put("cancelledQty", AttributeMode.INITIAL);
		tmp.put("itemDiscount", AttributeMode.INITIAL);
		tmp.put("wasPrice", AttributeMode.INITIAL);
		tmp.put("apportionedDeliveryCharges", AttributeMode.INITIAL);
		tmp.put("taxableItemVal", AttributeMode.INITIAL);
		tmp.put("taxableShippingVal", AttributeMode.INITIAL);
		tmp.put("itemValWithShipping", AttributeMode.INITIAL);
		tmp.put("applicableTaxPercent", AttributeMode.INITIAL);
		tmp.put("taxComponents", AttributeMode.INITIAL);
		tmp.put("taxCode", AttributeMode.INITIAL);
		tmp.put("pickupStore", AttributeMode.INITIAL);
		tmp.put("pickupODC", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.jalo.order.AbstractOrderEntry", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("isSubscribed", AttributeMode.INITIAL);
		tmp.put("dateOfBirth", AttributeMode.INITIAL);
		tmp.put("landlinenumber", AttributeMode.INITIAL);
		tmp.put("nameoncard", AttributeMode.INITIAL);
		tmp.put("gender", AttributeMode.INITIAL);
		tmp.put("passwordImport", AttributeMode.INITIAL);
		tmp.put("mobileNumberVerified", AttributeMode.INITIAL);
		tmp.put("dob", AttributeMode.INITIAL);
		tmp.put("mobile", AttributeMode.INITIAL);
		tmp.put("sslLoyaltyEmail", AttributeMode.INITIAL);
		tmp.put("homeStore", AttributeMode.INITIAL);
		tmp.put("homeStoreCreatedDate", AttributeMode.INITIAL);
		tmp.put("homeStoreModifiedDate", AttributeMode.INITIAL);
		tmp.put("savedCards", AttributeMode.INITIAL);
		tmp.put("crmStatusFlag", AttributeMode.INITIAL);
		tmp.put("walletNumber", AttributeMode.INITIAL);
		tmp.put("isSocialPicUploaded", AttributeMode.INITIAL);
		tmp.put("autoWalletCreationFail", AttributeMode.INITIAL);
		tmp.put("sslWalletOTP", AttributeMode.INITIAL);
		tmp.put("profileEditOTP", AttributeMode.INITIAL);
		tmp.put("profileEditOTPSentTime", AttributeMode.INITIAL);
		tmp.put("macAddress", AttributeMode.INITIAL);
		tmp.put("age", AttributeMode.INITIAL);
		tmp.put("cityTier", AttributeMode.INITIAL);
		tmp.put("married", AttributeMode.INITIAL);
		tmp.put("kids", AttributeMode.INITIAL);
		tmp.put("stylePreference", AttributeMode.INITIAL);
		tmp.put("searchKeyWords", AttributeMode.INITIAL);
		tmp.put("priceConscious", AttributeMode.INITIAL);
		tmp.put("gstinNumber", AttributeMode.INITIAL);
		tmp.put("verifiedForCOD", AttributeMode.INITIAL);
		tmp.put("verificationDate", AttributeMode.INITIAL);
		tmp.put("customerFit", AttributeMode.INITIAL);
		tmp.put("verifiedEmail", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.jalo.user.Customer", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("hideEntry", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.ordersplitting.jalo.ConsignmentEntry", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("quality", AttributeMode.INITIAL);
		tmp.put("isRecommended", AttributeMode.INITIAL);
		tmp.put("baseProduct", AttributeMode.INITIAL);
		tmp.put("reply", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.customerreview.jalo.CustomerReview", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("usableForBrand", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.cms2.jalo.pages.CategoryPage", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("metaTitle", AttributeMode.INITIAL);
		tmp.put("isBrand", AttributeMode.INITIAL);
		tmp.put("recommendedProducts", AttributeMode.INITIAL);
		tmp.put("newInCategoryComponent", AttributeMode.INITIAL);
		tmp.put("newInCategorymobileComponent", AttributeMode.INITIAL);
		tmp.put("newShorterLengthComponent", AttributeMode.INITIAL);
		tmp.put("inStoreAndOnlineComponent", AttributeMode.INITIAL);
		tmp.put("colorExplosionComponent", AttributeMode.INITIAL);
		tmp.put("colorCollectionComponent", AttributeMode.INITIAL);
		tmp.put("accessoriesComponent", AttributeMode.INITIAL);
		tmp.put("brandsWeLoveComponent", AttributeMode.INITIAL);
		tmp.put("featureComponents", AttributeMode.INITIAL);
		tmp.put("bestSellerProducts", AttributeMode.INITIAL);
		tmp.put("brandDetails", AttributeMode.INITIAL);
		tmp.put("brandExploreCollectionComponent", AttributeMode.INITIAL);
		tmp.put("shopByTrend", AttributeMode.INITIAL);
		tmp.put("brandCategory", AttributeMode.INITIAL);
		tmp.put("brandvideo", AttributeMode.INITIAL);
		tmp.put("womenCollection", AttributeMode.INITIAL);
		tmp.put("shopByComponent", AttributeMode.INITIAL);
		tmp.put("womenTopCollectionComponent", AttributeMode.INITIAL);
		tmp.put("ourBrandDescription", AttributeMode.INITIAL);
		tmp.put("productSpecificCategory", AttributeMode.INITIAL);
		tmp.put("CategorySectionComponent", AttributeMode.INITIAL);
		tmp.put("bestBrandsComponent", AttributeMode.INITIAL);
		tmp.put("ourBrandComponent", AttributeMode.INITIAL);
		tmp.put("ourBrandDescriptionComponent", AttributeMode.INITIAL);
		tmp.put("detailedDescription", AttributeMode.INITIAL);
		tmp.put("isIndexable", AttributeMode.INITIAL);
		tmp.put("virtualCategoryEntries", AttributeMode.INITIAL);
		tmp.put("isVirtualCategory", AttributeMode.INITIAL);
		tmp.put("categoryPage", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.category.jalo.Category", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("parking", AttributeMode.INITIAL);
		tmp.put("priority", AttributeMode.INITIAL);
		tmp.put("posDisclaimer", AttributeMode.INITIAL);
		tmp.put("returnNote", AttributeMode.INITIAL);
		tmp.put("cin", AttributeMode.INITIAL);
		tmp.put("storeManager", AttributeMode.INITIAL);
		tmp.put("isEnabledForPersonalShopper", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.storelocator.jalo.PointOfService", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("activeFrom", AttributeMode.INITIAL);
		tmp.put("activeUntil", AttributeMode.INITIAL);
		tmp.put("redirectURL", AttributeMode.INITIAL);
		tmp.put("imageMapHTML", AttributeMode.INITIAL);
		tmp.put("sslClCron", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.jalo.media.Media", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("registerOffer", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.acceleratorcms.jalo.components.NavigationBarCollectionComponent", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("link", AttributeMode.INITIAL);
		tmp.put("tagType", AttributeMode.INITIAL);
		tmp.put("tagValue", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.cms2.jalo.navigation.CMSNavigationNode", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("linkType", AttributeMode.INITIAL);
		tmp.put("linkLabel", AttributeMode.INITIAL);
		tmp.put("brand", AttributeMode.INITIAL);
		tmp.put("tags", AttributeMode.INITIAL);
		tmp.put("lThreeCategory", AttributeMode.INITIAL);
		tmp.put("linkCategoryType", AttributeMode.INITIAL);
		tmp.put("query", AttributeMode.INITIAL);
		tmp.put("sort", AttributeMode.INITIAL);
		tmp.put("linkTextColor", AttributeMode.INITIAL);
		tmp.put("tagType", AttributeMode.INITIAL);
		tmp.put("tagValue", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.cms2.jalo.contents.components.CMSLinkComponent", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("linkType", AttributeMode.INITIAL);
		tmp.put("mediaList", AttributeMode.INITIAL);
		tmp.put("activeFrom", AttributeMode.INITIAL);
		tmp.put("activeUntil", AttributeMode.INITIAL);
		tmp.put("analyticsTracking", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.acceleratorcms.jalo.components.SimpleBannerComponent", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("analyticsTracking", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.acceleratorcms.jalo.components.SimpleResponsiveBannerComponent", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("mediaList", AttributeMode.INITIAL);
		tmp.put("analyticsTracking", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.cms2.jalo.contents.components.CMSImageComponent", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("percentDiscountDisplayOption", AttributeMode.INITIAL);
		tmp.put("newTagDisplayOption", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.cms2.jalo.site.CMSSite", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("ShowOnStorefront", AttributeMode.INITIAL);
		tmp.put("termAndConditionURL", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.voucher.jalo.PromotionVoucher", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("schemeCode", AttributeMode.INITIAL);
		tmp.put("showOnNav", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.voucher.jalo.Voucher", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("schemeCode", AttributeMode.INITIAL);
		tmp.put("showOnNav", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.promotions.jalo.AbstractPromotion", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("sdiLastRunTime", AttributeMode.INITIAL);
		tmp.put("generalString", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.cronjob.jalo.CronJob", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("metaTitle", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.cms2.jalo.pages.AbstractPage", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("priority", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.jalo.user.Title", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("customerIssueCategory", AttributeMode.INITIAL);
		tmp.put("additionalCharges", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.basecommerce.jalo.site.BaseSite", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("warehouses", AttributeMode.INITIAL);
		tmp.put("searchPageDefaultSortValue", AttributeMode.INITIAL);
		tmp.put("brandPageDefaultSortValue", AttributeMode.INITIAL);
		tmp.put("categoryPageDefaultSortValue", AttributeMode.INITIAL);
		tmp.put("lineCountShowMore", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.solrfacetsearch.jalo.config.SolrFacetSearchConfig", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("collapse", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.solrfacetsearch.jalo.config.SolrIndexedProperty", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("awbNumber", AttributeMode.INITIAL);
		tmp.put("carrier", AttributeMode.INITIAL);
		tmp.put("type", AttributeMode.INITIAL);
		tmp.put("status", AttributeMode.INITIAL);
		tmp.put("pickupDate", AttributeMode.INITIAL);
		tmp.put("deliveryCharge", AttributeMode.INITIAL);
		tmp.put("bankDetails", AttributeMode.INITIAL);
		tmp.put("rmaBankDetails", AttributeMode.INITIAL);
		tmp.put("priceDiffBankDetails", AttributeMode.INITIAL);
		tmp.put("refundMode", AttributeMode.INITIAL);
		tmp.put("pickup", AttributeMode.INITIAL);
		tmp.put("warehouse", AttributeMode.INITIAL);
		tmp.put("orderReturnRecordEntry", AttributeMode.INITIAL);
		tmp.put("shippingCost", AttributeMode.INITIAL);
		tmp.put("rmaShippingCost", AttributeMode.INITIAL);
		tmp.put("priceDiff", AttributeMode.INITIAL);
		tmp.put("priceDiffRefundMode", AttributeMode.INITIAL);
		tmp.put("priceDiffCaptureMode", AttributeMode.INITIAL);
		tmp.put("rmaShippingCostReturnMode", AttributeMode.INITIAL);
		tmp.put("totalRefundAmount", AttributeMode.INITIAL);
		tmp.put("csTicket", AttributeMode.INITIAL);
		tmp.put("rmaRejectionReason", AttributeMode.INITIAL);
		tmp.put("exchangeOrder", AttributeMode.INITIAL);
		tmp.put("rmaGeneratedByRTO", AttributeMode.INITIAL);
		tmp.put("originalPaymentsBeforeReturn", AttributeMode.INITIAL);
		tmp.put("bankDetailsOTP", AttributeMode.INITIAL);
		tmp.put("bankDetailsLinkID", AttributeMode.INITIAL);
		tmp.put("rmaCompletionDate", AttributeMode.INITIAL);
		tmp.put("canResendBankAcLink", AttributeMode.INITIAL);
		tmp.put("convertedRefund", AttributeMode.INITIAL);
		tmp.put("payableRefundAmount", AttributeMode.INITIAL);
		tmp.put("inStoreLocation", AttributeMode.INITIAL);
		tmp.put("creditNoteAmount", AttributeMode.INITIAL);
		tmp.put("creditNoteNumber", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.returns.jalo.ReturnRequest", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("refundedPerUnitAmount", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.ordermodify.jalo.OrderEntryModificationRecordEntry", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("reason", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.returns.jalo.OrderEntryReturnRecordEntry", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("refundAmount", AttributeMode.INITIAL);
		tmp.put("ticket", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.ordermodify.jalo.OrderModificationRecordEntry", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("inventoryZoneQuantity", AttributeMode.INITIAL);
		tmp.put("damagedZoneQuantity", AttributeMode.INITIAL);
		tmp.put("finalReturnQuantity", AttributeMode.INITIAL);
		tmp.put("finalRefundAmount", AttributeMode.INITIAL);
		tmp.put("transferNumber", AttributeMode.INITIAL);
		tmp.put("batchNumber", AttributeMode.INITIAL);
		tmp.put("isOverriden", AttributeMode.INITIAL);
		tmp.put("shippingAmount", AttributeMode.INITIAL);
		tmp.put("consignmentEntriesFulfillingReturn", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.returns.jalo.ReturnEntry", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("priceDiff", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.returns.jalo.ReplacementEntry", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("customerCareCreditsLimit", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.store.BaseStore", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("stateCode", AttributeMode.INITIAL);
		tmp.put("regionType", AttributeMode.INITIAL);
		tmp.put("mmsCode", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.jalo.c2l.Region", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("TaxType", AttributeMode.INITIAL);
		tmp.put("ToArea", AttributeMode.INITIAL);
		tmp.put("StyleCode", AttributeMode.INITIAL);
		tmp.put("SKUCode", AttributeMode.INITIAL);
		tmp.put("TaxIdentifier", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.jalo.order.price.Tax", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("isStorePickupAvailable", AttributeMode.INITIAL);
		tmp.put("latitude", AttributeMode.INITIAL);
		tmp.put("longitude", AttributeMode.INITIAL);
		tmp.put("address", AttributeMode.INITIAL);
		tmp.put("pickupStarttime", AttributeMode.INITIAL);
		tmp.put("pickupEndtime", AttributeMode.INITIAL);
		tmp.put("bufferIncluded", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.ordersplitting.jalo.Warehouse", Collections.unmodifiableMap(tmp));
		tmp = new HashMap<String, AttributeMode>();
		tmp.put("paytmTransactionResponseVal", AttributeMode.INITIAL);
		ttmp.put("de.hybris.platform.payment.jalo.PaymentTransaction", Collections.unmodifiableMap(tmp));
		DEFAULT_INITIAL_ATTRIBUTES = ttmp;
	}
	@Override
	public Map<String, AttributeMode> getDefaultAttributeModes(final Class<? extends Item> itemClass)
	{
		Map<String, AttributeMode> ret = new HashMap<>();
		final Map<String, AttributeMode> attr = DEFAULT_INITIAL_ATTRIBUTES.get(itemClass.getName());
		if (attr != null)
		{
			ret.putAll(attr);
		}
		return ret;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.accessoriesComponent</code> attribute.
	 * @return the accessoriesComponent - List of Recommended Products for this Category
	 */
	public AccessoriesComponent getAccessoriesComponent(final SessionContext ctx, final Category item)
	{
		return (AccessoriesComponent)item.getProperty( ctx, SslCoreConstants.Attributes.Category.ACCESSORIESCOMPONENT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.accessoriesComponent</code> attribute.
	 * @return the accessoriesComponent - List of Recommended Products for this Category
	 */
	public AccessoriesComponent getAccessoriesComponent(final Category item)
	{
		return getAccessoriesComponent( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.accessoriesComponent</code> attribute. 
	 * @param value the accessoriesComponent - List of Recommended Products for this Category
	 */
	public void setAccessoriesComponent(final SessionContext ctx, final Category item, final AccessoriesComponent value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.ACCESSORIESCOMPONENT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.accessoriesComponent</code> attribute. 
	 * @param value the accessoriesComponent - List of Recommended Products for this Category
	 */
	public void setAccessoriesComponent(final Category item, final AccessoriesComponent value)
	{
		setAccessoriesComponent( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Media.activeFrom</code> attribute.
	 * @return the activeFrom
	 */
	public Date getActiveFrom(final SessionContext ctx, final Media item)
	{
		return (Date)item.getProperty( ctx, SslCoreConstants.Attributes.Media.ACTIVEFROM);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Media.activeFrom</code> attribute.
	 * @return the activeFrom
	 */
	public Date getActiveFrom(final Media item)
	{
		return getActiveFrom( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Media.activeFrom</code> attribute. 
	 * @param value the activeFrom
	 */
	public void setActiveFrom(final SessionContext ctx, final Media item, final Date value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Media.ACTIVEFROM,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Media.activeFrom</code> attribute. 
	 * @param value the activeFrom
	 */
	public void setActiveFrom(final Media item, final Date value)
	{
		setActiveFrom( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>SimpleBannerComponent.activeFrom</code> attribute.
	 * @return the activeFrom
	 */
	public Date getActiveFrom(final SessionContext ctx, final SimpleBannerComponent item)
	{
		return (Date)item.getProperty( ctx, SslCoreConstants.Attributes.SimpleBannerComponent.ACTIVEFROM);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>SimpleBannerComponent.activeFrom</code> attribute.
	 * @return the activeFrom
	 */
	public Date getActiveFrom(final SimpleBannerComponent item)
	{
		return getActiveFrom( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>SimpleBannerComponent.activeFrom</code> attribute. 
	 * @param value the activeFrom
	 */
	public void setActiveFrom(final SessionContext ctx, final SimpleBannerComponent item, final Date value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.SimpleBannerComponent.ACTIVEFROM,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>SimpleBannerComponent.activeFrom</code> attribute. 
	 * @param value the activeFrom
	 */
	public void setActiveFrom(final SimpleBannerComponent item, final Date value)
	{
		setActiveFrom( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Media.activeUntil</code> attribute.
	 * @return the activeUntil
	 */
	public Date getActiveUntil(final SessionContext ctx, final Media item)
	{
		return (Date)item.getProperty( ctx, SslCoreConstants.Attributes.Media.ACTIVEUNTIL);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Media.activeUntil</code> attribute.
	 * @return the activeUntil
	 */
	public Date getActiveUntil(final Media item)
	{
		return getActiveUntil( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Media.activeUntil</code> attribute. 
	 * @param value the activeUntil
	 */
	public void setActiveUntil(final SessionContext ctx, final Media item, final Date value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Media.ACTIVEUNTIL,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Media.activeUntil</code> attribute. 
	 * @param value the activeUntil
	 */
	public void setActiveUntil(final Media item, final Date value)
	{
		setActiveUntil( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>SimpleBannerComponent.activeUntil</code> attribute.
	 * @return the activeUntil
	 */
	public Date getActiveUntil(final SessionContext ctx, final SimpleBannerComponent item)
	{
		return (Date)item.getProperty( ctx, SslCoreConstants.Attributes.SimpleBannerComponent.ACTIVEUNTIL);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>SimpleBannerComponent.activeUntil</code> attribute.
	 * @return the activeUntil
	 */
	public Date getActiveUntil(final SimpleBannerComponent item)
	{
		return getActiveUntil( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>SimpleBannerComponent.activeUntil</code> attribute. 
	 * @param value the activeUntil
	 */
	public void setActiveUntil(final SessionContext ctx, final SimpleBannerComponent item, final Date value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.SimpleBannerComponent.ACTIVEUNTIL,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>SimpleBannerComponent.activeUntil</code> attribute. 
	 * @param value the activeUntil
	 */
	public void setActiveUntil(final SimpleBannerComponent item, final Date value)
	{
		setActiveUntil( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>BaseSite.additionalCharges</code> attribute.
	 * @return the additionalCharges - All additional charges
	 */
	public String getAdditionalCharges(final SessionContext ctx, final BaseSite item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.BaseSite.ADDITIONALCHARGES);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>BaseSite.additionalCharges</code> attribute.
	 * @return the additionalCharges - All additional charges
	 */
	public String getAdditionalCharges(final BaseSite item)
	{
		return getAdditionalCharges( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>BaseSite.additionalCharges</code> attribute. 
	 * @param value the additionalCharges - All additional charges
	 */
	public void setAdditionalCharges(final SessionContext ctx, final BaseSite item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.BaseSite.ADDITIONALCHARGES,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>BaseSite.additionalCharges</code> attribute. 
	 * @param value the additionalCharges - All additional charges
	 */
	public void setAdditionalCharges(final BaseSite item, final String value)
	{
		setAdditionalCharges( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Warehouse.address</code> attribute.
	 * @return the address - Address of the Warehouse
	 */
	public Address getAddress(final SessionContext ctx, final Warehouse item)
	{
		return (Address)item.getProperty( ctx, SslCoreConstants.Attributes.Warehouse.ADDRESS);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Warehouse.address</code> attribute.
	 * @return the address - Address of the Warehouse
	 */
	public Address getAddress(final Warehouse item)
	{
		return getAddress( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Warehouse.address</code> attribute. 
	 * @param value the address - Address of the Warehouse
	 */
	public void setAddress(final SessionContext ctx, final Warehouse item, final Address value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Warehouse.ADDRESS,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Warehouse.address</code> attribute. 
	 * @param value the address - Address of the Warehouse
	 */
	public void setAddress(final Warehouse item, final Address value)
	{
		setAddress( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.age</code> attribute.
	 * @return the age - Customer Age
	 */
	public Integer getAge(final SessionContext ctx, final Customer item)
	{
		return (Integer)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.AGE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.age</code> attribute.
	 * @return the age - Customer Age
	 */
	public Integer getAge(final Customer item)
	{
		return getAge( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.age</code> attribute. 
	 * @return the age - Customer Age
	 */
	public int getAgeAsPrimitive(final SessionContext ctx, final Customer item)
	{
		Integer value = getAge( ctx,item );
		return value != null ? value.intValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.age</code> attribute. 
	 * @return the age - Customer Age
	 */
	public int getAgeAsPrimitive(final Customer item)
	{
		return getAgeAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.age</code> attribute. 
	 * @param value the age - Customer Age
	 */
	public void setAge(final SessionContext ctx, final Customer item, final Integer value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.AGE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.age</code> attribute. 
	 * @param value the age - Customer Age
	 */
	public void setAge(final Customer item, final Integer value)
	{
		setAge( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.age</code> attribute. 
	 * @param value the age - Customer Age
	 */
	public void setAge(final SessionContext ctx, final Customer item, final int value)
	{
		setAge( ctx, item, Integer.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.age</code> attribute. 
	 * @param value the age - Customer Age
	 */
	public void setAge(final Customer item, final int value)
	{
		setAge( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.ageImprovedSearch</code> attribute.
	 * @return the ageImprovedSearch
	 */
	public Collection<Age> getAgeImprovedSearch(final SessionContext ctx, final Product item)
	{
		final List<Age> items = item.getLinkedItems( 
			ctx,
			true,
			SslCoreConstants.Relations.PRODUCTAGERELATION,
			null,
			false,
			false
		);
		return items;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.ageImprovedSearch</code> attribute.
	 * @return the ageImprovedSearch
	 */
	public Collection<Age> getAgeImprovedSearch(final Product item)
	{
		return getAgeImprovedSearch( getSession().getSessionContext(), item );
	}
	
	public long getAgeImprovedSearchCount(final SessionContext ctx, final Product item)
	{
		return item.getLinkedItemsCount(
			ctx,
			true,
			SslCoreConstants.Relations.PRODUCTAGERELATION,
			null
		);
	}
	
	public long getAgeImprovedSearchCount(final Product item)
	{
		return getAgeImprovedSearchCount( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.ageImprovedSearch</code> attribute. 
	 * @param value the ageImprovedSearch
	 */
	public void setAgeImprovedSearch(final SessionContext ctx, final Product item, final Collection<Age> value)
	{
		item.setLinkedItems( 
			ctx,
			true,
			SslCoreConstants.Relations.PRODUCTAGERELATION,
			null,
			value,
			false,
			false,
			Utilities.getMarkModifiedOverride(PRODUCTAGERELATION_MARKMODIFIED)
		);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.ageImprovedSearch</code> attribute. 
	 * @param value the ageImprovedSearch
	 */
	public void setAgeImprovedSearch(final Product item, final Collection<Age> value)
	{
		setAgeImprovedSearch( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Adds <code>value</code> to ageImprovedSearch. 
	 * @param value the item to add to ageImprovedSearch
	 */
	public void addToAgeImprovedSearch(final SessionContext ctx, final Product item, final Age value)
	{
		item.addLinkedItems( 
			ctx,
			true,
			SslCoreConstants.Relations.PRODUCTAGERELATION,
			null,
			Collections.singletonList(value),
			false,
			false,
			Utilities.getMarkModifiedOverride(PRODUCTAGERELATION_MARKMODIFIED)
		);
	}
	
	/**
	 * <i>Generated method</i> - Adds <code>value</code> to ageImprovedSearch. 
	 * @param value the item to add to ageImprovedSearch
	 */
	public void addToAgeImprovedSearch(final Product item, final Age value)
	{
		addToAgeImprovedSearch( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Removes <code>value</code> from ageImprovedSearch. 
	 * @param value the item to remove from ageImprovedSearch
	 */
	public void removeFromAgeImprovedSearch(final SessionContext ctx, final Product item, final Age value)
	{
		item.removeLinkedItems( 
			ctx,
			true,
			SslCoreConstants.Relations.PRODUCTAGERELATION,
			null,
			Collections.singletonList(value),
			false,
			false,
			Utilities.getMarkModifiedOverride(PRODUCTAGERELATION_MARKMODIFIED)
		);
	}
	
	/**
	 * <i>Generated method</i> - Removes <code>value</code> from ageImprovedSearch. 
	 * @param value the item to remove from ageImprovedSearch
	 */
	public void removeFromAgeImprovedSearch(final Product item, final Age value)
	{
		removeFromAgeImprovedSearch( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.altBrandCode</code> attribute.
	 * @return the altBrandCode - To indicate ALT BRAND CODE
	 */
	public String getAltBrandCode(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.ALTBRANDCODE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.altBrandCode</code> attribute.
	 * @return the altBrandCode - To indicate ALT BRAND CODE
	 */
	public String getAltBrandCode(final Product item)
	{
		return getAltBrandCode( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.altBrandCode</code> attribute. 
	 * @param value the altBrandCode - To indicate ALT BRAND CODE
	 */
	public void setAltBrandCode(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.ALTBRANDCODE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.altBrandCode</code> attribute. 
	 * @param value the altBrandCode - To indicate ALT BRAND CODE
	 */
	public void setAltBrandCode(final Product item, final String value)
	{
		setAltBrandCode( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.alternateEANList</code> attribute.
	 * @return the alternateEANList - SSL products may have multiple EANs
	 */
	public Collection<String> getAlternateEANList(final SessionContext ctx, final Product item)
	{
		Collection<String> coll = (Collection<String>)item.getProperty( ctx, SslCoreConstants.Attributes.Product.ALTERNATEEANLIST);
		return coll != null ? coll : Collections.EMPTY_LIST;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.alternateEANList</code> attribute.
	 * @return the alternateEANList - SSL products may have multiple EANs
	 */
	public Collection<String> getAlternateEANList(final Product item)
	{
		return getAlternateEANList( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.alternateEANList</code> attribute. 
	 * @param value the alternateEANList - SSL products may have multiple EANs
	 */
	public void setAlternateEANList(final SessionContext ctx, final Product item, final Collection<String> value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.ALTERNATEEANLIST,value == null || !value.isEmpty() ? value : null );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.alternateEANList</code> attribute. 
	 * @param value the alternateEANList - SSL products may have multiple EANs
	 */
	public void setAlternateEANList(final Product item, final Collection<String> value)
	{
		setAlternateEANList( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.alternateEans</code> attribute.
	 * @return the alternateEans
	 */
	public Set<Ean> getAlternateEans(final SessionContext ctx, final Product item)
	{
		final List<Ean> items = item.getLinkedItems( 
			ctx,
			false,
			SslCoreConstants.Relations.PRODUCT2EANRELATION,
			null,
			false,
			false
		);
		return new LinkedHashSet<Ean>(items);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.alternateEans</code> attribute.
	 * @return the alternateEans
	 */
	public Set<Ean> getAlternateEans(final Product item)
	{
		return getAlternateEans( getSession().getSessionContext(), item );
	}
	
	public long getAlternateEansCount(final SessionContext ctx, final Product item)
	{
		return item.getLinkedItemsCount(
			ctx,
			false,
			SslCoreConstants.Relations.PRODUCT2EANRELATION,
			null
		);
	}
	
	public long getAlternateEansCount(final Product item)
	{
		return getAlternateEansCount( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.alternateEans</code> attribute. 
	 * @param value the alternateEans
	 */
	public void setAlternateEans(final SessionContext ctx, final Product item, final Set<Ean> value)
	{
		item.setLinkedItems( 
			ctx,
			false,
			SslCoreConstants.Relations.PRODUCT2EANRELATION,
			null,
			value,
			false,
			false,
			Utilities.getMarkModifiedOverride(PRODUCT2EANRELATION_MARKMODIFIED)
		);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.alternateEans</code> attribute. 
	 * @param value the alternateEans
	 */
	public void setAlternateEans(final Product item, final Set<Ean> value)
	{
		setAlternateEans( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Adds <code>value</code> to alternateEans. 
	 * @param value the item to add to alternateEans
	 */
	public void addToAlternateEans(final SessionContext ctx, final Product item, final Ean value)
	{
		item.addLinkedItems( 
			ctx,
			false,
			SslCoreConstants.Relations.PRODUCT2EANRELATION,
			null,
			Collections.singletonList(value),
			false,
			false,
			Utilities.getMarkModifiedOverride(PRODUCT2EANRELATION_MARKMODIFIED)
		);
	}
	
	/**
	 * <i>Generated method</i> - Adds <code>value</code> to alternateEans. 
	 * @param value the item to add to alternateEans
	 */
	public void addToAlternateEans(final Product item, final Ean value)
	{
		addToAlternateEans( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Removes <code>value</code> from alternateEans. 
	 * @param value the item to remove from alternateEans
	 */
	public void removeFromAlternateEans(final SessionContext ctx, final Product item, final Ean value)
	{
		item.removeLinkedItems( 
			ctx,
			false,
			SslCoreConstants.Relations.PRODUCT2EANRELATION,
			null,
			Collections.singletonList(value),
			false,
			false,
			Utilities.getMarkModifiedOverride(PRODUCT2EANRELATION_MARKMODIFIED)
		);
	}
	
	/**
	 * <i>Generated method</i> - Removes <code>value</code> from alternateEans. 
	 * @param value the item to remove from alternateEans
	 */
	public void removeFromAlternateEans(final Product item, final Ean value)
	{
		removeFromAlternateEans( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>SimpleBannerComponent.analyticsTracking</code> attribute.
	 * @return the analyticsTracking
	 */
	public String getAnalyticsTracking(final SessionContext ctx, final SimpleBannerComponent item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.SimpleBannerComponent.ANALYTICSTRACKING);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>SimpleBannerComponent.analyticsTracking</code> attribute.
	 * @return the analyticsTracking
	 */
	public String getAnalyticsTracking(final SimpleBannerComponent item)
	{
		return getAnalyticsTracking( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>SimpleBannerComponent.analyticsTracking</code> attribute. 
	 * @param value the analyticsTracking
	 */
	public void setAnalyticsTracking(final SessionContext ctx, final SimpleBannerComponent item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.SimpleBannerComponent.ANALYTICSTRACKING,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>SimpleBannerComponent.analyticsTracking</code> attribute. 
	 * @param value the analyticsTracking
	 */
	public void setAnalyticsTracking(final SimpleBannerComponent item, final String value)
	{
		setAnalyticsTracking( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>SimpleResponsiveBannerComponent.analyticsTracking</code> attribute.
	 * @return the analyticsTracking
	 */
	public String getAnalyticsTracking(final SessionContext ctx, final SimpleResponsiveBannerComponent item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.SimpleResponsiveBannerComponent.ANALYTICSTRACKING);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>SimpleResponsiveBannerComponent.analyticsTracking</code> attribute.
	 * @return the analyticsTracking
	 */
	public String getAnalyticsTracking(final SimpleResponsiveBannerComponent item)
	{
		return getAnalyticsTracking( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>SimpleResponsiveBannerComponent.analyticsTracking</code> attribute. 
	 * @param value the analyticsTracking
	 */
	public void setAnalyticsTracking(final SessionContext ctx, final SimpleResponsiveBannerComponent item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.SimpleResponsiveBannerComponent.ANALYTICSTRACKING,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>SimpleResponsiveBannerComponent.analyticsTracking</code> attribute. 
	 * @param value the analyticsTracking
	 */
	public void setAnalyticsTracking(final SimpleResponsiveBannerComponent item, final String value)
	{
		setAnalyticsTracking( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSImageComponent.analyticsTracking</code> attribute.
	 * @return the analyticsTracking
	 */
	public String getAnalyticsTracking(final SessionContext ctx, final CMSImageComponent item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.CMSImageComponent.ANALYTICSTRACKING);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSImageComponent.analyticsTracking</code> attribute.
	 * @return the analyticsTracking
	 */
	public String getAnalyticsTracking(final CMSImageComponent item)
	{
		return getAnalyticsTracking( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSImageComponent.analyticsTracking</code> attribute. 
	 * @param value the analyticsTracking
	 */
	public void setAnalyticsTracking(final SessionContext ctx, final CMSImageComponent item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.CMSImageComponent.ANALYTICSTRACKING,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSImageComponent.analyticsTracking</code> attribute. 
	 * @param value the analyticsTracking
	 */
	public void setAnalyticsTracking(final CMSImageComponent item, final String value)
	{
		setAnalyticsTracking( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.applicableTaxPercent</code> attribute.
	 * @return the applicableTaxPercent
	 */
	public Double getApplicableTaxPercent(final SessionContext ctx, final AbstractOrderEntry item)
	{
		return (Double)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrderEntry.APPLICABLETAXPERCENT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.applicableTaxPercent</code> attribute.
	 * @return the applicableTaxPercent
	 */
	public Double getApplicableTaxPercent(final AbstractOrderEntry item)
	{
		return getApplicableTaxPercent( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.applicableTaxPercent</code> attribute. 
	 * @return the applicableTaxPercent
	 */
	public double getApplicableTaxPercentAsPrimitive(final SessionContext ctx, final AbstractOrderEntry item)
	{
		Double value = getApplicableTaxPercent( ctx,item );
		return value != null ? value.doubleValue() : 0.0d;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.applicableTaxPercent</code> attribute. 
	 * @return the applicableTaxPercent
	 */
	public double getApplicableTaxPercentAsPrimitive(final AbstractOrderEntry item)
	{
		return getApplicableTaxPercentAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.applicableTaxPercent</code> attribute. 
	 * @param value the applicableTaxPercent
	 */
	public void setApplicableTaxPercent(final SessionContext ctx, final AbstractOrderEntry item, final Double value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrderEntry.APPLICABLETAXPERCENT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.applicableTaxPercent</code> attribute. 
	 * @param value the applicableTaxPercent
	 */
	public void setApplicableTaxPercent(final AbstractOrderEntry item, final Double value)
	{
		setApplicableTaxPercent( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.applicableTaxPercent</code> attribute. 
	 * @param value the applicableTaxPercent
	 */
	public void setApplicableTaxPercent(final SessionContext ctx, final AbstractOrderEntry item, final double value)
	{
		setApplicableTaxPercent( ctx, item, Double.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.applicableTaxPercent</code> attribute. 
	 * @param value the applicableTaxPercent
	 */
	public void setApplicableTaxPercent(final AbstractOrderEntry item, final double value)
	{
		setApplicableTaxPercent( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.apportionedDeliveryCharges</code> attribute.
	 * @return the apportionedDeliveryCharges
	 */
	public Double getApportionedDeliveryCharges(final SessionContext ctx, final AbstractOrderEntry item)
	{
		return (Double)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrderEntry.APPORTIONEDDELIVERYCHARGES);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.apportionedDeliveryCharges</code> attribute.
	 * @return the apportionedDeliveryCharges
	 */
	public Double getApportionedDeliveryCharges(final AbstractOrderEntry item)
	{
		return getApportionedDeliveryCharges( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.apportionedDeliveryCharges</code> attribute. 
	 * @return the apportionedDeliveryCharges
	 */
	public double getApportionedDeliveryChargesAsPrimitive(final SessionContext ctx, final AbstractOrderEntry item)
	{
		Double value = getApportionedDeliveryCharges( ctx,item );
		return value != null ? value.doubleValue() : 0.0d;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.apportionedDeliveryCharges</code> attribute. 
	 * @return the apportionedDeliveryCharges
	 */
	public double getApportionedDeliveryChargesAsPrimitive(final AbstractOrderEntry item)
	{
		return getApportionedDeliveryChargesAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.apportionedDeliveryCharges</code> attribute. 
	 * @param value the apportionedDeliveryCharges
	 */
	public void setApportionedDeliveryCharges(final SessionContext ctx, final AbstractOrderEntry item, final Double value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrderEntry.APPORTIONEDDELIVERYCHARGES,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.apportionedDeliveryCharges</code> attribute. 
	 * @param value the apportionedDeliveryCharges
	 */
	public void setApportionedDeliveryCharges(final AbstractOrderEntry item, final Double value)
	{
		setApportionedDeliveryCharges( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.apportionedDeliveryCharges</code> attribute. 
	 * @param value the apportionedDeliveryCharges
	 */
	public void setApportionedDeliveryCharges(final SessionContext ctx, final AbstractOrderEntry item, final double value)
	{
		setApportionedDeliveryCharges( ctx, item, Double.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.apportionedDeliveryCharges</code> attribute. 
	 * @param value the apportionedDeliveryCharges
	 */
	public void setApportionedDeliveryCharges(final AbstractOrderEntry item, final double value)
	{
		setApportionedDeliveryCharges( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.autoWalletCreationFail</code> attribute.
	 * @return the autoWalletCreationFail
	 */
	public Boolean isAutoWalletCreationFail(final SessionContext ctx, final Customer item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.AUTOWALLETCREATIONFAIL);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.autoWalletCreationFail</code> attribute.
	 * @return the autoWalletCreationFail
	 */
	public Boolean isAutoWalletCreationFail(final Customer item)
	{
		return isAutoWalletCreationFail( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.autoWalletCreationFail</code> attribute. 
	 * @return the autoWalletCreationFail
	 */
	public boolean isAutoWalletCreationFailAsPrimitive(final SessionContext ctx, final Customer item)
	{
		Boolean value = isAutoWalletCreationFail( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.autoWalletCreationFail</code> attribute. 
	 * @return the autoWalletCreationFail
	 */
	public boolean isAutoWalletCreationFailAsPrimitive(final Customer item)
	{
		return isAutoWalletCreationFailAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.autoWalletCreationFail</code> attribute. 
	 * @param value the autoWalletCreationFail
	 */
	public void setAutoWalletCreationFail(final SessionContext ctx, final Customer item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.AUTOWALLETCREATIONFAIL,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.autoWalletCreationFail</code> attribute. 
	 * @param value the autoWalletCreationFail
	 */
	public void setAutoWalletCreationFail(final Customer item, final Boolean value)
	{
		setAutoWalletCreationFail( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.autoWalletCreationFail</code> attribute. 
	 * @param value the autoWalletCreationFail
	 */
	public void setAutoWalletCreationFail(final SessionContext ctx, final Customer item, final boolean value)
	{
		setAutoWalletCreationFail( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.autoWalletCreationFail</code> attribute. 
	 * @param value the autoWalletCreationFail
	 */
	public void setAutoWalletCreationFail(final Customer item, final boolean value)
	{
		setAutoWalletCreationFail( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.awbNumber</code> attribute.
	 * @return the awbNumber - Air Way Billing Number
	 */
	public String getAwbNumber(final SessionContext ctx, final AbstractOrder item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrder.AWBNUMBER);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.awbNumber</code> attribute.
	 * @return the awbNumber - Air Way Billing Number
	 */
	public String getAwbNumber(final AbstractOrder item)
	{
		return getAwbNumber( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.awbNumber</code> attribute. 
	 * @param value the awbNumber - Air Way Billing Number
	 */
	public void setAwbNumber(final SessionContext ctx, final AbstractOrder item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrder.AWBNUMBER,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.awbNumber</code> attribute. 
	 * @param value the awbNumber - Air Way Billing Number
	 */
	public void setAwbNumber(final AbstractOrder item, final String value)
	{
		setAwbNumber( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.awbNumber</code> attribute.
	 * @return the awbNumber - Air Way Billing Number
	 */
	public String getAwbNumber(final SessionContext ctx, final ReturnRequest item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.AWBNUMBER);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.awbNumber</code> attribute.
	 * @return the awbNumber - Air Way Billing Number
	 */
	public String getAwbNumber(final ReturnRequest item)
	{
		return getAwbNumber( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.awbNumber</code> attribute. 
	 * @param value the awbNumber - Air Way Billing Number
	 */
	public void setAwbNumber(final SessionContext ctx, final ReturnRequest item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.AWBNUMBER,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.awbNumber</code> attribute. 
	 * @param value the awbNumber - Air Way Billing Number
	 */
	public void setAwbNumber(final ReturnRequest item, final String value)
	{
		setAwbNumber( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.bankDetails</code> attribute.
	 * @return the bankDetails - Bank Details
	 */
	public ReturnRequestBankDetails getBankDetails(final SessionContext ctx, final ReturnRequest item)
	{
		return (ReturnRequestBankDetails)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.BANKDETAILS);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.bankDetails</code> attribute.
	 * @return the bankDetails - Bank Details
	 */
	public ReturnRequestBankDetails getBankDetails(final ReturnRequest item)
	{
		return getBankDetails( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.bankDetails</code> attribute. 
	 * @param value the bankDetails - Bank Details
	 */
	public void setBankDetails(final SessionContext ctx, final ReturnRequest item, final ReturnRequestBankDetails value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.BANKDETAILS,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.bankDetails</code> attribute. 
	 * @param value the bankDetails - Bank Details
	 */
	public void setBankDetails(final ReturnRequest item, final ReturnRequestBankDetails value)
	{
		setBankDetails( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.bankDetailsLinkID</code> attribute.
	 * @return the bankDetailsLinkID - Unique ID for indentifying link for Bank Details update
	 */
	public String getBankDetailsLinkID(final SessionContext ctx, final ReturnRequest item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.BANKDETAILSLINKID);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.bankDetailsLinkID</code> attribute.
	 * @return the bankDetailsLinkID - Unique ID for indentifying link for Bank Details update
	 */
	public String getBankDetailsLinkID(final ReturnRequest item)
	{
		return getBankDetailsLinkID( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.bankDetailsLinkID</code> attribute. 
	 * @param value the bankDetailsLinkID - Unique ID for indentifying link for Bank Details update
	 */
	public void setBankDetailsLinkID(final SessionContext ctx, final ReturnRequest item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.BANKDETAILSLINKID,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.bankDetailsLinkID</code> attribute. 
	 * @param value the bankDetailsLinkID - Unique ID for indentifying link for Bank Details update
	 */
	public void setBankDetailsLinkID(final ReturnRequest item, final String value)
	{
		setBankDetailsLinkID( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.bankDetailsOTP</code> attribute.
	 * @return the bankDetailsOTP - OTP for Bank Details Changes
	 */
	public String getBankDetailsOTP(final SessionContext ctx, final ReturnRequest item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.BANKDETAILSOTP);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.bankDetailsOTP</code> attribute.
	 * @return the bankDetailsOTP - OTP for Bank Details Changes
	 */
	public String getBankDetailsOTP(final ReturnRequest item)
	{
		return getBankDetailsOTP( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.bankDetailsOTP</code> attribute. 
	 * @param value the bankDetailsOTP - OTP for Bank Details Changes
	 */
	public void setBankDetailsOTP(final SessionContext ctx, final ReturnRequest item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.BANKDETAILSOTP,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.bankDetailsOTP</code> attribute. 
	 * @param value the bankDetailsOTP - OTP for Bank Details Changes
	 */
	public void setBankDetailsOTP(final ReturnRequest item, final String value)
	{
		setBankDetailsOTP( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CustomerReview.baseProduct</code> attribute.
	 * @return the baseProduct - Base product of the reviewed product.
	 */
	public Product getBaseProduct(final SessionContext ctx, final CustomerReview item)
	{
		return (Product)item.getProperty( ctx, SslCoreConstants.Attributes.CustomerReview.BASEPRODUCT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CustomerReview.baseProduct</code> attribute.
	 * @return the baseProduct - Base product of the reviewed product.
	 */
	public Product getBaseProduct(final CustomerReview item)
	{
		return getBaseProduct( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CustomerReview.baseProduct</code> attribute. 
	 * @param value the baseProduct - Base product of the reviewed product.
	 */
	public void setBaseProduct(final SessionContext ctx, final CustomerReview item, final Product value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.CustomerReview.BASEPRODUCT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CustomerReview.baseProduct</code> attribute. 
	 * @param value the baseProduct - Base product of the reviewed product.
	 */
	public void setBaseProduct(final CustomerReview item, final Product value)
	{
		setBaseProduct( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.batchNumber</code> attribute.
	 * @return the batchNumber - The batch number is hybris generated unique number while doing transfer to ODC
	 */
	public Long getBatchNumber(final SessionContext ctx, final ReturnEntry item)
	{
		return (Long)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnEntry.BATCHNUMBER);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.batchNumber</code> attribute.
	 * @return the batchNumber - The batch number is hybris generated unique number while doing transfer to ODC
	 */
	public Long getBatchNumber(final ReturnEntry item)
	{
		return getBatchNumber( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.batchNumber</code> attribute. 
	 * @return the batchNumber - The batch number is hybris generated unique number while doing transfer to ODC
	 */
	public long getBatchNumberAsPrimitive(final SessionContext ctx, final ReturnEntry item)
	{
		Long value = getBatchNumber( ctx,item );
		return value != null ? value.longValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.batchNumber</code> attribute. 
	 * @return the batchNumber - The batch number is hybris generated unique number while doing transfer to ODC
	 */
	public long getBatchNumberAsPrimitive(final ReturnEntry item)
	{
		return getBatchNumberAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.batchNumber</code> attribute. 
	 * @param value the batchNumber - The batch number is hybris generated unique number while doing transfer to ODC
	 */
	public void setBatchNumber(final SessionContext ctx, final ReturnEntry item, final Long value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnEntry.BATCHNUMBER,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.batchNumber</code> attribute. 
	 * @param value the batchNumber - The batch number is hybris generated unique number while doing transfer to ODC
	 */
	public void setBatchNumber(final ReturnEntry item, final Long value)
	{
		setBatchNumber( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.batchNumber</code> attribute. 
	 * @param value the batchNumber - The batch number is hybris generated unique number while doing transfer to ODC
	 */
	public void setBatchNumber(final SessionContext ctx, final ReturnEntry item, final long value)
	{
		setBatchNumber( ctx, item, Long.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.batchNumber</code> attribute. 
	 * @param value the batchNumber - The batch number is hybris generated unique number while doing transfer to ODC
	 */
	public void setBatchNumber(final ReturnEntry item, final long value)
	{
		setBatchNumber( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.bestBrandsComponent</code> attribute.
	 * @return the bestBrandsComponent
	 */
	public SslCategoryBestBrandsComponent getBestBrandsComponent(final SessionContext ctx, final Category item)
	{
		return (SslCategoryBestBrandsComponent)item.getProperty( ctx, SslCoreConstants.Attributes.Category.BESTBRANDSCOMPONENT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.bestBrandsComponent</code> attribute.
	 * @return the bestBrandsComponent
	 */
	public SslCategoryBestBrandsComponent getBestBrandsComponent(final Category item)
	{
		return getBestBrandsComponent( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.bestBrandsComponent</code> attribute. 
	 * @param value the bestBrandsComponent
	 */
	public void setBestBrandsComponent(final SessionContext ctx, final Category item, final SslCategoryBestBrandsComponent value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.BESTBRANDSCOMPONENT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.bestBrandsComponent</code> attribute. 
	 * @param value the bestBrandsComponent
	 */
	public void setBestBrandsComponent(final Category item, final SslCategoryBestBrandsComponent value)
	{
		setBestBrandsComponent( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.bestSeller</code> attribute.
	 * @return the bestSeller - To indicate best selling product
	 */
	public Boolean isBestSeller(final SessionContext ctx, final Product item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Product.BESTSELLER);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.bestSeller</code> attribute.
	 * @return the bestSeller - To indicate best selling product
	 */
	public Boolean isBestSeller(final Product item)
	{
		return isBestSeller( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.bestSeller</code> attribute. 
	 * @return the bestSeller - To indicate best selling product
	 */
	public boolean isBestSellerAsPrimitive(final SessionContext ctx, final Product item)
	{
		Boolean value = isBestSeller( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.bestSeller</code> attribute. 
	 * @return the bestSeller - To indicate best selling product
	 */
	public boolean isBestSellerAsPrimitive(final Product item)
	{
		return isBestSellerAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.bestSeller</code> attribute. 
	 * @param value the bestSeller - To indicate best selling product
	 */
	public void setBestSeller(final SessionContext ctx, final Product item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.BESTSELLER,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.bestSeller</code> attribute. 
	 * @param value the bestSeller - To indicate best selling product
	 */
	public void setBestSeller(final Product item, final Boolean value)
	{
		setBestSeller( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.bestSeller</code> attribute. 
	 * @param value the bestSeller - To indicate best selling product
	 */
	public void setBestSeller(final SessionContext ctx, final Product item, final boolean value)
	{
		setBestSeller( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.bestSeller</code> attribute. 
	 * @param value the bestSeller - To indicate best selling product
	 */
	public void setBestSeller(final Product item, final boolean value)
	{
		setBestSeller( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.bestSellerProducts</code> attribute.
	 * @return the bestSellerProducts - List of Recommended Products for this Category
	 */
	public List<Product> getBestSellerProducts(final SessionContext ctx, final Category item)
	{
		List<Product> coll = (List<Product>)item.getProperty( ctx, SslCoreConstants.Attributes.Category.BESTSELLERPRODUCTS);
		return coll != null ? coll : Collections.EMPTY_LIST;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.bestSellerProducts</code> attribute.
	 * @return the bestSellerProducts - List of Recommended Products for this Category
	 */
	public List<Product> getBestSellerProducts(final Category item)
	{
		return getBestSellerProducts( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.bestSellerProducts</code> attribute. 
	 * @param value the bestSellerProducts - List of Recommended Products for this Category
	 */
	public void setBestSellerProducts(final SessionContext ctx, final Category item, final List<Product> value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.BESTSELLERPRODUCTS,value == null || !value.isEmpty() ? value : null );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.bestSellerProducts</code> attribute. 
	 * @param value the bestSellerProducts - List of Recommended Products for this Category
	 */
	public void setBestSellerProducts(final Category item, final List<Product> value)
	{
		setBestSellerProducts( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSLinkComponent.brand</code> attribute.
	 * @return the brand - Brand name for plp link
	 */
	public String getBrand(final SessionContext ctx, final CMSLinkComponent item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.CMSLinkComponent.BRAND);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSLinkComponent.brand</code> attribute.
	 * @return the brand - Brand name for plp link
	 */
	public String getBrand(final CMSLinkComponent item)
	{
		return getBrand( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSLinkComponent.brand</code> attribute. 
	 * @param value the brand - Brand name for plp link
	 */
	public void setBrand(final SessionContext ctx, final CMSLinkComponent item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.CMSLinkComponent.BRAND,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSLinkComponent.brand</code> attribute. 
	 * @param value the brand - Brand name for plp link
	 */
	public void setBrand(final CMSLinkComponent item, final String value)
	{
		setBrand( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.brandCategory</code> attribute.
	 * @return the brandCategory
	 */
	public BrandCategoryComponent getBrandCategory(final SessionContext ctx, final Category item)
	{
		return (BrandCategoryComponent)item.getProperty( ctx, SslCoreConstants.Attributes.Category.BRANDCATEGORY);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.brandCategory</code> attribute.
	 * @return the brandCategory
	 */
	public BrandCategoryComponent getBrandCategory(final Category item)
	{
		return getBrandCategory( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.brandCategory</code> attribute. 
	 * @param value the brandCategory
	 */
	public void setBrandCategory(final SessionContext ctx, final Category item, final BrandCategoryComponent value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.BRANDCATEGORY,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.brandCategory</code> attribute. 
	 * @param value the brandCategory
	 */
	public void setBrandCategory(final Category item, final BrandCategoryComponent value)
	{
		setBrandCategory( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.brandCode</code> attribute.
	 * @return the brandCode - To indicate BRAND_CD
	 */
	public String getBrandCode(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.BRANDCODE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.brandCode</code> attribute.
	 * @return the brandCode - To indicate BRAND_CD
	 */
	public String getBrandCode(final Product item)
	{
		return getBrandCode( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.brandCode</code> attribute. 
	 * @param value the brandCode - To indicate BRAND_CD
	 */
	public void setBrandCode(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.BRANDCODE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.brandCode</code> attribute. 
	 * @param value the brandCode - To indicate BRAND_CD
	 */
	public void setBrandCode(final Product item, final String value)
	{
		setBrandCode( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.brandDetails</code> attribute.
	 * @return the brandDetails - List of Recommended Products for this Category
	 */
	public SslImageMapComponent getBrandDetails(final SessionContext ctx, final Category item)
	{
		return (SslImageMapComponent)item.getProperty( ctx, SslCoreConstants.Attributes.Category.BRANDDETAILS);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.brandDetails</code> attribute.
	 * @return the brandDetails - List of Recommended Products for this Category
	 */
	public SslImageMapComponent getBrandDetails(final Category item)
	{
		return getBrandDetails( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.brandDetails</code> attribute. 
	 * @param value the brandDetails - List of Recommended Products for this Category
	 */
	public void setBrandDetails(final SessionContext ctx, final Category item, final SslImageMapComponent value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.BRANDDETAILS,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.brandDetails</code> attribute. 
	 * @param value the brandDetails - List of Recommended Products for this Category
	 */
	public void setBrandDetails(final Category item, final SslImageMapComponent value)
	{
		setBrandDetails( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.brandExploreCollectionComponent</code> attribute.
	 * @return the brandExploreCollectionComponent
	 */
	public BrandDetailComponent getBrandExploreCollectionComponent(final SessionContext ctx, final Category item)
	{
		return (BrandDetailComponent)item.getProperty( ctx, SslCoreConstants.Attributes.Category.BRANDEXPLORECOLLECTIONCOMPONENT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.brandExploreCollectionComponent</code> attribute.
	 * @return the brandExploreCollectionComponent
	 */
	public BrandDetailComponent getBrandExploreCollectionComponent(final Category item)
	{
		return getBrandExploreCollectionComponent( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.brandExploreCollectionComponent</code> attribute. 
	 * @param value the brandExploreCollectionComponent
	 */
	public void setBrandExploreCollectionComponent(final SessionContext ctx, final Category item, final BrandDetailComponent value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.BRANDEXPLORECOLLECTIONCOMPONENT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.brandExploreCollectionComponent</code> attribute. 
	 * @param value the brandExploreCollectionComponent
	 */
	public void setBrandExploreCollectionComponent(final Category item, final BrandDetailComponent value)
	{
		setBrandExploreCollectionComponent( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.brandInfo</code> attribute.
	 * @return the brandInfo
	 */
	public String getBrandInfo(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.BRANDINFO);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.brandInfo</code> attribute.
	 * @return the brandInfo
	 */
	public String getBrandInfo(final Product item)
	{
		return getBrandInfo( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.brandInfo</code> attribute. 
	 * @param value the brandInfo
	 */
	public void setBrandInfo(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.BRANDINFO,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.brandInfo</code> attribute. 
	 * @param value the brandInfo
	 */
	public void setBrandInfo(final Product item, final String value)
	{
		setBrandInfo( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.brandLogo</code> attribute.
	 * @return the brandLogo
	 */
	public String getBrandLogo(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.BRANDLOGO);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.brandLogo</code> attribute.
	 * @return the brandLogo
	 */
	public String getBrandLogo(final Product item)
	{
		return getBrandLogo( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.brandLogo</code> attribute. 
	 * @param value the brandLogo
	 */
	public void setBrandLogo(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.BRANDLOGO,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.brandLogo</code> attribute. 
	 * @param value the brandLogo
	 */
	public void setBrandLogo(final Product item, final String value)
	{
		setBrandLogo( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.brandName</code> attribute.
	 * @return the brandName
	 */
	public String getBrandName(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.BRANDNAME);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.brandName</code> attribute.
	 * @return the brandName
	 */
	public String getBrandName(final Product item)
	{
		return getBrandName( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.brandName</code> attribute. 
	 * @param value the brandName
	 */
	public void setBrandName(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.BRANDNAME,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.brandName</code> attribute. 
	 * @param value the brandName
	 */
	public void setBrandName(final Product item, final String value)
	{
		setBrandName( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>SolrFacetSearchConfig.brandPageDefaultSortValue</code> attribute.
	 * @return the brandPageDefaultSortValue
	 */
	public SolrSort getBrandPageDefaultSortValue(final SessionContext ctx, final SolrFacetSearchConfig item)
	{
		return (SolrSort)item.getProperty( ctx, SslCoreConstants.Attributes.SolrFacetSearchConfig.BRANDPAGEDEFAULTSORTVALUE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>SolrFacetSearchConfig.brandPageDefaultSortValue</code> attribute.
	 * @return the brandPageDefaultSortValue
	 */
	public SolrSort getBrandPageDefaultSortValue(final SolrFacetSearchConfig item)
	{
		return getBrandPageDefaultSortValue( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>SolrFacetSearchConfig.brandPageDefaultSortValue</code> attribute. 
	 * @param value the brandPageDefaultSortValue
	 */
	public void setBrandPageDefaultSortValue(final SessionContext ctx, final SolrFacetSearchConfig item, final SolrSort value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.SolrFacetSearchConfig.BRANDPAGEDEFAULTSORTVALUE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>SolrFacetSearchConfig.brandPageDefaultSortValue</code> attribute. 
	 * @param value the brandPageDefaultSortValue
	 */
	public void setBrandPageDefaultSortValue(final SolrFacetSearchConfig item, final SolrSort value)
	{
		setBrandPageDefaultSortValue( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.brandsWeLoveComponent</code> attribute.
	 * @return the brandsWeLoveComponent - List of Recommended Products for this Category
	 */
	public BrandsWeLoveComponent getBrandsWeLoveComponent(final SessionContext ctx, final Category item)
	{
		return (BrandsWeLoveComponent)item.getProperty( ctx, SslCoreConstants.Attributes.Category.BRANDSWELOVECOMPONENT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.brandsWeLoveComponent</code> attribute.
	 * @return the brandsWeLoveComponent - List of Recommended Products for this Category
	 */
	public BrandsWeLoveComponent getBrandsWeLoveComponent(final Category item)
	{
		return getBrandsWeLoveComponent( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.brandsWeLoveComponent</code> attribute. 
	 * @param value the brandsWeLoveComponent - List of Recommended Products for this Category
	 */
	public void setBrandsWeLoveComponent(final SessionContext ctx, final Category item, final BrandsWeLoveComponent value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.BRANDSWELOVECOMPONENT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.brandsWeLoveComponent</code> attribute. 
	 * @param value the brandsWeLoveComponent - List of Recommended Products for this Category
	 */
	public void setBrandsWeLoveComponent(final Category item, final BrandsWeLoveComponent value)
	{
		setBrandsWeLoveComponent( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.brandvideo</code> attribute.
	 * @return the brandvideo
	 */
	public BrandVideoComponent getBrandvideo(final SessionContext ctx, final Category item)
	{
		return (BrandVideoComponent)item.getProperty( ctx, SslCoreConstants.Attributes.Category.BRANDVIDEO);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.brandvideo</code> attribute.
	 * @return the brandvideo
	 */
	public BrandVideoComponent getBrandvideo(final Category item)
	{
		return getBrandvideo( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.brandvideo</code> attribute. 
	 * @param value the brandvideo
	 */
	public void setBrandvideo(final SessionContext ctx, final Category item, final BrandVideoComponent value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.BRANDVIDEO,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.brandvideo</code> attribute. 
	 * @param value the brandvideo
	 */
	public void setBrandvideo(final Category item, final BrandVideoComponent value)
	{
		setBrandvideo( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Warehouse.bufferIncluded</code> attribute.
	 * @return the bufferIncluded - check to enable buffer stock on warehouse and not on DC
	 */
	public Boolean isBufferIncluded(final SessionContext ctx, final Warehouse item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Warehouse.BUFFERINCLUDED);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Warehouse.bufferIncluded</code> attribute.
	 * @return the bufferIncluded - check to enable buffer stock on warehouse and not on DC
	 */
	public Boolean isBufferIncluded(final Warehouse item)
	{
		return isBufferIncluded( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Warehouse.bufferIncluded</code> attribute. 
	 * @return the bufferIncluded - check to enable buffer stock on warehouse and not on DC
	 */
	public boolean isBufferIncludedAsPrimitive(final SessionContext ctx, final Warehouse item)
	{
		Boolean value = isBufferIncluded( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Warehouse.bufferIncluded</code> attribute. 
	 * @return the bufferIncluded - check to enable buffer stock on warehouse and not on DC
	 */
	public boolean isBufferIncludedAsPrimitive(final Warehouse item)
	{
		return isBufferIncludedAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Warehouse.bufferIncluded</code> attribute. 
	 * @param value the bufferIncluded - check to enable buffer stock on warehouse and not on DC
	 */
	public void setBufferIncluded(final SessionContext ctx, final Warehouse item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Warehouse.BUFFERINCLUDED,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Warehouse.bufferIncluded</code> attribute. 
	 * @param value the bufferIncluded - check to enable buffer stock on warehouse and not on DC
	 */
	public void setBufferIncluded(final Warehouse item, final Boolean value)
	{
		setBufferIncluded( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Warehouse.bufferIncluded</code> attribute. 
	 * @param value the bufferIncluded - check to enable buffer stock on warehouse and not on DC
	 */
	public void setBufferIncluded(final SessionContext ctx, final Warehouse item, final boolean value)
	{
		setBufferIncluded( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Warehouse.bufferIncluded</code> attribute. 
	 * @param value the bufferIncluded - check to enable buffer stock on warehouse and not on DC
	 */
	public void setBufferIncluded(final Warehouse item, final boolean value)
	{
		setBufferIncluded( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.bufferQuantity</code> attribute.
	 * @return the bufferQuantity - Buffer Quantity
	 */
	public Integer getBufferQuantity(final SessionContext ctx, final StockLevel item)
	{
		return (Integer)item.getProperty( ctx, SslCoreConstants.Attributes.StockLevel.BUFFERQUANTITY);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.bufferQuantity</code> attribute.
	 * @return the bufferQuantity - Buffer Quantity
	 */
	public Integer getBufferQuantity(final StockLevel item)
	{
		return getBufferQuantity( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.bufferQuantity</code> attribute. 
	 * @return the bufferQuantity - Buffer Quantity
	 */
	public int getBufferQuantityAsPrimitive(final SessionContext ctx, final StockLevel item)
	{
		Integer value = getBufferQuantity( ctx,item );
		return value != null ? value.intValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.bufferQuantity</code> attribute. 
	 * @return the bufferQuantity - Buffer Quantity
	 */
	public int getBufferQuantityAsPrimitive(final StockLevel item)
	{
		return getBufferQuantityAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.bufferQuantity</code> attribute. 
	 * @param value the bufferQuantity - Buffer Quantity
	 */
	public void setBufferQuantity(final SessionContext ctx, final StockLevel item, final Integer value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.StockLevel.BUFFERQUANTITY,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.bufferQuantity</code> attribute. 
	 * @param value the bufferQuantity - Buffer Quantity
	 */
	public void setBufferQuantity(final StockLevel item, final Integer value)
	{
		setBufferQuantity( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.bufferQuantity</code> attribute. 
	 * @param value the bufferQuantity - Buffer Quantity
	 */
	public void setBufferQuantity(final SessionContext ctx, final StockLevel item, final int value)
	{
		setBufferQuantity( ctx, item, Integer.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.bufferQuantity</code> attribute. 
	 * @param value the bufferQuantity - Buffer Quantity
	 */
	public void setBufferQuantity(final StockLevel item, final int value)
	{
		setBufferQuantity( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.cancelledQty</code> attribute.
	 * @return the cancelledQty
	 */
	public Long getCancelledQty(final SessionContext ctx, final AbstractOrderEntry item)
	{
		return (Long)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrderEntry.CANCELLEDQTY);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.cancelledQty</code> attribute.
	 * @return the cancelledQty
	 */
	public Long getCancelledQty(final AbstractOrderEntry item)
	{
		return getCancelledQty( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.cancelledQty</code> attribute. 
	 * @return the cancelledQty
	 */
	public long getCancelledQtyAsPrimitive(final SessionContext ctx, final AbstractOrderEntry item)
	{
		Long value = getCancelledQty( ctx,item );
		return value != null ? value.longValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.cancelledQty</code> attribute. 
	 * @return the cancelledQty
	 */
	public long getCancelledQtyAsPrimitive(final AbstractOrderEntry item)
	{
		return getCancelledQtyAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.cancelledQty</code> attribute. 
	 * @param value the cancelledQty
	 */
	public void setCancelledQty(final SessionContext ctx, final AbstractOrderEntry item, final Long value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrderEntry.CANCELLEDQTY,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.cancelledQty</code> attribute. 
	 * @param value the cancelledQty
	 */
	public void setCancelledQty(final AbstractOrderEntry item, final Long value)
	{
		setCancelledQty( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.cancelledQty</code> attribute. 
	 * @param value the cancelledQty
	 */
	public void setCancelledQty(final SessionContext ctx, final AbstractOrderEntry item, final long value)
	{
		setCancelledQty( ctx, item, Long.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.cancelledQty</code> attribute. 
	 * @param value the cancelledQty
	 */
	public void setCancelledQty(final AbstractOrderEntry item, final long value)
	{
		setCancelledQty( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.canResendBankAcLink</code> attribute.
	 * @return the canResendBankAcLink - Flag for checking if Bank Form cant be sent
	 */
	public Boolean isCanResendBankAcLink(final SessionContext ctx, final ReturnRequest item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.CANRESENDBANKACLINK);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.canResendBankAcLink</code> attribute.
	 * @return the canResendBankAcLink - Flag for checking if Bank Form cant be sent
	 */
	public Boolean isCanResendBankAcLink(final ReturnRequest item)
	{
		return isCanResendBankAcLink( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.canResendBankAcLink</code> attribute. 
	 * @return the canResendBankAcLink - Flag for checking if Bank Form cant be sent
	 */
	public boolean isCanResendBankAcLinkAsPrimitive(final SessionContext ctx, final ReturnRequest item)
	{
		Boolean value = isCanResendBankAcLink( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.canResendBankAcLink</code> attribute. 
	 * @return the canResendBankAcLink - Flag for checking if Bank Form cant be sent
	 */
	public boolean isCanResendBankAcLinkAsPrimitive(final ReturnRequest item)
	{
		return isCanResendBankAcLinkAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.canResendBankAcLink</code> attribute. 
	 * @param value the canResendBankAcLink - Flag for checking if Bank Form cant be sent
	 */
	public void setCanResendBankAcLink(final SessionContext ctx, final ReturnRequest item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.CANRESENDBANKACLINK,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.canResendBankAcLink</code> attribute. 
	 * @param value the canResendBankAcLink - Flag for checking if Bank Form cant be sent
	 */
	public void setCanResendBankAcLink(final ReturnRequest item, final Boolean value)
	{
		setCanResendBankAcLink( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.canResendBankAcLink</code> attribute. 
	 * @param value the canResendBankAcLink - Flag for checking if Bank Form cant be sent
	 */
	public void setCanResendBankAcLink(final SessionContext ctx, final ReturnRequest item, final boolean value)
	{
		setCanResendBankAcLink( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.canResendBankAcLink</code> attribute. 
	 * @param value the canResendBankAcLink - Flag for checking if Bank Form cant be sent
	 */
	public void setCanResendBankAcLink(final ReturnRequest item, final boolean value)
	{
		setCanResendBankAcLink( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PaymentInfo.captured</code> attribute.
	 * @return the captured - Indicates the payment captured or not.
	 */
	public Boolean isCaptured(final SessionContext ctx, final PaymentInfo item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.PaymentInfo.CAPTURED);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PaymentInfo.captured</code> attribute.
	 * @return the captured - Indicates the payment captured or not.
	 */
	public Boolean isCaptured(final PaymentInfo item)
	{
		return isCaptured( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PaymentInfo.captured</code> attribute. 
	 * @return the captured - Indicates the payment captured or not.
	 */
	public boolean isCapturedAsPrimitive(final SessionContext ctx, final PaymentInfo item)
	{
		Boolean value = isCaptured( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PaymentInfo.captured</code> attribute. 
	 * @return the captured - Indicates the payment captured or not.
	 */
	public boolean isCapturedAsPrimitive(final PaymentInfo item)
	{
		return isCapturedAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PaymentInfo.captured</code> attribute. 
	 * @param value the captured - Indicates the payment captured or not.
	 */
	public void setCaptured(final SessionContext ctx, final PaymentInfo item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.PaymentInfo.CAPTURED,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PaymentInfo.captured</code> attribute. 
	 * @param value the captured - Indicates the payment captured or not.
	 */
	public void setCaptured(final PaymentInfo item, final Boolean value)
	{
		setCaptured( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PaymentInfo.captured</code> attribute. 
	 * @param value the captured - Indicates the payment captured or not.
	 */
	public void setCaptured(final SessionContext ctx, final PaymentInfo item, final boolean value)
	{
		setCaptured( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PaymentInfo.captured</code> attribute. 
	 * @param value the captured - Indicates the payment captured or not.
	 */
	public void setCaptured(final PaymentInfo item, final boolean value)
	{
		setCaptured( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.careInstructions</code> attribute.
	 * @return the careInstructions
	 */
	public String getCareInstructions(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.CAREINSTRUCTIONS);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.careInstructions</code> attribute.
	 * @return the careInstructions
	 */
	public String getCareInstructions(final Product item)
	{
		return getCareInstructions( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.careInstructions</code> attribute. 
	 * @param value the careInstructions
	 */
	public void setCareInstructions(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.CAREINSTRUCTIONS,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.careInstructions</code> attribute. 
	 * @param value the careInstructions
	 */
	public void setCareInstructions(final Product item, final String value)
	{
		setCareInstructions( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.carrier</code> attribute.
	 * @return the carrier - Carrier
	 */
	public EnumerationValue getCarrier(final SessionContext ctx, final AbstractOrder item)
	{
		return (EnumerationValue)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrder.CARRIER);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.carrier</code> attribute.
	 * @return the carrier - Carrier
	 */
	public EnumerationValue getCarrier(final AbstractOrder item)
	{
		return getCarrier( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.carrier</code> attribute. 
	 * @param value the carrier - Carrier
	 */
	public void setCarrier(final SessionContext ctx, final AbstractOrder item, final EnumerationValue value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrder.CARRIER,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.carrier</code> attribute. 
	 * @param value the carrier - Carrier
	 */
	public void setCarrier(final AbstractOrder item, final EnumerationValue value)
	{
		setCarrier( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.carrier</code> attribute.
	 * @return the carrier - Assigned Carrier
	 */
	public EnumerationValue getCarrier(final SessionContext ctx, final ReturnRequest item)
	{
		return (EnumerationValue)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.CARRIER);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.carrier</code> attribute.
	 * @return the carrier - Assigned Carrier
	 */
	public EnumerationValue getCarrier(final ReturnRequest item)
	{
		return getCarrier( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.carrier</code> attribute. 
	 * @param value the carrier - Assigned Carrier
	 */
	public void setCarrier(final SessionContext ctx, final ReturnRequest item, final EnumerationValue value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.CARRIER,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.carrier</code> attribute. 
	 * @param value the carrier - Assigned Carrier
	 */
	public void setCarrier(final ReturnRequest item, final EnumerationValue value)
	{
		setCarrier( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.cartId</code> attribute.
	 * @return the cartId
	 */
	public String getCartId(final SessionContext ctx, final AbstractOrder item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrder.CARTID);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.cartId</code> attribute.
	 * @return the cartId
	 */
	public String getCartId(final AbstractOrder item)
	{
		return getCartId( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.cartId</code> attribute. 
	 * @param value the cartId
	 */
	public void setCartId(final SessionContext ctx, final AbstractOrder item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrder.CARTID,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.cartId</code> attribute. 
	 * @param value the cartId
	 */
	public void setCartId(final AbstractOrder item, final String value)
	{
		setCartId( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.categoryOfSupply</code> attribute.
	 * @return the categoryOfSupply - To indicate Category Of Supply
	 */
	public String getCategoryOfSupply(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.CATEGORYOFSUPPLY);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.categoryOfSupply</code> attribute.
	 * @return the categoryOfSupply - To indicate Category Of Supply
	 */
	public String getCategoryOfSupply(final Product item)
	{
		return getCategoryOfSupply( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.categoryOfSupply</code> attribute. 
	 * @param value the categoryOfSupply - To indicate Category Of Supply
	 */
	public void setCategoryOfSupply(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.CATEGORYOFSUPPLY,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.categoryOfSupply</code> attribute. 
	 * @param value the categoryOfSupply - To indicate Category Of Supply
	 */
	public void setCategoryOfSupply(final Product item, final String value)
	{
		setCategoryOfSupply( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.categoryPage</code> attribute.
	 * @return the categoryPage - Page for L1 Category or brand
	 */
	public CategoryPage getCategoryPage(final SessionContext ctx, final Category item)
	{
		return (CategoryPage)item.getProperty( ctx, SslCoreConstants.Attributes.Category.CATEGORYPAGE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.categoryPage</code> attribute.
	 * @return the categoryPage - Page for L1 Category or brand
	 */
	public CategoryPage getCategoryPage(final Category item)
	{
		return getCategoryPage( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.categoryPage</code> attribute. 
	 * @param value the categoryPage - Page for L1 Category or brand
	 */
	public void setCategoryPage(final SessionContext ctx, final Category item, final CategoryPage value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.CATEGORYPAGE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.categoryPage</code> attribute. 
	 * @param value the categoryPage - Page for L1 Category or brand
	 */
	public void setCategoryPage(final Category item, final CategoryPage value)
	{
		setCategoryPage( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>SolrFacetSearchConfig.categoryPageDefaultSortValue</code> attribute.
	 * @return the categoryPageDefaultSortValue
	 */
	public SolrSort getCategoryPageDefaultSortValue(final SessionContext ctx, final SolrFacetSearchConfig item)
	{
		return (SolrSort)item.getProperty( ctx, SslCoreConstants.Attributes.SolrFacetSearchConfig.CATEGORYPAGEDEFAULTSORTVALUE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>SolrFacetSearchConfig.categoryPageDefaultSortValue</code> attribute.
	 * @return the categoryPageDefaultSortValue
	 */
	public SolrSort getCategoryPageDefaultSortValue(final SolrFacetSearchConfig item)
	{
		return getCategoryPageDefaultSortValue( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>SolrFacetSearchConfig.categoryPageDefaultSortValue</code> attribute. 
	 * @param value the categoryPageDefaultSortValue
	 */
	public void setCategoryPageDefaultSortValue(final SessionContext ctx, final SolrFacetSearchConfig item, final SolrSort value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.SolrFacetSearchConfig.CATEGORYPAGEDEFAULTSORTVALUE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>SolrFacetSearchConfig.categoryPageDefaultSortValue</code> attribute. 
	 * @param value the categoryPageDefaultSortValue
	 */
	public void setCategoryPageDefaultSortValue(final SolrFacetSearchConfig item, final SolrSort value)
	{
		setCategoryPageDefaultSortValue( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.CategorySectionComponent</code> attribute.
	 * @return the CategorySectionComponent
	 */
	public SslCategoryCollectionComponent getCategorySectionComponent(final SessionContext ctx, final Category item)
	{
		return (SslCategoryCollectionComponent)item.getProperty( ctx, SslCoreConstants.Attributes.Category.CATEGORYSECTIONCOMPONENT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.CategorySectionComponent</code> attribute.
	 * @return the CategorySectionComponent
	 */
	public SslCategoryCollectionComponent getCategorySectionComponent(final Category item)
	{
		return getCategorySectionComponent( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.CategorySectionComponent</code> attribute. 
	 * @param value the CategorySectionComponent
	 */
	public void setCategorySectionComponent(final SessionContext ctx, final Category item, final SslCategoryCollectionComponent value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.CATEGORYSECTIONCOMPONENT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.CategorySectionComponent</code> attribute. 
	 * @param value the CategorySectionComponent
	 */
	public void setCategorySectionComponent(final Category item, final SslCategoryCollectionComponent value)
	{
		setCategorySectionComponent( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.ccAvenueOrderNumber</code> attribute.
	 * @return the ccAvenueOrderNumber
	 */
	public String getCcAvenueOrderNumber(final SessionContext ctx, final AbstractOrder item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrder.CCAVENUEORDERNUMBER);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.ccAvenueOrderNumber</code> attribute.
	 * @return the ccAvenueOrderNumber
	 */
	public String getCcAvenueOrderNumber(final AbstractOrder item)
	{
		return getCcAvenueOrderNumber( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.ccAvenueOrderNumber</code> attribute. 
	 * @param value the ccAvenueOrderNumber
	 */
	public void setCcAvenueOrderNumber(final SessionContext ctx, final AbstractOrder item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrder.CCAVENUEORDERNUMBER,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.ccAvenueOrderNumber</code> attribute. 
	 * @param value the ccAvenueOrderNumber
	 */
	public void setCcAvenueOrderNumber(final AbstractOrder item, final String value)
	{
		setCcAvenueOrderNumber( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.channelLicence</code> attribute.
	 * @return the channelLicence - To indicate if an item is available for specified
	 *                             channel
	 */
	public EnumerationValue getChannelLicence(final SessionContext ctx, final Product item)
	{
		return (EnumerationValue)item.getProperty( ctx, SslCoreConstants.Attributes.Product.CHANNELLICENCE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.channelLicence</code> attribute.
	 * @return the channelLicence - To indicate if an item is available for specified
	 *                             channel
	 */
	public EnumerationValue getChannelLicence(final Product item)
	{
		return getChannelLicence( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.channelLicence</code> attribute. 
	 * @param value the channelLicence - To indicate if an item is available for specified
	 *                             channel
	 */
	public void setChannelLicence(final SessionContext ctx, final Product item, final EnumerationValue value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.CHANNELLICENCE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.channelLicence</code> attribute. 
	 * @param value the channelLicence - To indicate if an item is available for specified
	 *                             channel
	 */
	public void setChannelLicence(final Product item, final EnumerationValue value)
	{
		setChannelLicence( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PointOfService.cin</code> attribute.
	 * @return the cin
	 */
	public String getCin(final SessionContext ctx, final PointOfService item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.PointOfService.CIN);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PointOfService.cin</code> attribute.
	 * @return the cin
	 */
	public String getCin(final PointOfService item)
	{
		return getCin( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PointOfService.cin</code> attribute. 
	 * @param value the cin
	 */
	public void setCin(final SessionContext ctx, final PointOfService item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.PointOfService.CIN,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PointOfService.cin</code> attribute. 
	 * @param value the cin
	 */
	public void setCin(final PointOfService item, final String value)
	{
		setCin( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.cityTier</code> attribute.
	 * @return the cityTier - City Tier
	 */
	public String getCityTier(final SessionContext ctx, final Customer item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.CITYTIER);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.cityTier</code> attribute.
	 * @return the cityTier - City Tier
	 */
	public String getCityTier(final Customer item)
	{
		return getCityTier( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.cityTier</code> attribute. 
	 * @param value the cityTier - City Tier
	 */
	public void setCityTier(final SessionContext ctx, final Customer item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.CITYTIER,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.cityTier</code> attribute. 
	 * @param value the cityTier - City Tier
	 */
	public void setCityTier(final Customer item, final String value)
	{
		setCityTier( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.classCode</code> attribute.
	 * @return the classCode - To indicate CLASS
	 */
	public String getClassCode(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.CLASSCODE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.classCode</code> attribute.
	 * @return the classCode - To indicate CLASS
	 */
	public String getClassCode(final Product item)
	{
		return getClassCode( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.classCode</code> attribute. 
	 * @param value the classCode - To indicate CLASS
	 */
	public void setClassCode(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.CLASSCODE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.classCode</code> attribute. 
	 * @param value the classCode - To indicate CLASS
	 */
	public void setClassCode(final Product item, final String value)
	{
		setClassCode( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.classificationOfGoods</code> attribute.
	 * @return the classificationOfGoods - To indicate Classification Of Goods
	 */
	public String getClassificationOfGoods(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.CLASSIFICATIONOFGOODS);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.classificationOfGoods</code> attribute.
	 * @return the classificationOfGoods - To indicate Classification Of Goods
	 */
	public String getClassificationOfGoods(final Product item)
	{
		return getClassificationOfGoods( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.classificationOfGoods</code> attribute. 
	 * @param value the classificationOfGoods - To indicate Classification Of Goods
	 */
	public void setClassificationOfGoods(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.CLASSIFICATIONOFGOODS,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.classificationOfGoods</code> attribute. 
	 * @param value the classificationOfGoods - To indicate Classification Of Goods
	 */
	public void setClassificationOfGoods(final Product item, final String value)
	{
		setClassificationOfGoods( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.className</code> attribute.
	 * @return the className - To indicate CLASS_NAME
	 */
	public String getClassName(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.CLASSNAME);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.className</code> attribute.
	 * @return the className - To indicate CLASS_NAME
	 */
	public String getClassName(final Product item)
	{
		return getClassName( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.className</code> attribute. 
	 * @param value the className - To indicate CLASS_NAME
	 */
	public void setClassName(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.CLASSNAME,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.className</code> attribute. 
	 * @param value the className - To indicate CLASS_NAME
	 */
	public void setClassName(final Product item, final String value)
	{
		setClassName( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.codPinCodes</code> attribute.
	 * @return the codPinCodes - Identify a product on cash on delivery pin code
	 *                             availability
	 */
	public List<PincodesList> getCodPinCodes(final SessionContext ctx, final Product item)
	{
		List<PincodesList> coll = (List<PincodesList>)item.getProperty( ctx, SslCoreConstants.Attributes.Product.CODPINCODES);
		return coll != null ? coll : Collections.EMPTY_LIST;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.codPinCodes</code> attribute.
	 * @return the codPinCodes - Identify a product on cash on delivery pin code
	 *                             availability
	 */
	public List<PincodesList> getCodPinCodes(final Product item)
	{
		return getCodPinCodes( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.codPinCodes</code> attribute. 
	 * @param value the codPinCodes - Identify a product on cash on delivery pin code
	 *                             availability
	 */
	public void setCodPinCodes(final SessionContext ctx, final Product item, final List<PincodesList> value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.CODPINCODES,value == null || !value.isEmpty() ? value : null );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.codPinCodes</code> attribute. 
	 * @param value the codPinCodes - Identify a product on cash on delivery pin code
	 *                             availability
	 */
	public void setCodPinCodes(final Product item, final List<PincodesList> value)
	{
		setCodPinCodes( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Vendor.CoDSelected</code> attribute.
	 * @return the CoDSelected
	 */
	public Boolean isCoDSelected(final SessionContext ctx, final Vendor item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Vendor.CODSELECTED);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Vendor.CoDSelected</code> attribute.
	 * @return the CoDSelected
	 */
	public Boolean isCoDSelected(final Vendor item)
	{
		return isCoDSelected( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Vendor.CoDSelected</code> attribute. 
	 * @return the CoDSelected
	 */
	public boolean isCoDSelectedAsPrimitive(final SessionContext ctx, final Vendor item)
	{
		Boolean value = isCoDSelected( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Vendor.CoDSelected</code> attribute. 
	 * @return the CoDSelected
	 */
	public boolean isCoDSelectedAsPrimitive(final Vendor item)
	{
		return isCoDSelectedAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Vendor.CoDSelected</code> attribute. 
	 * @param value the CoDSelected
	 */
	public void setCoDSelected(final SessionContext ctx, final Vendor item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Vendor.CODSELECTED,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Vendor.CoDSelected</code> attribute. 
	 * @param value the CoDSelected
	 */
	public void setCoDSelected(final Vendor item, final Boolean value)
	{
		setCoDSelected( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Vendor.CoDSelected</code> attribute. 
	 * @param value the CoDSelected
	 */
	public void setCoDSelected(final SessionContext ctx, final Vendor item, final boolean value)
	{
		setCoDSelected( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Vendor.CoDSelected</code> attribute. 
	 * @param value the CoDSelected
	 */
	public void setCoDSelected(final Vendor item, final boolean value)
	{
		setCoDSelected( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>SolrIndexedProperty.collapse</code> attribute.
	 * @return the collapse - Whether facet will remain collapsed or expanded on UI
	 */
	public Boolean isCollapse(final SessionContext ctx, final SolrIndexedProperty item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.SolrIndexedProperty.COLLAPSE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>SolrIndexedProperty.collapse</code> attribute.
	 * @return the collapse - Whether facet will remain collapsed or expanded on UI
	 */
	public Boolean isCollapse(final SolrIndexedProperty item)
	{
		return isCollapse( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>SolrIndexedProperty.collapse</code> attribute. 
	 * @return the collapse - Whether facet will remain collapsed or expanded on UI
	 */
	public boolean isCollapseAsPrimitive(final SessionContext ctx, final SolrIndexedProperty item)
	{
		Boolean value = isCollapse( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>SolrIndexedProperty.collapse</code> attribute. 
	 * @return the collapse - Whether facet will remain collapsed or expanded on UI
	 */
	public boolean isCollapseAsPrimitive(final SolrIndexedProperty item)
	{
		return isCollapseAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>SolrIndexedProperty.collapse</code> attribute. 
	 * @param value the collapse - Whether facet will remain collapsed or expanded on UI
	 */
	public void setCollapse(final SessionContext ctx, final SolrIndexedProperty item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.SolrIndexedProperty.COLLAPSE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>SolrIndexedProperty.collapse</code> attribute. 
	 * @param value the collapse - Whether facet will remain collapsed or expanded on UI
	 */
	public void setCollapse(final SolrIndexedProperty item, final Boolean value)
	{
		setCollapse( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>SolrIndexedProperty.collapse</code> attribute. 
	 * @param value the collapse - Whether facet will remain collapsed or expanded on UI
	 */
	public void setCollapse(final SessionContext ctx, final SolrIndexedProperty item, final boolean value)
	{
		setCollapse( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>SolrIndexedProperty.collapse</code> attribute. 
	 * @param value the collapse - Whether facet will remain collapsed or expanded on UI
	 */
	public void setCollapse(final SolrIndexedProperty item, final boolean value)
	{
		setCollapse( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.colorCollectionComponent</code> attribute.
	 * @return the colorCollectionComponent - List of Recommended Products for this Category
	 */
	public ColorCollectionComponent getColorCollectionComponent(final SessionContext ctx, final Category item)
	{
		return (ColorCollectionComponent)item.getProperty( ctx, SslCoreConstants.Attributes.Category.COLORCOLLECTIONCOMPONENT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.colorCollectionComponent</code> attribute.
	 * @return the colorCollectionComponent - List of Recommended Products for this Category
	 */
	public ColorCollectionComponent getColorCollectionComponent(final Category item)
	{
		return getColorCollectionComponent( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.colorCollectionComponent</code> attribute. 
	 * @param value the colorCollectionComponent - List of Recommended Products for this Category
	 */
	public void setColorCollectionComponent(final SessionContext ctx, final Category item, final ColorCollectionComponent value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.COLORCOLLECTIONCOMPONENT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.colorCollectionComponent</code> attribute. 
	 * @param value the colorCollectionComponent - List of Recommended Products for this Category
	 */
	public void setColorCollectionComponent(final Category item, final ColorCollectionComponent value)
	{
		setColorCollectionComponent( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.colorExplosionComponent</code> attribute.
	 * @return the colorExplosionComponent - List of Recommended Products for this Category
	 */
	public ColorExplosionComponent getColorExplosionComponent(final SessionContext ctx, final Category item)
	{
		return (ColorExplosionComponent)item.getProperty( ctx, SslCoreConstants.Attributes.Category.COLOREXPLOSIONCOMPONENT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.colorExplosionComponent</code> attribute.
	 * @return the colorExplosionComponent - List of Recommended Products for this Category
	 */
	public ColorExplosionComponent getColorExplosionComponent(final Category item)
	{
		return getColorExplosionComponent( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.colorExplosionComponent</code> attribute. 
	 * @param value the colorExplosionComponent - List of Recommended Products for this Category
	 */
	public void setColorExplosionComponent(final SessionContext ctx, final Category item, final ColorExplosionComponent value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.COLOREXPLOSIONCOMPONENT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.colorExplosionComponent</code> attribute. 
	 * @param value the colorExplosionComponent - List of Recommended Products for this Category
	 */
	public void setColorExplosionComponent(final Category item, final ColorExplosionComponent value)
	{
		setColorExplosionComponent( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.comingSoon</code> attribute.
	 * @return the comingSoon - To indicate if a product is to be displayed even
	 *                             without a price.
	 */
	public Boolean isComingSoon(final SessionContext ctx, final Product item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Product.COMINGSOON);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.comingSoon</code> attribute.
	 * @return the comingSoon - To indicate if a product is to be displayed even
	 *                             without a price.
	 */
	public Boolean isComingSoon(final Product item)
	{
		return isComingSoon( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.comingSoon</code> attribute. 
	 * @return the comingSoon - To indicate if a product is to be displayed even
	 *                             without a price.
	 */
	public boolean isComingSoonAsPrimitive(final SessionContext ctx, final Product item)
	{
		Boolean value = isComingSoon( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.comingSoon</code> attribute. 
	 * @return the comingSoon - To indicate if a product is to be displayed even
	 *                             without a price.
	 */
	public boolean isComingSoonAsPrimitive(final Product item)
	{
		return isComingSoonAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.comingSoon</code> attribute. 
	 * @param value the comingSoon - To indicate if a product is to be displayed even
	 *                             without a price.
	 */
	public void setComingSoon(final SessionContext ctx, final Product item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.COMINGSOON,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.comingSoon</code> attribute. 
	 * @param value the comingSoon - To indicate if a product is to be displayed even
	 *                             without a price.
	 */
	public void setComingSoon(final Product item, final Boolean value)
	{
		setComingSoon( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.comingSoon</code> attribute. 
	 * @param value the comingSoon - To indicate if a product is to be displayed even
	 *                             without a price.
	 */
	public void setComingSoon(final SessionContext ctx, final Product item, final boolean value)
	{
		setComingSoon( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.comingSoon</code> attribute. 
	 * @param value the comingSoon - To indicate if a product is to be displayed even
	 *                             without a price.
	 */
	public void setComingSoon(final Product item, final boolean value)
	{
		setComingSoon( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.consignmentEntriesFulfillingReturn</code> attribute.
	 * @return the consignmentEntriesFulfillingReturn
	 */
	public Map getConsignmentEntriesFulfillingReturn(final SessionContext ctx, final ReturnEntry item)
	{
		return (Map)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnEntry.CONSIGNMENTENTRIESFULFILLINGRETURN);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.consignmentEntriesFulfillingReturn</code> attribute.
	 * @return the consignmentEntriesFulfillingReturn
	 */
	public Map getConsignmentEntriesFulfillingReturn(final ReturnEntry item)
	{
		return getConsignmentEntriesFulfillingReturn( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.consignmentEntriesFulfillingReturn</code> attribute. 
	 * @param value the consignmentEntriesFulfillingReturn
	 */
	public void setConsignmentEntriesFulfillingReturn(final SessionContext ctx, final ReturnEntry item, final Map value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnEntry.CONSIGNMENTENTRIESFULFILLINGRETURN,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.consignmentEntriesFulfillingReturn</code> attribute. 
	 * @param value the consignmentEntriesFulfillingReturn
	 */
	public void setConsignmentEntriesFulfillingReturn(final ReturnEntry item, final Map value)
	{
		setConsignmentEntriesFulfillingReturn( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.convertedRefund</code> attribute.
	 * @return the convertedRefund - Flag for checking if Exchange is converted to refund
	 */
	public Boolean isConvertedRefund(final SessionContext ctx, final ReturnRequest item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.CONVERTEDREFUND);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.convertedRefund</code> attribute.
	 * @return the convertedRefund - Flag for checking if Exchange is converted to refund
	 */
	public Boolean isConvertedRefund(final ReturnRequest item)
	{
		return isConvertedRefund( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.convertedRefund</code> attribute. 
	 * @return the convertedRefund - Flag for checking if Exchange is converted to refund
	 */
	public boolean isConvertedRefundAsPrimitive(final SessionContext ctx, final ReturnRequest item)
	{
		Boolean value = isConvertedRefund( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.convertedRefund</code> attribute. 
	 * @return the convertedRefund - Flag for checking if Exchange is converted to refund
	 */
	public boolean isConvertedRefundAsPrimitive(final ReturnRequest item)
	{
		return isConvertedRefundAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.convertedRefund</code> attribute. 
	 * @param value the convertedRefund - Flag for checking if Exchange is converted to refund
	 */
	public void setConvertedRefund(final SessionContext ctx, final ReturnRequest item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.CONVERTEDREFUND,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.convertedRefund</code> attribute. 
	 * @param value the convertedRefund - Flag for checking if Exchange is converted to refund
	 */
	public void setConvertedRefund(final ReturnRequest item, final Boolean value)
	{
		setConvertedRefund( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.convertedRefund</code> attribute. 
	 * @param value the convertedRefund - Flag for checking if Exchange is converted to refund
	 */
	public void setConvertedRefund(final SessionContext ctx, final ReturnRequest item, final boolean value)
	{
		setConvertedRefund( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.convertedRefund</code> attribute. 
	 * @param value the convertedRefund - Flag for checking if Exchange is converted to refund
	 */
	public void setConvertedRefund(final ReturnRequest item, final boolean value)
	{
		setConvertedRefund( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.courierShippingFlag</code> attribute.
	 * @return the courierShippingFlag
	 */
	public Boolean isCourierShippingFlag(final SessionContext ctx, final Product item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Product.COURIERSHIPPINGFLAG);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.courierShippingFlag</code> attribute.
	 * @return the courierShippingFlag
	 */
	public Boolean isCourierShippingFlag(final Product item)
	{
		return isCourierShippingFlag( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.courierShippingFlag</code> attribute. 
	 * @return the courierShippingFlag
	 */
	public boolean isCourierShippingFlagAsPrimitive(final SessionContext ctx, final Product item)
	{
		Boolean value = isCourierShippingFlag( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.courierShippingFlag</code> attribute. 
	 * @return the courierShippingFlag
	 */
	public boolean isCourierShippingFlagAsPrimitive(final Product item)
	{
		return isCourierShippingFlagAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.courierShippingFlag</code> attribute. 
	 * @param value the courierShippingFlag
	 */
	public void setCourierShippingFlag(final SessionContext ctx, final Product item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.COURIERSHIPPINGFLAG,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.courierShippingFlag</code> attribute. 
	 * @param value the courierShippingFlag
	 */
	public void setCourierShippingFlag(final Product item, final Boolean value)
	{
		setCourierShippingFlag( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.courierShippingFlag</code> attribute. 
	 * @param value the courierShippingFlag
	 */
	public void setCourierShippingFlag(final SessionContext ctx, final Product item, final boolean value)
	{
		setCourierShippingFlag( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.courierShippingFlag</code> attribute. 
	 * @param value the courierShippingFlag
	 */
	public void setCourierShippingFlag(final Product item, final boolean value)
	{
		setCourierShippingFlag( getSession().getSessionContext(), item, value );
	}
	
	public AbandonedCartReportCronJob createAbandonedCartReportCronJob(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.ABANDONEDCARTREPORTCRONJOB );
			return (AbandonedCartReportCronJob)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating AbandonedCartReportCronJob : "+e.getMessage(), 0 );
		}
	}
	
	public AbandonedCartReportCronJob createAbandonedCartReportCronJob(final Map attributeValues)
	{
		return createAbandonedCartReportCronJob( getSession().getSessionContext(), attributeValues );
	}
	
	public AccessoriesBrandsParentComponent createAccessoriesBrandsParentComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.ACCESSORIESBRANDSPARENTCOMPONENT );
			return (AccessoriesBrandsParentComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating AccessoriesBrandsParentComponent : "+e.getMessage(), 0 );
		}
	}
	
	public AccessoriesBrandsParentComponent createAccessoriesBrandsParentComponent(final Map attributeValues)
	{
		return createAccessoriesBrandsParentComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public AccessoriesComponent createAccessoriesComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.ACCESSORIESCOMPONENT );
			return (AccessoriesComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating AccessoriesComponent : "+e.getMessage(), 0 );
		}
	}
	
	public AccessoriesComponent createAccessoriesComponent(final Map attributeValues)
	{
		return createAccessoriesComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public AddToCartAction1 createAddToCartAction1(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.ADDTOCARTACTION1 );
			return (AddToCartAction1)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating AddToCartAction1 : "+e.getMessage(), 0 );
		}
	}
	
	public AddToCartAction1 createAddToCartAction1(final Map attributeValues)
	{
		return createAddToCartAction1( getSession().getSessionContext(), attributeValues );
	}
	
	public Age createAge(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.AGE );
			return (Age)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating Age : "+e.getMessage(), 0 );
		}
	}
	
	public Age createAge(final Map attributeValues)
	{
		return createAge( getSession().getSessionContext(), attributeValues );
	}
	
	public SslAltBrandCodeRestriction createAltBrandCodeRestriction(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.ALTBRANDCODERESTRICTION );
			return (SslAltBrandCodeRestriction)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating AltBrandCodeRestriction : "+e.getMessage(), 0 );
		}
	}
	
	public SslAltBrandCodeRestriction createAltBrandCodeRestriction(final Map attributeValues)
	{
		return createAltBrandCodeRestriction( getSession().getSessionContext(), attributeValues );
	}
	
	public SslAltBrandCodeVoucherOrderRestriction createAltBrandCodeVoucherOrderRestriction(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.ALTBRANDCODEVOUCHERORDERRESTRICTION );
			return (SslAltBrandCodeVoucherOrderRestriction)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating AltBrandCodeVoucherOrderRestriction : "+e.getMessage(), 0 );
		}
	}
	
	public SslAltBrandCodeVoucherOrderRestriction createAltBrandCodeVoucherOrderRestriction(final Map attributeValues)
	{
		return createAltBrandCodeVoucherOrderRestriction( getSession().getSessionContext(), attributeValues );
	}
	
	public SslAltBrandCodeVoucherRestriction createAltBrandCodeVoucherRestriction(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.ALTBRANDCODEVOUCHERRESTRICTION );
			return (SslAltBrandCodeVoucherRestriction)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating AltBrandCodeVoucherRestriction : "+e.getMessage(), 0 );
		}
	}
	
	public SslAltBrandCodeVoucherRestriction createAltBrandCodeVoucherRestriction(final Map attributeValues)
	{
		return createAltBrandCodeVoucherRestriction( getSession().getSessionContext(), attributeValues );
	}
	
	public ApparelProduct createApparelProduct(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.APPARELPRODUCT );
			return (ApparelProduct)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ApparelProduct : "+e.getMessage(), 0 );
		}
	}
	
	public ApparelProduct createApparelProduct(final Map attributeValues)
	{
		return createApparelProduct( getSession().getSessionContext(), attributeValues );
	}
	
	public ApparelSizeVariantProduct createApparelSizeVariantProduct(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.APPARELSIZEVARIANTPRODUCT );
			return (ApparelSizeVariantProduct)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ApparelSizeVariantProduct : "+e.getMessage(), 0 );
		}
	}
	
	public ApparelSizeVariantProduct createApparelSizeVariantProduct(final Map attributeValues)
	{
		return createApparelSizeVariantProduct( getSession().getSessionContext(), attributeValues );
	}
	
	public ApparelStyleVariantProduct createApparelStyleVariantProduct(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.APPARELSTYLEVARIANTPRODUCT );
			return (ApparelStyleVariantProduct)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ApparelStyleVariantProduct : "+e.getMessage(), 0 );
		}
	}
	
	public ApparelStyleVariantProduct createApparelStyleVariantProduct(final Map attributeValues)
	{
		return createApparelStyleVariantProduct( getSession().getSessionContext(), attributeValues );
	}
	
	public BestSellerCMSComponent createBestSellerCMSComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.BESTSELLERCMSCOMPONENT );
			return (BestSellerCMSComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating BestSellerCMSComponent : "+e.getMessage(), 0 );
		}
	}
	
	public BestSellerCMSComponent createBestSellerCMSComponent(final Map attributeValues)
	{
		return createBestSellerCMSComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public BestSellerComponent createBestSellerComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.BESTSELLERCOMPONENT );
			return (BestSellerComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating BestSellerComponent : "+e.getMessage(), 0 );
		}
	}
	
	public BestSellerComponent createBestSellerComponent(final Map attributeValues)
	{
		return createBestSellerComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public BluedartResponseMapping createBluedartResponseMapping(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.BLUEDARTRESPONSEMAPPING );
			return (BluedartResponseMapping)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating BluedartResponseMapping : "+e.getMessage(), 0 );
		}
	}
	
	public BluedartResponseMapping createBluedartResponseMapping(final Map attributeValues)
	{
		return createBluedartResponseMapping( getSession().getSessionContext(), attributeValues );
	}
	
	public BrandCategoryComponent createBrandCategoryComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.BRANDCATEGORYCOMPONENT );
			return (BrandCategoryComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating BrandCategoryComponent : "+e.getMessage(), 0 );
		}
	}
	
	public BrandCategoryComponent createBrandCategoryComponent(final Map attributeValues)
	{
		return createBrandCategoryComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public BrandDetailComponent createBrandDetailComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.BRANDDETAILCOMPONENT );
			return (BrandDetailComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating BrandDetailComponent : "+e.getMessage(), 0 );
		}
	}
	
	public BrandDetailComponent createBrandDetailComponent(final Map attributeValues)
	{
		return createBrandDetailComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public BrandDetailComponent createBrandExploreCollectionComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.BRANDEXPLORECOLLECTIONCOMPONENT );
			return (BrandDetailComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating BrandExploreCollectionComponent : "+e.getMessage(), 0 );
		}
	}
	
	public BrandDetailComponent createBrandExploreCollectionComponent(final Map attributeValues)
	{
		return createBrandExploreCollectionComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public BrandListingComponent createBrandListingComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.BRANDLISTINGCOMPONENT );
			return (BrandListingComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating BrandListingComponent : "+e.getMessage(), 0 );
		}
	}
	
	public BrandListingComponent createBrandListingComponent(final Map attributeValues)
	{
		return createBrandListingComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public BrandMapping createBrandMapping(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.BRANDMAPPING );
			return (BrandMapping)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating BrandMapping : "+e.getMessage(), 0 );
		}
	}
	
	public BrandMapping createBrandMapping(final Map attributeValues)
	{
		return createBrandMapping( getSession().getSessionContext(), attributeValues );
	}
	
	public BrandMicrositeContentsComponent createBrandMicrositeContentsComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.BRANDMICROSITECONTENTSCOMPONENT );
			return (BrandMicrositeContentsComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating BrandMicrositeContentsComponent : "+e.getMessage(), 0 );
		}
	}
	
	public BrandMicrositeContentsComponent createBrandMicrositeContentsComponent(final Map attributeValues)
	{
		return createBrandMicrositeContentsComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public BrandMicrositeCrouselComponent createBrandMicrositeCrouselComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.BRANDMICROSITECROUSELCOMPONENT );
			return (BrandMicrositeCrouselComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating BrandMicrositeCrouselComponent : "+e.getMessage(), 0 );
		}
	}
	
	public BrandMicrositeCrouselComponent createBrandMicrositeCrouselComponent(final Map attributeValues)
	{
		return createBrandMicrositeCrouselComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public BrandMicrositeDetailsComponent createBrandMicrositeDetailsComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.BRANDMICROSITEDETAILSCOMPONENT );
			return (BrandMicrositeDetailsComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating BrandMicrositeDetailsComponent : "+e.getMessage(), 0 );
		}
	}
	
	public BrandMicrositeDetailsComponent createBrandMicrositeDetailsComponent(final Map attributeValues)
	{
		return createBrandMicrositeDetailsComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public BrandsBestSellersComponent createBrandsBestSellersComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.BRANDSBESTSELLERSCOMPONENT );
			return (BrandsBestSellersComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating BrandsBestSellersComponent : "+e.getMessage(), 0 );
		}
	}
	
	public BrandsBestSellersComponent createBrandsBestSellersComponent(final Map attributeValues)
	{
		return createBrandsBestSellersComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public BrandCategoryComponent createBrandsCollectionComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.BRANDSCOLLECTIONCOMPONENT );
			return (BrandCategoryComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating BrandsCollectionComponent : "+e.getMessage(), 0 );
		}
	}
	
	public BrandCategoryComponent createBrandsCollectionComponent(final Map attributeValues)
	{
		return createBrandsCollectionComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public BrandSpecifcCategoryComponent createBrandSpecifcCategoryComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.BRANDSPECIFCCATEGORYCOMPONENT );
			return (BrandSpecifcCategoryComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating BrandSpecifcCategoryComponent : "+e.getMessage(), 0 );
		}
	}
	
	public BrandSpecifcCategoryComponent createBrandSpecifcCategoryComponent(final Map attributeValues)
	{
		return createBrandSpecifcCategoryComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public BrandsWeLoveCMSComponent createBrandsWeLoveCMSComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.BRANDSWELOVECMSCOMPONENT );
			return (BrandsWeLoveCMSComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating BrandsWeLoveCMSComponent : "+e.getMessage(), 0 );
		}
	}
	
	public BrandsWeLoveCMSComponent createBrandsWeLoveCMSComponent(final Map attributeValues)
	{
		return createBrandsWeLoveCMSComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public BrandsWeLoveComponent createBrandsWeLoveComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.BRANDSWELOVECOMPONENT );
			return (BrandsWeLoveComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating BrandsWeLoveComponent : "+e.getMessage(), 0 );
		}
	}
	
	public BrandsWeLoveComponent createBrandsWeLoveComponent(final Map attributeValues)
	{
		return createBrandsWeLoveComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public BrandsWeLoveHomepageCMSComponent createBrandsWeLoveHomepageCMSComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.BRANDSWELOVEHOMEPAGECMSCOMPONENT );
			return (BrandsWeLoveHomepageCMSComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating BrandsWeLoveHomepageCMSComponent : "+e.getMessage(), 0 );
		}
	}
	
	public BrandsWeLoveHomepageCMSComponent createBrandsWeLoveHomepageCMSComponent(final Map attributeValues)
	{
		return createBrandsWeLoveHomepageCMSComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public BrandsWeLoveHomePageComponent createBrandsWeLoveHomePageComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.BRANDSWELOVEHOMEPAGECOMPONENT );
			return (BrandsWeLoveHomePageComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating BrandsWeLoveHomePageComponent : "+e.getMessage(), 0 );
		}
	}
	
	public BrandsWeLoveHomePageComponent createBrandsWeLoveHomePageComponent(final Map attributeValues)
	{
		return createBrandsWeLoveHomePageComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public BrandVideoComponent createBrandVideoComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.BRANDVIDEOCOMPONENT );
			return (BrandVideoComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating BrandVideoComponent : "+e.getMessage(), 0 );
		}
	}
	
	public BrandVideoComponent createBrandVideoComponent(final Map attributeValues)
	{
		return createBrandVideoComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public CardTypesAndRewardComponent createCardTypesAndRewardComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CARDTYPESANDREWARDCOMPONENT );
			return (CardTypesAndRewardComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CardTypesAndRewardComponent : "+e.getMessage(), 0 );
		}
	}
	
	public CardTypesAndRewardComponent createCardTypesAndRewardComponent(final Map attributeValues)
	{
		return createCardTypesAndRewardComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public CategoryBottomListingComponent createCategoryBottomListingComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CATEGORYBOTTOMLISTINGCOMPONENT );
			return (CategoryBottomListingComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CategoryBottomListingComponent : "+e.getMessage(), 0 );
		}
	}
	
	public CategoryBottomListingComponent createCategoryBottomListingComponent(final Map attributeValues)
	{
		return createCategoryBottomListingComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public DynamicLinkComponent createCategoryLinkComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CATEGORYLINKCOMPONENT );
			return (DynamicLinkComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CategoryLinkComponent : "+e.getMessage(), 0 );
		}
	}
	
	public DynamicLinkComponent createCategoryLinkComponent(final Map attributeValues)
	{
		return createCategoryLinkComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public CategoryListingComponent createCategoryListingComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CATEGORYLISTINGCOMPONENT );
			return (CategoryListingComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CategoryListingComponent : "+e.getMessage(), 0 );
		}
	}
	
	public CategoryListingComponent createCategoryListingComponent(final Map attributeValues)
	{
		return createCategoryListingComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public CategoryMediaUploadCronJob createCategoryMediaUploadCronJob(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CATEGORYMEDIAUPLOADCRONJOB );
			return (CategoryMediaUploadCronJob)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CategoryMediaUploadCronJob : "+e.getMessage(), 0 );
		}
	}
	
	public CategoryMediaUploadCronJob createCategoryMediaUploadCronJob(final Map attributeValues)
	{
		return createCategoryMediaUploadCronJob( getSession().getSessionContext(), attributeValues );
	}
	
	public CategorySizeGuideMapping createCategorySizeGuideMapping(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CATEGORYSIZEGUIDEMAPPING );
			return (CategorySizeGuideMapping)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CategorySizeGuideMapping : "+e.getMessage(), 0 );
		}
	}
	
	public CategorySizeGuideMapping createCategorySizeGuideMapping(final Map attributeValues)
	{
		return createCategorySizeGuideMapping( getSession().getSessionContext(), attributeValues );
	}
	
	public PaymentInfo createCCAvenueWalletPaymentInfo(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CCAVENUEWALLETPAYMENTINFO );
			return (PaymentInfo)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CCAvenueWalletPaymentInfo : "+e.getMessage(), 0 );
		}
	}
	
	public PaymentInfo createCCAvenueWalletPaymentInfo(final Map attributeValues)
	{
		return createCCAvenueWalletPaymentInfo( getSession().getSessionContext(), attributeValues );
	}
	
	public ChatWithUsComponent createChatWithUsComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CHATWITHUSCOMPONENT );
			return (ChatWithUsComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ChatWithUsComponent : "+e.getMessage(), 0 );
		}
	}
	
	public ChatWithUsComponent createChatWithUsComponent(final Map attributeValues)
	{
		return createChatWithUsComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public CMSBlogComponent createCMSBlogComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CMSBLOGCOMPONENT );
			return (CMSBlogComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CMSBlogComponent : "+e.getMessage(), 0 );
		}
	}
	
	public CMSBlogComponent createCMSBlogComponent(final Map attributeValues)
	{
		return createCMSBlogComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public CMSImageLinkComponent createCMSImageLinkComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CMSIMAGELINKCOMPONENT );
			return (CMSImageLinkComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CMSImageLinkComponent : "+e.getMessage(), 0 );
		}
	}
	
	public CMSImageLinkComponent createCMSImageLinkComponent(final Map attributeValues)
	{
		return createCMSImageLinkComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public CMSJspLinkVideoComponent createCMSJspLinkVideoComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CMSJSPLINKVIDEOCOMPONENT );
			return (CMSJspLinkVideoComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CMSJspLinkVideoComponent : "+e.getMessage(), 0 );
		}
	}
	
	public CMSJspLinkVideoComponent createCMSJspLinkVideoComponent(final Map attributeValues)
	{
		return createCMSJspLinkVideoComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public CMSLinkImageTextFavoritesComponent createCMSLinkImageTextFavoritesComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CMSLINKIMAGETEXTFAVORITESCOMPONENT );
			return (CMSLinkImageTextFavoritesComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CMSLinkImageTextFavoritesComponent : "+e.getMessage(), 0 );
		}
	}
	
	public CMSLinkImageTextFavoritesComponent createCMSLinkImageTextFavoritesComponent(final Map attributeValues)
	{
		return createCMSLinkImageTextFavoritesComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public CMSLinkTextComponent createCMSLinkTextComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CMSLINKTEXTCOMPONENT );
			return (CMSLinkTextComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CMSLinkTextComponent : "+e.getMessage(), 0 );
		}
	}
	
	public CMSLinkTextComponent createCMSLinkTextComponent(final Map attributeValues)
	{
		return createCMSLinkTextComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public CMSMediaParagraphComponent createCMSMediaParagraphComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CMSMEDIAPARAGRAPHCOMPONENT );
			return (CMSMediaParagraphComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CMSMediaParagraphComponent : "+e.getMessage(), 0 );
		}
	}
	
	public CMSMediaParagraphComponent createCMSMediaParagraphComponent(final Map attributeValues)
	{
		return createCMSMediaParagraphComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public CMSMediaParagraphContainer createCMSMediaParagraphContainer(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CMSMEDIAPARAGRAPHCONTAINER );
			return (CMSMediaParagraphContainer)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CMSMediaParagraphContainer : "+e.getMessage(), 0 );
		}
	}
	
	public CMSMediaParagraphContainer createCMSMediaParagraphContainer(final Map attributeValues)
	{
		return createCMSMediaParagraphContainer( getSession().getSessionContext(), attributeValues );
	}
	
	public CMSMediaParagraphLinkComponent createCMSMediaParagraphLinkComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CMSMEDIAPARAGRAPHLINKCOMPONENT );
			return (CMSMediaParagraphLinkComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CMSMediaParagraphLinkComponent : "+e.getMessage(), 0 );
		}
	}
	
	public CMSMediaParagraphLinkComponent createCMSMediaParagraphLinkComponent(final Map attributeValues)
	{
		return createCMSMediaParagraphLinkComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public CMSMediaParagraphLinkTabComponent createCMSMediaParagraphLinkTabComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CMSMEDIAPARAGRAPHLINKTABCOMPONENT );
			return (CMSMediaParagraphLinkTabComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CMSMediaParagraphLinkTabComponent : "+e.getMessage(), 0 );
		}
	}
	
	public CMSMediaParagraphLinkTabComponent createCMSMediaParagraphLinkTabComponent(final Map attributeValues)
	{
		return createCMSMediaParagraphLinkTabComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public CMSNonMemberLinkComponent createCMSNonMemberLinkComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CMSNONMEMBERLINKCOMPONENT );
			return (CMSNonMemberLinkComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CMSNonMemberLinkComponent : "+e.getMessage(), 0 );
		}
	}
	
	public CMSNonMemberLinkComponent createCMSNonMemberLinkComponent(final Map attributeValues)
	{
		return createCMSNonMemberLinkComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public CMSRecentOrderParagraphComponent createCMSRecentOrderParagraphComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CMSRECENTORDERPARAGRAPHCOMPONENT );
			return (CMSRecentOrderParagraphComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CMSRecentOrderParagraphComponent : "+e.getMessage(), 0 );
		}
	}
	
	public CMSRecentOrderParagraphComponent createCMSRecentOrderParagraphComponent(final Map attributeValues)
	{
		return createCMSRecentOrderParagraphComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public CMSSslGenderRestriction createCMSSslGenderRestriction(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CMSSSLGENDERRESTRICTION );
			return (CMSSslGenderRestriction)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CMSSslGenderRestriction : "+e.getMessage(), 0 );
		}
	}
	
	public CMSSslGenderRestriction createCMSSslGenderRestriction(final Map attributeValues)
	{
		return createCMSSslGenderRestriction( getSession().getSessionContext(), attributeValues );
	}
	
	public CMSTabContainer createCMSTabContainer(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CMSTABCONTAINER );
			return (CMSTabContainer)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CMSTabContainer : "+e.getMessage(), 0 );
		}
	}
	
	public CMSTabContainer createCMSTabContainer(final Map attributeValues)
	{
		return createCMSTabContainer( getSession().getSessionContext(), attributeValues );
	}
	
	public CMSYourReviewsRatingsParagraphComponent createCMSYourReviewsRatingsParagraphComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CMSYOURREVIEWSRATINGSPARAGRAPHCOMPONENT );
			return (CMSYourReviewsRatingsParagraphComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CMSYourReviewsRatingsParagraphComponent : "+e.getMessage(), 0 );
		}
	}
	
	public CMSYourReviewsRatingsParagraphComponent createCMSYourReviewsRatingsParagraphComponent(final Map attributeValues)
	{
		return createCMSYourReviewsRatingsParagraphComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public PaymentInfo createCODPaymentInfo(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CODPAYMENTINFO );
			return (PaymentInfo)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CODPaymentInfo : "+e.getMessage(), 0 );
		}
	}
	
	public PaymentInfo createCODPaymentInfo(final Map attributeValues)
	{
		return createCODPaymentInfo( getSession().getSessionContext(), attributeValues );
	}
	
	public ColorCollectionComponent createColorCollectionComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.COLORCOLLECTIONCOMPONENT );
			return (ColorCollectionComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ColorCollectionComponent : "+e.getMessage(), 0 );
		}
	}
	
	public ColorCollectionComponent createColorCollectionComponent(final Map attributeValues)
	{
		return createColorCollectionComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public ColorExplosionComponent createColorExplosionComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.COLOREXPLOSIONCOMPONENT );
			return (ColorExplosionComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ColorExplosionComponent : "+e.getMessage(), 0 );
		}
	}
	
	public ColorExplosionComponent createColorExplosionComponent(final Map attributeValues)
	{
		return createColorExplosionComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public ColorMapping createColorMapping(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.COLORMAPPING );
			return (ColorMapping)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ColorMapping : "+e.getMessage(), 0 );
		}
	}
	
	public ColorMapping createColorMapping(final Map attributeValues)
	{
		return createColorMapping( getSession().getSessionContext(), attributeValues );
	}
	
	public ConfigurablePageIndex createConfigurablePageIndex(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CONFIGURABLEPAGEINDEX );
			return (ConfigurablePageIndex)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ConfigurablePageIndex : "+e.getMessage(), 0 );
		}
	}
	
	public ConfigurablePageIndex createConfigurablePageIndex(final Map attributeValues)
	{
		return createConfigurablePageIndex( getSession().getSessionContext(), attributeValues );
	}
	
	public ContactUsStoreFrontProcess createContactUsStoreFrontProcess(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CONTACTUSSTOREFRONTPROCESS );
			return (ContactUsStoreFrontProcess)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ContactUsStoreFrontProcess : "+e.getMessage(), 0 );
		}
	}
	
	public ContactUsStoreFrontProcess createContactUsStoreFrontProcess(final Map attributeValues)
	{
		return createContactUsStoreFrontProcess( getSession().getSessionContext(), attributeValues );
	}
	
	public CouponComponent createCouponComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.COUPONCOMPONENT );
			return (CouponComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CouponComponent : "+e.getMessage(), 0 );
		}
	}
	
	public CouponComponent createCouponComponent(final Map attributeValues)
	{
		return createCouponComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public CustomerBirthdayProcess createCustomerBirthdayProcess(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CUSTOMERBIRTHDAYPROCESS );
			return (CustomerBirthdayProcess)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CustomerBirthdayProcess : "+e.getMessage(), 0 );
		}
	}
	
	public CustomerBirthdayProcess createCustomerBirthdayProcess(final Map attributeValues)
	{
		return createCustomerBirthdayProcess( getSession().getSessionContext(), attributeValues );
	}
	
	public CustomerFeedback createCustomerFeedback(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CUSTOMERFEEDBACK );
			return (CustomerFeedback)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CustomerFeedback : "+e.getMessage(), 0 );
		}
	}
	
	public CustomerFeedback createCustomerFeedback(final Map attributeValues)
	{
		return createCustomerFeedback( getSession().getSessionContext(), attributeValues );
	}
	
	public CustomerFeedbackTypesComponent createCustomerFeedbackTypesComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CUSTOMERFEEDBACKTYPESCOMPONENT );
			return (CustomerFeedbackTypesComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CustomerFeedbackTypesComponent : "+e.getMessage(), 0 );
		}
	}
	
	public CustomerFeedbackTypesComponent createCustomerFeedbackTypesComponent(final Map attributeValues)
	{
		return createCustomerFeedbackTypesComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public CustomerQuestionsComponent createCustomerQuestionsComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CUSTOMERQUESTIONSCOMPONENT );
			return (CustomerQuestionsComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CustomerQuestionsComponent : "+e.getMessage(), 0 );
		}
	}
	
	public CustomerQuestionsComponent createCustomerQuestionsComponent(final Map attributeValues)
	{
		return createCustomerQuestionsComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public CustomerSocialAccount createCustomerSocialAccount(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.CUSTOMERSOCIALACCOUNT );
			return (CustomerSocialAccount)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating CustomerSocialAccount : "+e.getMessage(), 0 );
		}
	}
	
	public CustomerSocialAccount createCustomerSocialAccount(final Map attributeValues)
	{
		return createCustomerSocialAccount( getSession().getSessionContext(), attributeValues );
	}
	
	public DealCollectionComponent createDealCollectionComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.DEALCOLLECTIONCOMPONENT );
			return (DealCollectionComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating DealCollectionComponent : "+e.getMessage(), 0 );
		}
	}
	
	public DealCollectionComponent createDealCollectionComponent(final Map attributeValues)
	{
		return createDealCollectionComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public DealComponent createDealComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.DEALCOMPONENT );
			return (DealComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating DealComponent : "+e.getMessage(), 0 );
		}
	}
	
	public DealComponent createDealComponent(final Map attributeValues)
	{
		return createDealComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public PaymentInfo createDebitCardPaymentInfo(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.DEBITCARDPAYMENTINFO );
			return (PaymentInfo)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating DebitCardPaymentInfo : "+e.getMessage(), 0 );
		}
	}
	
	public PaymentInfo createDebitCardPaymentInfo(final Map attributeValues)
	{
		return createDebitCardPaymentInfo( getSession().getSessionContext(), attributeValues );
	}
	
	public DelhiveryResponseMapping createDelhiveryResponseMapping(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.DELHIVERYRESPONSEMAPPING );
			return (DelhiveryResponseMapping)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating DelhiveryResponseMapping : "+e.getMessage(), 0 );
		}
	}
	
	public DelhiveryResponseMapping createDelhiveryResponseMapping(final Map attributeValues)
	{
		return createDelhiveryResponseMapping( getSession().getSessionContext(), attributeValues );
	}
	
	public DeliveryParagraphComponent createDeliveryParagraphComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.DELIVERYPARAGRAPHCOMPONENT );
			return (DeliveryParagraphComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating DeliveryParagraphComponent : "+e.getMessage(), 0 );
		}
	}
	
	public DeliveryParagraphComponent createDeliveryParagraphComponent(final Map attributeValues)
	{
		return createDeliveryParagraphComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public DeliveryPostalCode createDeliveryPostalCode(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.DELIVERYPOSTALCODE );
			return (DeliveryPostalCode)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating DeliveryPostalCode : "+e.getMessage(), 0 );
		}
	}
	
	public DeliveryPostalCode createDeliveryPostalCode(final Map attributeValues)
	{
		return createDeliveryPostalCode( getSession().getSessionContext(), attributeValues );
	}
	
	public DepartmentBufferStock createDepartmentBufferStock(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.DEPARTMENTBUFFERSTOCK );
			return (DepartmentBufferStock)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating DepartmentBufferStock : "+e.getMessage(), 0 );
		}
	}
	
	public DepartmentBufferStock createDepartmentBufferStock(final Map attributeValues)
	{
		return createDepartmentBufferStock( getSession().getSessionContext(), attributeValues );
	}
	
	public DisableReturnEntries createDisableReturnEntries(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.DISABLERETURNENTRIES );
			return (DisableReturnEntries)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating DisableReturnEntries : "+e.getMessage(), 0 );
		}
	}
	
	public DisableReturnEntries createDisableReturnEntries(final Map attributeValues)
	{
		return createDisableReturnEntries( getSession().getSessionContext(), attributeValues );
	}
	
	public Ean createEan(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.EAN );
			return (Ean)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating Ean : "+e.getMessage(), 0 );
		}
	}
	
	public Ean createEan(final Map attributeValues)
	{
		return createEan( getSession().getSessionContext(), attributeValues );
	}
	
	public EgvEmailProcess createEgvEmailProcess(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.EGVEMAILPROCESS );
			return (EgvEmailProcess)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating EgvEmailProcess : "+e.getMessage(), 0 );
		}
	}
	
	public EgvEmailProcess createEgvEmailProcess(final Map attributeValues)
	{
		return createEgvEmailProcess( getSession().getSessionContext(), attributeValues );
	}
	
	public EkartResponseMapping createEkartResponseMapping(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.EKARTRESPONSEMAPPING );
			return (EkartResponseMapping)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating EkartResponseMapping : "+e.getMessage(), 0 );
		}
	}
	
	public EkartResponseMapping createEkartResponseMapping(final Map attributeValues)
	{
		return createEkartResponseMapping( getSession().getSessionContext(), attributeValues );
	}
	
	public ExchangeStockLevel createExchangeStockLevel(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.EXCHANGESTOCKLEVEL );
			return (ExchangeStockLevel)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ExchangeStockLevel : "+e.getMessage(), 0 );
		}
	}
	
	public ExchangeStockLevel createExchangeStockLevel(final Map attributeValues)
	{
		return createExchangeStockLevel( getSession().getSessionContext(), attributeValues );
	}
	
	public ExclusiveBrandsComponent createExclusiveBrandsCMSComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.EXCLUSIVEBRANDSCMSCOMPONENT );
			return (ExclusiveBrandsComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ExclusiveBrandsCMSComponent : "+e.getMessage(), 0 );
		}
	}
	
	public ExclusiveBrandsComponent createExclusiveBrandsCMSComponent(final Map attributeValues)
	{
		return createExclusiveBrandsCMSComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public ExclusiveBrandsComponent createExclusiveBrandsComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.EXCLUSIVEBRANDSCOMPONENT );
			return (ExclusiveBrandsComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ExclusiveBrandsComponent : "+e.getMessage(), 0 );
		}
	}
	
	public ExclusiveBrandsComponent createExclusiveBrandsComponent(final Map attributeValues)
	{
		return createExclusiveBrandsComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public ExtendedCitizenSimpleBannerComponent createExtendedCitizenSimpleBannerComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.EXTENDEDCITIZENSIMPLEBANNERCOMPONENT );
			return (ExtendedCitizenSimpleBannerComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ExtendedCitizenSimpleBannerComponent : "+e.getMessage(), 0 );
		}
	}
	
	public ExtendedCitizenSimpleBannerComponent createExtendedCitizenSimpleBannerComponent(final Map attributeValues)
	{
		return createExtendedCitizenSimpleBannerComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public ExtendedMemberSimpleBannerComponent createExtendedMemberSimpleBannerComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.EXTENDEDMEMBERSIMPLEBANNERCOMPONENT );
			return (ExtendedMemberSimpleBannerComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ExtendedMemberSimpleBannerComponent : "+e.getMessage(), 0 );
		}
	}
	
	public ExtendedMemberSimpleBannerComponent createExtendedMemberSimpleBannerComponent(final Map attributeValues)
	{
		return createExtendedMemberSimpleBannerComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public ExtendedSimpleBannerComponent createExtendedSimpleBannerComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.EXTENDEDSIMPLEBANNERCOMPONENT );
			return (ExtendedSimpleBannerComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ExtendedSimpleBannerComponent : "+e.getMessage(), 0 );
		}
	}
	
	public ExtendedSimpleBannerComponent createExtendedSimpleBannerComponent(final Map attributeValues)
	{
		return createExtendedSimpleBannerComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public FCCBalanceComponent createFCCBalanceComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.FCCBALANCECOMPONENT );
			return (FCCBalanceComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating FCCBalanceComponent : "+e.getMessage(), 0 );
		}
	}
	
	public FCCBalanceComponent createFCCBalanceComponent(final Map attributeValues)
	{
		return createFCCBalanceComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public FCCBannerComponent createFCCBannerComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.FCCBANNERCOMPONENT );
			return (FCCBannerComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating FCCBannerComponent : "+e.getMessage(), 0 );
		}
	}
	
	public FCCBannerComponent createFCCBannerComponent(final Map attributeValues)
	{
		return createFCCBannerComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public FCCCardComponent createFCCCardComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.FCCCARDCOMPONENT );
			return (FCCCardComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating FCCCardComponent : "+e.getMessage(), 0 );
		}
	}
	
	public FCCCardComponent createFCCCardComponent(final Map attributeValues)
	{
		return createFCCCardComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public FccCrmTicketProcess createFccCrmTicketProcess(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.FCCCRMTICKETPROCESS );
			return (FccCrmTicketProcess)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating FccCrmTicketProcess : "+e.getMessage(), 0 );
		}
	}
	
	public FccCrmTicketProcess createFccCrmTicketProcess(final Map attributeValues)
	{
		return createFccCrmTicketProcess( getSession().getSessionContext(), attributeValues );
	}
	
	public FCCCardComponent createFCCMainNavComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.FCCMAINNAVCOMPONENT );
			return (FCCCardComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating FCCMainNavComponent : "+e.getMessage(), 0 );
		}
	}
	
	public FCCCardComponent createFCCMainNavComponent(final Map attributeValues)
	{
		return createFCCMainNavComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public FCCMedia createFCCMedia(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.FCCMEDIA );
			return (FCCMedia)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating FCCMedia : "+e.getMessage(), 0 );
		}
	}
	
	public FCCMedia createFCCMedia(final Map attributeValues)
	{
		return createFCCMedia( getSession().getSessionContext(), attributeValues );
	}
	
	public FCCBalanceComponent createFCMemberComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.FCMEMBERCOMPONENT );
			return (FCCBalanceComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating FCMemberComponent : "+e.getMessage(), 0 );
		}
	}
	
	public FCCBalanceComponent createFCMemberComponent(final Map attributeValues)
	{
		return createFCMemberComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public FeedBackEmailProcess createFeedBackEmailProcess(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.FEEDBACKEMAILPROCESS );
			return (FeedBackEmailProcess)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating FeedBackEmailProcess : "+e.getMessage(), 0 );
		}
	}
	
	public FeedBackEmailProcess createFeedBackEmailProcess(final Map attributeValues)
	{
		return createFeedBackEmailProcess( getSession().getSessionContext(), attributeValues );
	}
	
	public FirstCitizenCmsComponent createFirstCitizenCmsComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.FIRSTCITIZENCMSCOMPONENT );
			return (FirstCitizenCmsComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating FirstCitizenCmsComponent : "+e.getMessage(), 0 );
		}
	}
	
	public FirstCitizenCmsComponent createFirstCitizenCmsComponent(final Map attributeValues)
	{
		return createFirstCitizenCmsComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public FirstCitizenMembershipAmazon createFirstCitizenMembershipAmazon(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.FIRSTCITIZENMEMBERSHIPAMAZON );
			return (FirstCitizenMembershipAmazon)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating FirstCitizenMembershipAmazon : "+e.getMessage(), 0 );
		}
	}
	
	public FirstCitizenMembershipAmazon createFirstCitizenMembershipAmazon(final Map attributeValues)
	{
		return createFirstCitizenMembershipAmazon( getSession().getSessionContext(), attributeValues );
	}
	
	public FirstCitizenPointsComponent createFirstCitizenPointsComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.FIRSTCITIZENPOINTSCOMPONENT );
			return (FirstCitizenPointsComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating FirstCitizenPointsComponent : "+e.getMessage(), 0 );
		}
	}
	
	public FirstCitizenPointsComponent createFirstCitizenPointsComponent(final Map attributeValues)
	{
		return createFirstCitizenPointsComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public FirstCitizenPrimeSignup createFirstCitizenPrimeSignup(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.FIRSTCITIZENPRIMESIGNUP );
			return (FirstCitizenPrimeSignup)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating FirstCitizenPrimeSignup : "+e.getMessage(), 0 );
		}
	}
	
	public FirstCitizenPrimeSignup createFirstCitizenPrimeSignup(final Map attributeValues)
	{
		return createFirstCitizenPrimeSignup( getSession().getSessionContext(), attributeValues );
	}
	
	public PaymentInfo createFreeChargePaymentInfo(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.FREECHARGEPAYMENTINFO );
			return (PaymentInfo)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating FreeChargePaymentInfo : "+e.getMessage(), 0 );
		}
	}
	
	public PaymentInfo createFreeChargePaymentInfo(final Map attributeValues)
	{
		return createFreeChargePaymentInfo( getSession().getSessionContext(), attributeValues );
	}
	
	public FrequentlySearchedComponent createFrequentlySearchedComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.FREQUENTLYSEARCHEDCOMPONENT );
			return (FrequentlySearchedComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating FrequentlySearchedComponent : "+e.getMessage(), 0 );
		}
	}
	
	public FrequentlySearchedComponent createFrequentlySearchedComponent(final Map attributeValues)
	{
		return createFrequentlySearchedComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public PaymentInfo createGiftCardPaymentInfo(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.GIFTCARDPAYMENTINFO );
			return (PaymentInfo)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating GiftCardPaymentInfo : "+e.getMessage(), 0 );
		}
	}
	
	public PaymentInfo createGiftCardPaymentInfo(final Map attributeValues)
	{
		return createGiftCardPaymentInfo( getSession().getSessionContext(), attributeValues );
	}
	
	public GiftWrapComponent createGiftWrapComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.GIFTWRAPCOMPONENT );
			return (GiftWrapComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating GiftWrapComponent : "+e.getMessage(), 0 );
		}
	}
	
	public GiftWrapComponent createGiftWrapComponent(final Map attributeValues)
	{
		return createGiftWrapComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public GPCMapping createGPCMapping(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.GPCMAPPING );
			return (GPCMapping)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating GPCMapping : "+e.getMessage(), 0 );
		}
	}
	
	public GPCMapping createGPCMapping(final Map attributeValues)
	{
		return createGPCMapping( getSession().getSessionContext(), attributeValues );
	}
	
	public GstTax createGstTax(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.GSTTAX );
			return (GstTax)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating GstTax : "+e.getMessage(), 0 );
		}
	}
	
	public GstTax createGstTax(final Map attributeValues)
	{
		return createGstTax( getSession().getSessionContext(), attributeValues );
	}
	
	public HomeCouponComponent createHomeCouponComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.HOMECOUPONCOMPONENT );
			return (HomeCouponComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating HomeCouponComponent : "+e.getMessage(), 0 );
		}
	}
	
	public HomeCouponComponent createHomeCouponComponent(final Map attributeValues)
	{
		return createHomeCouponComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public InspirationAndStyleComponent createInspirationAndStyleComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.INSPIRATIONANDSTYLECOMPONENT );
			return (InspirationAndStyleComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating InspirationAndStyleComponent : "+e.getMessage(), 0 );
		}
	}
	
	public InspirationAndStyleComponent createInspirationAndStyleComponent(final Map attributeValues)
	{
		return createInspirationAndStyleComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public InstantGiftingTabListComponent createInstantGiftingTabListComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.INSTANTGIFTINGTABLISTCOMPONENT );
			return (InstantGiftingTabListComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating InstantGiftingTabListComponent : "+e.getMessage(), 0 );
		}
	}
	
	public InstantGiftingTabListComponent createInstantGiftingTabListComponent(final Map attributeValues)
	{
		return createInstantGiftingTabListComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public InStoreAndOnlineComponent createInStoreAndOnlineComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.INSTOREANDONLINECOMPONENT );
			return (InStoreAndOnlineComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating InStoreAndOnlineComponent : "+e.getMessage(), 0 );
		}
	}
	
	public InStoreAndOnlineComponent createInStoreAndOnlineComponent(final Map attributeValues)
	{
		return createInStoreAndOnlineComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public InternalLinkComponent createInternalLinkComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.INTERNALLINKCOMPONENT );
			return (InternalLinkComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating InternalLinkComponent : "+e.getMessage(), 0 );
		}
	}
	
	public InternalLinkComponent createInternalLinkComponent(final Map attributeValues)
	{
		return createInternalLinkComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public InvoiceAnalyzer createInvoiceAnalyzer(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.INVOICEANALYZER );
			return (InvoiceAnalyzer)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating InvoiceAnalyzer : "+e.getMessage(), 0 );
		}
	}
	
	public InvoiceAnalyzer createInvoiceAnalyzer(final Map attributeValues)
	{
		return createInvoiceAnalyzer( getSession().getSessionContext(), attributeValues );
	}
	
	public LatestFromCMSComponent createLatestFromCMSComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.LATESTFROMCMSCOMPONENT );
			return (LatestFromCMSComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating LatestFromCMSComponent : "+e.getMessage(), 0 );
		}
	}
	
	public LatestFromCMSComponent createLatestFromCMSComponent(final Map attributeValues)
	{
		return createLatestFromCMSComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public LatestFromSSComponent createLatestFromSSComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.LATESTFROMSSCOMPONENT );
			return (LatestFromSSComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating LatestFromSSComponent : "+e.getMessage(), 0 );
		}
	}
	
	public LatestFromSSComponent createLatestFromSSComponent(final Map attributeValues)
	{
		return createLatestFromSSComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public PaymentInfo createLoyaltyCardPaymentInfo(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.LOYALTYCARDPAYMENTINFO );
			return (PaymentInfo)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating LoyaltyCardPaymentInfo : "+e.getMessage(), 0 );
		}
	}
	
	public PaymentInfo createLoyaltyCardPaymentInfo(final Map attributeValues)
	{
		return createLoyaltyCardPaymentInfo( getSession().getSessionContext(), attributeValues );
	}
	
	public ManageOrderComponent createManageOrderComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.MANAGEORDERCOMPONENT );
			return (ManageOrderComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ManageOrderComponent : "+e.getMessage(), 0 );
		}
	}
	
	public ManageOrderComponent createManageOrderComponent(final Map attributeValues)
	{
		return createManageOrderComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public MiniAlertListComponent createMiniAlertListComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.MINIALERTLISTCOMPONENT );
			return (MiniAlertListComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating MiniAlertListComponent : "+e.getMessage(), 0 );
		}
	}
	
	public MiniAlertListComponent createMiniAlertListComponent(final Map attributeValues)
	{
		return createMiniAlertListComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public MiniWishListComponent createMiniWishListComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.MINIWISHLISTCOMPONENT );
			return (MiniWishListComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating MiniWishListComponent : "+e.getMessage(), 0 );
		}
	}
	
	public MiniWishListComponent createMiniWishListComponent(final Map attributeValues)
	{
		return createMiniWishListComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public MobileAppReleaseDetails createMobileAppReleaseDetails(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.MOBILEAPPRELEASEDETAILS );
			return (MobileAppReleaseDetails)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating MobileAppReleaseDetails : "+e.getMessage(), 0 );
		}
	}
	
	public MobileAppReleaseDetails createMobileAppReleaseDetails(final Map attributeValues)
	{
		return createMobileAppReleaseDetails( getSession().getSessionContext(), attributeValues );
	}
	
	public MobileVersionUpdateInfo createMobileVersionUpdateInfo(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.MOBILEVERSIONUPDATEINFO );
			return (MobileVersionUpdateInfo)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating MobileVersionUpdateInfo : "+e.getMessage(), 0 );
		}
	}
	
	public MobileVersionUpdateInfo createMobileVersionUpdateInfo(final Map attributeValues)
	{
		return createMobileVersionUpdateInfo( getSession().getSessionContext(), attributeValues );
	}
	
	public MSiteChildCategoriesComponent createMSiteChildCategoriesComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.MSITECHILDCATEGORIESCOMPONENT );
			return (MSiteChildCategoriesComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating MSiteChildCategoriesComponent : "+e.getMessage(), 0 );
		}
	}
	
	public MSiteChildCategoriesComponent createMSiteChildCategoriesComponent(final Map attributeValues)
	{
		return createMSiteChildCategoriesComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public AccountWalletComponent createMyAccountWalletComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.MYACCOUNTWALLETCOMPONENT );
			return (AccountWalletComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating MyAccountWalletComponent : "+e.getMessage(), 0 );
		}
	}
	
	public AccountWalletComponent createMyAccountWalletComponent(final Map attributeValues)
	{
		return createMyAccountWalletComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public NavigationBarImageComponent createNavigationBarImageComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.NAVIGATIONBARIMAGECOMPONENT );
			return (NavigationBarImageComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating NavigationBarImageComponent : "+e.getMessage(), 0 );
		}
	}
	
	public NavigationBarImageComponent createNavigationBarImageComponent(final Map attributeValues)
	{
		return createNavigationBarImageComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public NavigationBarWithImageComponent createNavigationBarWithImageComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.NAVIGATIONBARWITHIMAGECOMPONENT );
			return (NavigationBarWithImageComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating NavigationBarWithImageComponent : "+e.getMessage(), 0 );
		}
	}
	
	public NavigationBarWithImageComponent createNavigationBarWithImageComponent(final Map attributeValues)
	{
		return createNavigationBarWithImageComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public PaymentInfo createNEFTPaymentInfo(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.NEFTPAYMENTINFO );
			return (PaymentInfo)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating NEFTPaymentInfo : "+e.getMessage(), 0 );
		}
	}
	
	public PaymentInfo createNEFTPaymentInfo(final Map attributeValues)
	{
		return createNEFTPaymentInfo( getSession().getSessionContext(), attributeValues );
	}
	
	public PaymentInfo createNetBankingPaymentInfo(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.NETBANKINGPAYMENTINFO );
			return (PaymentInfo)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating NetBankingPaymentInfo : "+e.getMessage(), 0 );
		}
	}
	
	public PaymentInfo createNetBankingPaymentInfo(final Map attributeValues)
	{
		return createNetBankingPaymentInfo( getSession().getSessionContext(), attributeValues );
	}
	
	public NewArrivalsCMSComponent createNewArrivalsCMSComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.NEWARRIVALSCMSCOMPONENT );
			return (NewArrivalsCMSComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating NewArrivalsCMSComponent : "+e.getMessage(), 0 );
		}
	}
	
	public NewArrivalsCMSComponent createNewArrivalsCMSComponent(final Map attributeValues)
	{
		return createNewArrivalsCMSComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public NewArrivalsComponent createNewArrivalsComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.NEWARRIVALSCOMPONENT );
			return (NewArrivalsComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating NewArrivalsComponent : "+e.getMessage(), 0 );
		}
	}
	
	public NewArrivalsComponent createNewArrivalsComponent(final Map attributeValues)
	{
		return createNewArrivalsComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public NewInCategoryComponent createNewInCategoryComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.NEWINCATEGORYCOMPONENT );
			return (NewInCategoryComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating NewInCategoryComponent : "+e.getMessage(), 0 );
		}
	}
	
	public NewInCategoryComponent createNewInCategoryComponent(final Map attributeValues)
	{
		return createNewInCategoryComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public NewShorterLengthComponent createNewShorterLengthComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.NEWSHORTERLENGTHCOMPONENT );
			return (NewShorterLengthComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating NewShorterLengthComponent : "+e.getMessage(), 0 );
		}
	}
	
	public NewShorterLengthComponent createNewShorterLengthComponent(final Map attributeValues)
	{
		return createNewShorterLengthComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public NewsLettersProcess createNewsLettersProcess(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.NEWSLETTERSPROCESS );
			return (NewsLettersProcess)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating NewsLettersProcess : "+e.getMessage(), 0 );
		}
	}
	
	public NewsLettersProcess createNewsLettersProcess(final Map attributeValues)
	{
		return createNewsLettersProcess( getSession().getSessionContext(), attributeValues );
	}
	
	public NewsLetterSubscribeForCustomer createNewsLetterSubscribeForCustomer(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.NEWSLETTERSUBSCRIBEFORCUSTOMER );
			return (NewsLetterSubscribeForCustomer)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating NewsLetterSubscribeForCustomer : "+e.getMessage(), 0 );
		}
	}
	
	public NewsLetterSubscribeForCustomer createNewsLetterSubscribeForCustomer(final Map attributeValues)
	{
		return createNewsLetterSubscribeForCustomer( getSession().getSessionContext(), attributeValues );
	}
	
	public NotifyCustomer createNotifyCustomer(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.NOTIFYCUSTOMER );
			return (NotifyCustomer)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating NotifyCustomer : "+e.getMessage(), 0 );
		}
	}
	
	public NotifyCustomer createNotifyCustomer(final Map attributeValues)
	{
		return createNotifyCustomer( getSession().getSessionContext(), attributeValues );
	}
	
	public OfferDetailsComponent createOfferDetailsComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.OFFERDETAILSCOMPONENT );
			return (OfferDetailsComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating OfferDetailsComponent : "+e.getMessage(), 0 );
		}
	}
	
	public OfferDetailsComponent createOfferDetailsComponent(final Map attributeValues)
	{
		return createOfferDetailsComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public OfferPage createOfferPage(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.OFFERPAGE );
			return (OfferPage)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating OfferPage : "+e.getMessage(), 0 );
		}
	}
	
	public OfferPage createOfferPage(final Map attributeValues)
	{
		return createOfferPage( getSession().getSessionContext(), attributeValues );
	}
	
	public OffersProcess createOffersProcess(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.OFFERSPROCESS );
			return (OffersProcess)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating OffersProcess : "+e.getMessage(), 0 );
		}
	}
	
	public OffersProcess createOffersProcess(final Map attributeValues)
	{
		return createOffersProcess( getSession().getSessionContext(), attributeValues );
	}
	
	public OfferSuggestionComponent createOfferSuggestionComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.OFFERSUGGESTIONCOMPONENT );
			return (OfferSuggestionComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating OfferSuggestionComponent : "+e.getMessage(), 0 );
		}
	}
	
	public OfferSuggestionComponent createOfferSuggestionComponent(final Map attributeValues)
	{
		return createOfferSuggestionComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public OffersZoneCMSComponent createOffersZoneCMSComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.OFFERSZONECMSCOMPONENT );
			return (OffersZoneCMSComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating OffersZoneCMSComponent : "+e.getMessage(), 0 );
		}
	}
	
	public OffersZoneCMSComponent createOffersZoneCMSComponent(final Map attributeValues)
	{
		return createOffersZoneCMSComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public OffersZoneComponent createOffersZoneComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.OFFERSZONECOMPONENT );
			return (OffersZoneComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating OffersZoneComponent : "+e.getMessage(), 0 );
		}
	}
	
	public OffersZoneComponent createOffersZoneComponent(final Map attributeValues)
	{
		return createOffersZoneComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public PaymentInfo createOnlinePaymentInfo(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.ONLINEPAYMENTINFO );
			return (PaymentInfo)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating OnlinePaymentInfo : "+e.getMessage(), 0 );
		}
	}
	
	public PaymentInfo createOnlinePaymentInfo(final Map attributeValues)
	{
		return createOnlinePaymentInfo( getSession().getSessionContext(), attributeValues );
	}
	
	public OrderCompletionFeedbackStoreFrontProcess createOrderCompletionFeedbackStoreFrontProcess(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.ORDERCOMPLETIONFEEDBACKSTOREFRONTPROCESS );
			return (OrderCompletionFeedbackStoreFrontProcess)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating OrderCompletionFeedbackStoreFrontProcess : "+e.getMessage(), 0 );
		}
	}
	
	public OrderCompletionFeedbackStoreFrontProcess createOrderCompletionFeedbackStoreFrontProcess(final Map attributeValues)
	{
		return createOrderCompletionFeedbackStoreFrontProcess( getSession().getSessionContext(), attributeValues );
	}
	
	public OrderDetailsComponent createOrderDetailsComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.ORDERDETAILSCOMPONENT );
			return (OrderDetailsComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating OrderDetailsComponent : "+e.getMessage(), 0 );
		}
	}
	
	public OrderDetailsComponent createOrderDetailsComponent(final Map attributeValues)
	{
		return createOrderDetailsComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public OrderDropTask createOrderDropTask(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.ORDERDROPTASK );
			return (OrderDropTask)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating OrderDropTask : "+e.getMessage(), 0 );
		}
	}
	
	public OrderDropTask createOrderDropTask(final Map attributeValues)
	{
		return createOrderDropTask( getSession().getSessionContext(), attributeValues );
	}
	
	public OrderSummeryComponent createOrderSummeryComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.ORDERSUMMERYCOMPONENT );
			return (OrderSummeryComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating OrderSummeryComponent : "+e.getMessage(), 0 );
		}
	}
	
	public OrderSummeryComponent createOrderSummeryComponent(final Map attributeValues)
	{
		return createOrderSummeryComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public OrderValuePromotionVoucher createOrderValuePromotionVoucher(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.ORDERVALUEPROMOTIONVOUCHER );
			return (OrderValuePromotionVoucher)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating OrderValuePromotionVoucher : "+e.getMessage(), 0 );
		}
	}
	
	public OrderValuePromotionVoucher createOrderValuePromotionVoucher(final Map attributeValues)
	{
		return createOrderValuePromotionVoucher( getSession().getSessionContext(), attributeValues );
	}
	
	public OurBrandComponent createOurBrandComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.OURBRANDCOMPONENT );
			return (OurBrandComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating OurBrandComponent : "+e.getMessage(), 0 );
		}
	}
	
	public OurBrandComponent createOurBrandComponent(final Map attributeValues)
	{
		return createOurBrandComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public OurBrandDescriptionComponent createOurBrandDescriptionComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.OURBRANDDESCRIPTIONCOMPONENT );
			return (OurBrandDescriptionComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating OurBrandDescriptionComponent : "+e.getMessage(), 0 );
		}
	}
	
	public OurBrandDescriptionComponent createOurBrandDescriptionComponent(final Map attributeValues)
	{
		return createOurBrandDescriptionComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public OurFavoritesBrandsComponent createOurFavoritesBrandsComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.OURFAVORITESBRANDSCOMPONENT );
			return (OurFavoritesBrandsComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating OurFavoritesBrandsComponent : "+e.getMessage(), 0 );
		}
	}
	
	public OurFavoritesBrandsComponent createOurFavoritesBrandsComponent(final Map attributeValues)
	{
		return createOurFavoritesBrandsComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public OurFavoritesOfferComponent createOurFavoritesOfferComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.OURFAVORITESOFFERCOMPONENT );
			return (OurFavoritesOfferComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating OurFavoritesOfferComponent : "+e.getMessage(), 0 );
		}
	}
	
	public OurFavoritesOfferComponent createOurFavoritesOfferComponent(final Map attributeValues)
	{
		return createOurFavoritesOfferComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public OutfitFooterComponent createOutfitFooterComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.OUTFITFOOTERCOMPONENT );
			return (OutfitFooterComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating OutfitFooterComponent : "+e.getMessage(), 0 );
		}
	}
	
	public OutfitFooterComponent createOutfitFooterComponent(final Map attributeValues)
	{
		return createOutfitFooterComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public OutfitsComponent createOutfitsComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.OUTFITSCOMPONENT );
			return (OutfitsComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating OutfitsComponent : "+e.getMessage(), 0 );
		}
	}
	
	public OutfitsComponent createOutfitsComponent(final Map attributeValues)
	{
		return createOutfitsComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public OutsideStoreBenefitsComponent createOutsideStoreBenefitsComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.OUTSIDESTOREBENEFITSCOMPONENT );
			return (OutsideStoreBenefitsComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating OutsideStoreBenefitsComponent : "+e.getMessage(), 0 );
		}
	}
	
	public OutsideStoreBenefitsComponent createOutsideStoreBenefitsComponent(final Map attributeValues)
	{
		return createOutsideStoreBenefitsComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public PaginationComponent createPaginationComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PAGINATIONCOMPONENT );
			return (PaginationComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PaginationComponent : "+e.getMessage(), 0 );
		}
	}
	
	public PaginationComponent createPaginationComponent(final Map attributeValues)
	{
		return createPaginationComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public ParagraphComponent createParagraphComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PARAGRAPHCOMPONENT );
			return (ParagraphComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ParagraphComponent : "+e.getMessage(), 0 );
		}
	}
	
	public ParagraphComponent createParagraphComponent(final Map attributeValues)
	{
		return createParagraphComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public ParagraphLinkComponent createParagraphLinkComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PARAGRAPHLINKCOMPONENT );
			return (ParagraphLinkComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ParagraphLinkComponent : "+e.getMessage(), 0 );
		}
	}
	
	public ParagraphLinkComponent createParagraphLinkComponent(final Map attributeValues)
	{
		return createParagraphLinkComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public PaySecurilyByComponent createPaySecurilyByComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PAYSECURILYBYCOMPONENT );
			return (PaySecurilyByComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PaySecurilyByComponent : "+e.getMessage(), 0 );
		}
	}
	
	public PaySecurilyByComponent createPaySecurilyByComponent(final Map attributeValues)
	{
		return createPaySecurilyByComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public PaytmOrderDropTask createPaytmOrderDropTask(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PAYTMORDERDROPTASK );
			return (PaytmOrderDropTask)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PaytmOrderDropTask : "+e.getMessage(), 0 );
		}
	}
	
	public PaytmOrderDropTask createPaytmOrderDropTask(final Map attributeValues)
	{
		return createPaytmOrderDropTask( getSession().getSessionContext(), attributeValues );
	}
	
	public PayuOrderDropTask createPayuOrderDropTask(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PAYUORDERDROPTASK );
			return (PayuOrderDropTask)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PayuOrderDropTask : "+e.getMessage(), 0 );
		}
	}
	
	public PayuOrderDropTask createPayuOrderDropTask(final Map attributeValues)
	{
		return createPayuOrderDropTask( getSession().getSessionContext(), attributeValues );
	}
	
	public PickFromStoreBuffer createPickFromStoreBuffer(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PICKFROMSTOREBUFFER );
			return (PickFromStoreBuffer)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PickFromStoreBuffer : "+e.getMessage(), 0 );
		}
	}
	
	public PickFromStoreBuffer createPickFromStoreBuffer(final Map attributeValues)
	{
		return createPickFromStoreBuffer( getSession().getSessionContext(), attributeValues );
	}
	
	public PincodePickupStoreMapping createPincodePickupStoreMapping(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PINCODEPICKUPSTOREMAPPING );
			return (PincodePickupStoreMapping)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PincodePickupStoreMapping : "+e.getMessage(), 0 );
		}
	}
	
	public PincodePickupStoreMapping createPincodePickupStoreMapping(final Map attributeValues)
	{
		return createPincodePickupStoreMapping( getSession().getSessionContext(), attributeValues );
	}
	
	public PincodesDeliverList createPincodesDeliverList(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PINCODESDELIVERLIST );
			return (PincodesDeliverList)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PincodesDeliverList : "+e.getMessage(), 0 );
		}
	}
	
	public PincodesDeliverList createPincodesDeliverList(final Map attributeValues)
	{
		return createPincodesDeliverList( getSession().getSessionContext(), attributeValues );
	}
	
	public PincodesList createPincodesList(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PINCODESLIST );
			return (PincodesList)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PincodesList : "+e.getMessage(), 0 );
		}
	}
	
	public PincodesList createPincodesList(final Map attributeValues)
	{
		return createPincodesList( getSession().getSessionContext(), attributeValues );
	}
	
	public ProductAddToCartComponent1 createProductAddToCartComponent1(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PRODUCTADDTOCARTCOMPONENT1 );
			return (ProductAddToCartComponent1)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ProductAddToCartComponent1 : "+e.getMessage(), 0 );
		}
	}
	
	public ProductAddToCartComponent1 createProductAddToCartComponent1(final Map attributeValues)
	{
		return createProductAddToCartComponent1( getSession().getSessionContext(), attributeValues );
	}
	
	public ProductCarouselListingComponent createProductCarouselListingComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PRODUCTCAROUSELLISTINGCOMPONENT );
			return (ProductCarouselListingComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ProductCarouselListingComponent : "+e.getMessage(), 0 );
		}
	}
	
	public ProductCarouselListingComponent createProductCarouselListingComponent(final Map attributeValues)
	{
		return createProductCarouselListingComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public ProductclassificationComponent createProductclassificationComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PRODUCTCLASSIFICATIONCOMPONENT );
			return (ProductclassificationComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ProductclassificationComponent : "+e.getMessage(), 0 );
		}
	}
	
	public ProductclassificationComponent createProductclassificationComponent(final Map attributeValues)
	{
		return createProductclassificationComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public ProductDetailFCCComponent createProductDetailFCCComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PRODUCTDETAILFCCCOMPONENT );
			return (ProductDetailFCCComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ProductDetailFCCComponent : "+e.getMessage(), 0 );
		}
	}
	
	public ProductDetailFCCComponent createProductDetailFCCComponent(final Map attributeValues)
	{
		return createProductDetailFCCComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public ProductRecommendationCMSComponent createProductRecommendationCMSComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PRODUCTRECOMMENDATIONCMSCOMPONENT );
			return (ProductRecommendationCMSComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ProductRecommendationCMSComponent : "+e.getMessage(), 0 );
		}
	}
	
	public ProductRecommendationCMSComponent createProductRecommendationCMSComponent(final Map attributeValues)
	{
		return createProductRecommendationCMSComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public ProductRecommendationComponent createProductRecommendationComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PRODUCTRECOMMENDATIONCOMPONENT );
			return (ProductRecommendationComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ProductRecommendationComponent : "+e.getMessage(), 0 );
		}
	}
	
	public ProductRecommendationComponent createProductRecommendationComponent(final Map attributeValues)
	{
		return createProductRecommendationComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public ProductSkuList createProductSkuList(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PRODUCTSKULIST );
			return (ProductSkuList)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ProductSkuList : "+e.getMessage(), 0 );
		}
	}
	
	public ProductSkuList createProductSkuList(final Map attributeValues)
	{
		return createProductSkuList( getSession().getSessionContext(), attributeValues );
	}
	
	public ProductSpecificCategoryComponent createProductSpecificCategoryComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PRODUCTSPECIFICCATEGORYCOMPONENT );
			return (ProductSpecificCategoryComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ProductSpecificCategoryComponent : "+e.getMessage(), 0 );
		}
	}
	
	public ProductSpecificCategoryComponent createProductSpecificCategoryComponent(final Map attributeValues)
	{
		return createProductSpecificCategoryComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public ProductUploadAutoApprovalStoreFrontProcess createProductUploadAutoApprovalStoreFrontProcess(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PRODUCTUPLOADAUTOAPPROVALSTOREFRONTPROCESS );
			return (ProductUploadAutoApprovalStoreFrontProcess)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ProductUploadAutoApprovalStoreFrontProcess : "+e.getMessage(), 0 );
		}
	}
	
	public ProductUploadAutoApprovalStoreFrontProcess createProductUploadAutoApprovalStoreFrontProcess(final Map attributeValues)
	{
		return createProductUploadAutoApprovalStoreFrontProcess( getSession().getSessionContext(), attributeValues );
	}
	
	public ProductVariantSelectorComponent1 createProductVariantSelectorComponent1(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PRODUCTVARIANTSELECTORCOMPONENT1 );
			return (ProductVariantSelectorComponent1)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ProductVariantSelectorComponent1 : "+e.getMessage(), 0 );
		}
	}
	
	public ProductVariantSelectorComponent1 createProductVariantSelectorComponent1(final Map attributeValues)
	{
		return createProductVariantSelectorComponent1( getSession().getSessionContext(), attributeValues );
	}
	
	public ProfilePictureComponent createProfilePictureComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PROFILEPICTURECOMPONENT );
			return (ProfilePictureComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ProfilePictureComponent : "+e.getMessage(), 0 );
		}
	}
	
	public ProfilePictureComponent createProfilePictureComponent(final Map attributeValues)
	{
		return createProfilePictureComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public PromotionalMessageInfoComponent createPromotionalMessageInfoComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PROMOTIONALMESSAGEINFOCOMPONENT );
			return (PromotionalMessageInfoComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PromotionalMessageInfoComponent : "+e.getMessage(), 0 );
		}
	}
	
	public PromotionalMessageInfoComponent createPromotionalMessageInfoComponent(final Map attributeValues)
	{
		return createPromotionalMessageInfoComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public PromotionBannerComponent createPromotionBannerComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PROMOTIONBANNERCOMPONENT );
			return (PromotionBannerComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PromotionBannerComponent : "+e.getMessage(), 0 );
		}
	}
	
	public PromotionBannerComponent createPromotionBannerComponent(final Map attributeValues)
	{
		return createPromotionBannerComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public PromotionBrandsCMSComponent createPromotionBrandsCMSComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PROMOTIONBRANDSCMSCOMPONENT );
			return (PromotionBrandsCMSComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PromotionBrandsCMSComponent : "+e.getMessage(), 0 );
		}
	}
	
	public PromotionBrandsCMSComponent createPromotionBrandsCMSComponent(final Map attributeValues)
	{
		return createPromotionBrandsCMSComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public PromotionBrandsComponent createPromotionBrandsComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PROMOTIONBRANDSCOMPONENT );
			return (PromotionBrandsComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PromotionBrandsComponent : "+e.getMessage(), 0 );
		}
	}
	
	public PromotionBrandsComponent createPromotionBrandsComponent(final Map attributeValues)
	{
		return createPromotionBrandsComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public PromotionDealComponent createPromotionDealComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PROMOTIONDEALCOMPONENT );
			return (PromotionDealComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PromotionDealComponent : "+e.getMessage(), 0 );
		}
	}
	
	public PromotionDealComponent createPromotionDealComponent(final Map attributeValues)
	{
		return createPromotionDealComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public PromotionOfferComponent createPromotionOfferComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PROMOTIONOFFERCOMPONENT );
			return (PromotionOfferComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PromotionOfferComponent : "+e.getMessage(), 0 );
		}
	}
	
	public PromotionOfferComponent createPromotionOfferComponent(final Map attributeValues)
	{
		return createPromotionOfferComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public PromotionPercentageDiscountRow createPromotionPercentageDiscountRow(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PROMOTIONPERCENTAGEDISCOUNTROW );
			return (PromotionPercentageDiscountRow)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PromotionPercentageDiscountRow : "+e.getMessage(), 0 );
		}
	}
	
	public PromotionPercentageDiscountRow createPromotionPercentageDiscountRow(final Map attributeValues)
	{
		return createPromotionPercentageDiscountRow( getSession().getSessionContext(), attributeValues );
	}
	
	public PromotionQuantityAndDiscountRow createPromotionQuantityAndDiscountRow(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PROMOTIONQUANTITYANDDISCOUNTROW );
			return (PromotionQuantityAndDiscountRow)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PromotionQuantityAndDiscountRow : "+e.getMessage(), 0 );
		}
	}
	
	public PromotionQuantityAndDiscountRow createPromotionQuantityAndDiscountRow(final Map attributeValues)
	{
		return createPromotionQuantityAndDiscountRow( getSession().getSessionContext(), attributeValues );
	}
	
	public PromotionsComponent createPromotionsComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PROMOTIONSCOMPONENT );
			return (PromotionsComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PromotionsComponent : "+e.getMessage(), 0 );
		}
	}
	
	public PromotionsComponent createPromotionsComponent(final Map attributeValues)
	{
		return createPromotionsComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public PromotionsDealsParentComponent createPromotionsDealsParentComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PROMOTIONSDEALSPARENTCOMPONENT );
			return (PromotionsDealsParentComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PromotionsDealsParentComponent : "+e.getMessage(), 0 );
		}
	}
	
	public PromotionsDealsParentComponent createPromotionsDealsParentComponent(final Map attributeValues)
	{
		return createPromotionsDealsParentComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public PromotionsHeaderBannerComponent createPromotionsHeaderBannerComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PROMOTIONSHEADERBANNERCOMPONENT );
			return (PromotionsHeaderBannerComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PromotionsHeaderBannerComponent : "+e.getMessage(), 0 );
		}
	}
	
	public PromotionsHeaderBannerComponent createPromotionsHeaderBannerComponent(final Map attributeValues)
	{
		return createPromotionsHeaderBannerComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public PromotionsHeaderCarouselComponent createPromotionsHeaderCarouselComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PROMOTIONSHEADERCAROUSELCOMPONENT );
			return (PromotionsHeaderCarouselComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PromotionsHeaderCarouselComponent : "+e.getMessage(), 0 );
		}
	}
	
	public PromotionsHeaderCarouselComponent createPromotionsHeaderCarouselComponent(final Map attributeValues)
	{
		return createPromotionsHeaderCarouselComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public PromotionsProductsBannerComponent createPromotionsProductsBannerComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PROMOTIONSPRODUCTSBANNERCOMPONENT );
			return (PromotionsProductsBannerComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PromotionsProductsBannerComponent : "+e.getMessage(), 0 );
		}
	}
	
	public PromotionsProductsBannerComponent createPromotionsProductsBannerComponent(final Map attributeValues)
	{
		return createPromotionsProductsBannerComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public PromotionsProductsCarouselComponent createPromotionsProductsCarouselComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PROMOTIONSPRODUCTSCAROUSELCOMPONENT );
			return (PromotionsProductsCarouselComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PromotionsProductsCarouselComponent : "+e.getMessage(), 0 );
		}
	}
	
	public PromotionsProductsCarouselComponent createPromotionsProductsCarouselComponent(final Map attributeValues)
	{
		return createPromotionsProductsCarouselComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public PromotionsTabParentComponent createPromotionsTabParentComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PROMOTIONSTABPARENTCOMPONENT );
			return (PromotionsTabParentComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PromotionsTabParentComponent : "+e.getMessage(), 0 );
		}
	}
	
	public PromotionsTabParentComponent createPromotionsTabParentComponent(final Map attributeValues)
	{
		return createPromotionsTabParentComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public PromotionValueAndDiscountRow createPromotionValueAndDiscountRow(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PROMOTIONVALUEANDDISCOUNTROW );
			return (PromotionValueAndDiscountRow)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PromotionValueAndDiscountRow : "+e.getMessage(), 0 );
		}
	}
	
	public PromotionValueAndDiscountRow createPromotionValueAndDiscountRow(final Map attributeValues)
	{
		return createPromotionValueAndDiscountRow( getSession().getSessionContext(), attributeValues );
	}
	
	public PSAppointment createPSAppointment(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PSAPPOINTMENT );
			return (PSAppointment)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PSAppointment : "+e.getMessage(), 0 );
		}
	}
	
	public PSAppointment createPSAppointment(final Map attributeValues)
	{
		return createPSAppointment( getSession().getSessionContext(), attributeValues );
	}
	
	public PSAppointmentFeedback createPSAppointmentFeedback(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PSAPPOINTMENTFEEDBACK );
			return (PSAppointmentFeedback)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PSAppointmentFeedback : "+e.getMessage(), 0 );
		}
	}
	
	public PSAppointmentFeedback createPSAppointmentFeedback(final Map attributeValues)
	{
		return createPSAppointmentFeedback( getSession().getSessionContext(), attributeValues );
	}
	
	public PSBookingType createPSBookingType(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PSBOOKINGTYPE );
			return (PSBookingType)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PSBookingType : "+e.getMessage(), 0 );
		}
	}
	
	public PSBookingType createPSBookingType(final Map attributeValues)
	{
		return createPSBookingType( getSession().getSessionContext(), attributeValues );
	}
	
	public PSPersonalShopper createPSPersonalShopper(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PSPERSONALSHOPPER );
			return (PSPersonalShopper)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PSPersonalShopper : "+e.getMessage(), 0 );
		}
	}
	
	public PSPersonalShopper createPSPersonalShopper(final Map attributeValues)
	{
		return createPSPersonalShopper( getSession().getSessionContext(), attributeValues );
	}
	
	public PSServices createPSServices(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PSSERVICES );
			return (PSServices)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PSServices : "+e.getMessage(), 0 );
		}
	}
	
	public PSServices createPSServices(final Map attributeValues)
	{
		return createPSServices( getSession().getSessionContext(), attributeValues );
	}
	
	public PSStoreMaster createPSStoreMaster(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.PSSTOREMASTER );
			return (PSStoreMaster)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating PSStoreMaster : "+e.getMessage(), 0 );
		}
	}
	
	public PSStoreMaster createPSStoreMaster(final Map attributeValues)
	{
		return createPSStoreMaster( getSession().getSessionContext(), attributeValues );
	}
	
	public RecommendedProductsComponent createRecommendedProductsComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.RECOMMENDEDPRODUCTSCOMPONENT );
			return (RecommendedProductsComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating RecommendedProductsComponent : "+e.getMessage(), 0 );
		}
	}
	
	public RecommendedProductsComponent createRecommendedProductsComponent(final Map attributeValues)
	{
		return createRecommendedProductsComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public ResponsiveMultiClickBannerComponent createResponsiveMultiClickBannerComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.RESPONSIVEMULTICLICKBANNERCOMPONENT );
			return (ResponsiveMultiClickBannerComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ResponsiveMultiClickBannerComponent : "+e.getMessage(), 0 );
		}
	}
	
	public ResponsiveMultiClickBannerComponent createResponsiveMultiClickBannerComponent(final Map attributeValues)
	{
		return createResponsiveMultiClickBannerComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public ResponsiveShopByCategoryComponent createResponsiveShopByCategoryComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.RESPONSIVESHOPBYCATEGORYCOMPONENT );
			return (ResponsiveShopByCategoryComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ResponsiveShopByCategoryComponent : "+e.getMessage(), 0 );
		}
	}
	
	public ResponsiveShopByCategoryComponent createResponsiveShopByCategoryComponent(final Map attributeValues)
	{
		return createResponsiveShopByCategoryComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public ReturnExchangeEntries createReturnExchangeEntries(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.RETURNEXCHANGEENTRIES );
			return (ReturnExchangeEntries)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ReturnExchangeEntries : "+e.getMessage(), 0 );
		}
	}
	
	public ReturnExchangeEntries createReturnExchangeEntries(final Map attributeValues)
	{
		return createReturnExchangeEntries( getSession().getSessionContext(), attributeValues );
	}
	
	public ReturnRequestBankDetails createReturnRequestBankDetails(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.RETURNREQUESTBANKDETAILS );
			return (ReturnRequestBankDetails)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ReturnRequestBankDetails : "+e.getMessage(), 0 );
		}
	}
	
	public ReturnRequestBankDetails createReturnRequestBankDetails(final Map attributeValues)
	{
		return createReturnRequestBankDetails( getSession().getSessionContext(), attributeValues );
	}
	
	public SearchBrandsComponent createSearchBrandsComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SEARCHBRANDSCOMPONENT );
			return (SearchBrandsComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SearchBrandsComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SearchBrandsComponent createSearchBrandsComponent(final Map attributeValues)
	{
		return createSearchBrandsComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SearchPaginationComponent createSearchPaginationComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SEARCHPAGINATIONCOMPONENT );
			return (SearchPaginationComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SearchPaginationComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SearchPaginationComponent createSearchPaginationComponent(final Map attributeValues)
	{
		return createSearchPaginationComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public Season createSeason(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SEASON );
			return (Season)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating Season : "+e.getMessage(), 0 );
		}
	}
	
	public Season createSeason(final Map attributeValues)
	{
		return createSeason( getSession().getSessionContext(), attributeValues );
	}
	
	public SeasonGroup createSeasonGroup(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SEASONGROUP );
			return (SeasonGroup)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SeasonGroup : "+e.getMessage(), 0 );
		}
	}
	
	public SeasonGroup createSeasonGroup(final Map attributeValues)
	{
		return createSeasonGroup( getSession().getSessionContext(), attributeValues );
	}
	
	public ServiceLinksComponent createServiceLinksComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SERVICELINKSCOMPONENT );
			return (ServiceLinksComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ServiceLinksComponent : "+e.getMessage(), 0 );
		}
	}
	
	public ServiceLinksComponent createServiceLinksComponent(final Map attributeValues)
	{
		return createServiceLinksComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public ShopByCategoryComponent createShopByCategoryComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SHOPBYCATEGORYCOMPONENT );
			return (ShopByCategoryComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ShopByCategoryComponent : "+e.getMessage(), 0 );
		}
	}
	
	public ShopByCategoryComponent createShopByCategoryComponent(final Map attributeValues)
	{
		return createShopByCategoryComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public ShopByComponent createShopByComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SHOPBYCOMPONENT );
			return (ShopByComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ShopByComponent : "+e.getMessage(), 0 );
		}
	}
	
	public ShopByComponent createShopByComponent(final Map attributeValues)
	{
		return createShopByComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public ShopByTrendComponent createShopByTrendComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SHOPBYTRENDCOMPONENT );
			return (ShopByTrendComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating ShopByTrendComponent : "+e.getMessage(), 0 );
		}
	}
	
	public ShopByTrendComponent createShopByTrendComponent(final Map attributeValues)
	{
		return createShopByTrendComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SizeGuideMapping createSizeGuideMapping(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SIZEGUIDEMAPPING );
			return (SizeGuideMapping)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SizeGuideMapping : "+e.getMessage(), 0 );
		}
	}
	
	public SizeGuideMapping createSizeGuideMapping(final Map attributeValues)
	{
		return createSizeGuideMapping( getSession().getSessionContext(), attributeValues );
	}
	
	public SizeMapping createSizeMapping(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SIZEMAPPING );
			return (SizeMapping)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SizeMapping : "+e.getMessage(), 0 );
		}
	}
	
	public SizeMapping createSizeMapping(final Map attributeValues)
	{
		return createSizeMapping( getSession().getSessionContext(), attributeValues );
	}
	
	public SlimBannerCarouselComponent createSlimBannerCarouselComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SLIMBANNERCAROUSELCOMPONENT );
			return (SlimBannerCarouselComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SlimBannerCarouselComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SlimBannerCarouselComponent createSlimBannerCarouselComponent(final Map attributeValues)
	{
		return createSlimBannerCarouselComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SocialHubComponent createSocialHubComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SOCIALHUBCOMPONENT );
			return (SocialHubComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SocialHubComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SocialHubComponent createSocialHubComponent(final Map attributeValues)
	{
		return createSocialHubComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public GenericItem createSSCreditsPaymentBreakup(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSCREDITSPAYMENTBREAKUP );
			return (GenericItem)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSCreditsPaymentBreakup : "+e.getMessage(), 0 );
		}
	}
	
	public GenericItem createSSCreditsPaymentBreakup(final Map attributeValues)
	{
		return createSSCreditsPaymentBreakup( getSession().getSessionContext(), attributeValues );
	}
	
	public PaymentInfo createSSCreditsPaymentInfo(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSCREDITSPAYMENTINFO );
			return (PaymentInfo)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSCreditsPaymentInfo : "+e.getMessage(), 0 );
		}
	}
	
	public PaymentInfo createSSCreditsPaymentInfo(final Map attributeValues)
	{
		return createSSCreditsPaymentInfo( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLBannerCarouselComponent createSSLBannerCarouselComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLBANNERCAROUSELCOMPONENT );
			return (SSLBannerCarouselComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLBannerCarouselComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLBannerCarouselComponent createSSLBannerCarouselComponent(final Map attributeValues)
	{
		return createSSLBannerCarouselComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLBannerWidgetComponent createSSLBannerWidgetComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLBANNERWIDGETCOMPONENT );
			return (SSLBannerWidgetComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLBannerWidgetComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLBannerWidgetComponent createSSLBannerWidgetComponent(final Map attributeValues)
	{
		return createSSLBannerWidgetComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLBannerWidgetGridComponent createSSLBannerWidgetGridComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLBANNERWIDGETGRIDCOMPONENT );
			return (SSLBannerWidgetGridComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLBannerWidgetGridComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLBannerWidgetGridComponent createSSLBannerWidgetGridComponent(final Map attributeValues)
	{
		return createSSLBannerWidgetGridComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLBannerWidgetWithOptionsComponent createSSLBannerWidgetWithOptionsComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLBANNERWIDGETWITHOPTIONSCOMPONENT );
			return (SSLBannerWidgetWithOptionsComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLBannerWidgetWithOptionsComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLBannerWidgetWithOptionsComponent createSSLBannerWidgetWithOptionsComponent(final Map attributeValues)
	{
		return createSSLBannerWidgetWithOptionsComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLBestSellerProductsInL3CategoryCronjob createSSLBestSellerProductsInL3CategoryCronjob(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLBESTSELLERPRODUCTSINL3CATEGORYCRONJOB );
			return (SSLBestSellerProductsInL3CategoryCronjob)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLBestSellerProductsInL3CategoryCronjob : "+e.getMessage(), 0 );
		}
	}
	
	public SSLBestSellerProductsInL3CategoryCronjob createSSLBestSellerProductsInL3CategoryCronjob(final Map attributeValues)
	{
		return createSSLBestSellerProductsInL3CategoryCronjob( getSession().getSessionContext(), attributeValues );
	}
	
	public SslBinRestriction createSslBinRestriction(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLBINRESTRICTION );
			return (SslBinRestriction)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslBinRestriction : "+e.getMessage(), 0 );
		}
	}
	
	public SslBinRestriction createSslBinRestriction(final Map attributeValues)
	{
		return createSslBinRestriction( getSession().getSessionContext(), attributeValues );
	}
	
	public SslBookOverPhoneComponent createSslBookOverPhoneComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLBOOKOVERPHONECOMPONENT );
			return (SslBookOverPhoneComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslBookOverPhoneComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslBookOverPhoneComponent createSslBookOverPhoneComponent(final Map attributeValues)
	{
		return createSslBookOverPhoneComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLBrandBannerComponent createSSLBrandBannerComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLBRANDBANNERCOMPONENT );
			return (SSLBrandBannerComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLBrandBannerComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLBrandBannerComponent createSSLBrandBannerComponent(final Map attributeValues)
	{
		return createSSLBrandBannerComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLBrandBannerTitleComponent createSSLBrandBannerTitleComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLBRANDBANNERTITLECOMPONENT );
			return (SSLBrandBannerTitleComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLBrandBannerTitleComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLBrandBannerTitleComponent createSSLBrandBannerTitleComponent(final Map attributeValues)
	{
		return createSSLBrandBannerTitleComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLBrandBannerTitleComponentCollection createSSLBrandBannerTitleComponentCollection(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLBRANDBANNERTITLECOMPONENTCOLLECTION );
			return (SSLBrandBannerTitleComponentCollection)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLBrandBannerTitleComponentCollection : "+e.getMessage(), 0 );
		}
	}
	
	public SSLBrandBannerTitleComponentCollection createSSLBrandBannerTitleComponentCollection(final Map attributeValues)
	{
		return createSSLBrandBannerTitleComponentCollection( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLBrandButtonBannerComponent createSSLBrandButtonBannerComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLBRANDBUTTONBANNERCOMPONENT );
			return (SSLBrandButtonBannerComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLBrandButtonBannerComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLBrandButtonBannerComponent createSSLBrandButtonBannerComponent(final Map attributeValues)
	{
		return createSSLBrandButtonBannerComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLBrandContentImageComponent createSSLBrandContentImageComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLBRANDCONTENTIMAGECOMPONENT );
			return (SSLBrandContentImageComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLBrandContentImageComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLBrandContentImageComponent createSSLBrandContentImageComponent(final Map attributeValues)
	{
		return createSSLBrandContentImageComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLBrandCustomBannerComponent createSSLBrandCustomBannerComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLBRANDCUSTOMBANNERCOMPONENT );
			return (SSLBrandCustomBannerComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLBrandCustomBannerComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLBrandCustomBannerComponent createSSLBrandCustomBannerComponent(final Map attributeValues)
	{
		return createSSLBrandCustomBannerComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLBrandLogoComponent createSSLBrandLogoComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLBRANDLOGOCOMPONENT );
			return (SSLBrandLogoComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLBrandLogoComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLBrandLogoComponent createSSLBrandLogoComponent(final Map attributeValues)
	{
		return createSSLBrandLogoComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLBrandNavigationCollectionComponent createSSLBrandNavigationCollectionComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLBRANDNAVIGATIONCOLLECTIONCOMPONENT );
			return (SSLBrandNavigationCollectionComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLBrandNavigationCollectionComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLBrandNavigationCollectionComponent createSSLBrandNavigationCollectionComponent(final Map attributeValues)
	{
		return createSSLBrandNavigationCollectionComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLBrandNavigationComponent createSSLBrandNavigationComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLBRANDNAVIGATIONCOMPONENT );
			return (SSLBrandNavigationComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLBrandNavigationComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLBrandNavigationComponent createSSLBrandNavigationComponent(final Map attributeValues)
	{
		return createSSLBrandNavigationComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLBrandProductCarouselComponent createSSLBrandProductCarouselComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLBRANDPRODUCTCAROUSELCOMPONENT );
			return (SSLBrandProductCarouselComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLBrandProductCarouselComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLBrandProductCarouselComponent createSSLBrandProductCarouselComponent(final Map attributeValues)
	{
		return createSSLBrandProductCarouselComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLBrandThreeStepCarouselComponent createSSLBrandThreeStepCarouselComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLBRANDTHREESTEPCAROUSELCOMPONENT );
			return (SSLBrandThreeStepCarouselComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLBrandThreeStepCarouselComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLBrandThreeStepCarouselComponent createSSLBrandThreeStepCarouselComponent(final Map attributeValues)
	{
		return createSSLBrandThreeStepCarouselComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLBrandVideoComponent createSSLBrandVideoComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLBRANDVIDEOCOMPONENT );
			return (SSLBrandVideoComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLBrandVideoComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLBrandVideoComponent createSSLBrandVideoComponent(final Map attributeValues)
	{
		return createSSLBrandVideoComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslBundleProduct createSslBundleProduct(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLBUNDLEPRODUCT );
			return (SslBundleProduct)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslBundleProduct : "+e.getMessage(), 0 );
		}
	}
	
	public SslBundleProduct createSslBundleProduct(final Map attributeValues)
	{
		return createSslBundleProduct( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLButtonWidgetComponent createSSLButtonWidgetComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLBUTTONWIDGETCOMPONENT );
			return (SSLButtonWidgetComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLButtonWidgetComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLButtonWidgetComponent createSSLButtonWidgetComponent(final Map attributeValues)
	{
		return createSSLButtonWidgetComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslCategoryBestBrandsComponent createSslCategoryBestBrandsComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLCATEGORYBESTBRANDSCOMPONENT );
			return (SslCategoryBestBrandsComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslCategoryBestBrandsComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslCategoryBestBrandsComponent createSslCategoryBestBrandsComponent(final Map attributeValues)
	{
		return createSslCategoryBestBrandsComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslCategoryCollectionComponent createSslCategoryCollectionComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLCATEGORYCOLLECTIONCOMPONENT );
			return (SslCategoryCollectionComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslCategoryCollectionComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslCategoryCollectionComponent createSslCategoryCollectionComponent(final Map attributeValues)
	{
		return createSslCategoryCollectionComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLCategoryWidgetComponent createSSLCategoryWidgetComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLCATEGORYWIDGETCOMPONENT );
			return (SSLCategoryWidgetComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLCategoryWidgetComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLCategoryWidgetComponent createSSLCategoryWidgetComponent(final Map attributeValues)
	{
		return createSSLCategoryWidgetComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslCCAvenueCustomerCardDetail createSslCCAvenueCustomerCardDetail(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLCCAVENUECUSTOMERCARDDETAIL );
			return (SslCCAvenueCustomerCardDetail)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslCCAvenueCustomerCardDetail : "+e.getMessage(), 0 );
		}
	}
	
	public SslCCAvenueCustomerCardDetail createSslCCAvenueCustomerCardDetail(final Map attributeValues)
	{
		return createSslCCAvenueCustomerCardDetail( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLCheckoutMessages createSSLCheckoutMessages(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLCHECKOUTMESSAGES );
			return (SSLCheckoutMessages)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLCheckoutMessages : "+e.getMessage(), 0 );
		}
	}
	
	public SSLCheckoutMessages createSSLCheckoutMessages(final Map attributeValues)
	{
		return createSSLCheckoutMessages( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLCircleWidgetComponent createSSLCircleWidgetComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLCIRCLEWIDGETCOMPONENT );
			return (SSLCircleWidgetComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLCircleWidgetComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLCircleWidgetComponent createSSLCircleWidgetComponent(final Map attributeValues)
	{
		return createSSLCircleWidgetComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLClassificationAttrTemplateCronJob createSSLClassificationAttrTemplateCronJob(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLCLASSIFICATIONATTRTEMPLATECRONJOB );
			return (SSLClassificationAttrTemplateCronJob)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLClassificationAttrTemplateCronJob : "+e.getMessage(), 0 );
		}
	}
	
	public SSLClassificationAttrTemplateCronJob createSSLClassificationAttrTemplateCronJob(final Map attributeValues)
	{
		return createSSLClassificationAttrTemplateCronJob( getSession().getSessionContext(), attributeValues );
	}
	
	public SSlCMSTabContainer createSSlCMSTabContainer(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLCMSTABCONTAINER );
			return (SSlCMSTabContainer)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSlCMSTabContainer : "+e.getMessage(), 0 );
		}
	}
	
	public SSlCMSTabContainer createSSlCMSTabContainer(final Map attributeValues)
	{
		return createSSlCMSTabContainer( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLCollections createSSLCollections(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLCOLLECTIONS );
			return (SSLCollections)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLCollections : "+e.getMessage(), 0 );
		}
	}
	
	public SSLCollections createSSLCollections(final Map attributeValues)
	{
		return createSSLCollections( getSession().getSessionContext(), attributeValues );
	}
	
	public SslCollectionsBannerComponent createSslCollectionsBannerComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLCOLLECTIONSBANNERCOMPONENT );
			return (SslCollectionsBannerComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslCollectionsBannerComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslCollectionsBannerComponent createSslCollectionsBannerComponent(final Map attributeValues)
	{
		return createSslCollectionsBannerComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslCollectionsCarouselComponent createSslCollectionsCarouselComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLCOLLECTIONSCAROUSELCOMPONENT );
			return (SslCollectionsCarouselComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslCollectionsCarouselComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslCollectionsCarouselComponent createSslCollectionsCarouselComponent(final Map attributeValues)
	{
		return createSslCollectionsCarouselComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslCollectionsImageMapComponent createSslCollectionsImageMapComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLCOLLECTIONSIMAGEMAPCOMPONENT );
			return (SslCollectionsImageMapComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslCollectionsImageMapComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslCollectionsImageMapComponent createSslCollectionsImageMapComponent(final Map attributeValues)
	{
		return createSslCollectionsImageMapComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslCollectionsStyleComponent createSslCollectionsStyleComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLCOLLECTIONSSTYLECOMPONENT );
			return (SslCollectionsStyleComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslCollectionsStyleComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslCollectionsStyleComponent createSslCollectionsStyleComponent(final Map attributeValues)
	{
		return createSslCollectionsStyleComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslColletionsParagraphComponent createSslColletionsParagraphComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLCOLLETIONSPARAGRAPHCOMPONENT );
			return (SslColletionsParagraphComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslColletionsParagraphComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslColletionsParagraphComponent createSslColletionsParagraphComponent(final Map attributeValues)
	{
		return createSslColletionsParagraphComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLConfigurableTab createSSLConfigurableTab(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLCONFIGURABLETAB );
			return (SSLConfigurableTab)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLConfigurableTab : "+e.getMessage(), 0 );
		}
	}
	
	public SSLConfigurableTab createSSLConfigurableTab(final Map attributeValues)
	{
		return createSSLConfigurableTab( getSession().getSessionContext(), attributeValues );
	}
	
	public SslContactUsParagraphComponent createSslContactUsParagraphComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLCONTACTUSPARAGRAPHCOMPONENT );
			return (SslContactUsParagraphComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslContactUsParagraphComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslContactUsParagraphComponent createSslContactUsParagraphComponent(final Map attributeValues)
	{
		return createSslContactUsParagraphComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLContentWidgetComponent createSSLContentWidgetComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLCONTENTWIDGETCOMPONENT );
			return (SSLContentWidgetComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLContentWidgetComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLContentWidgetComponent createSSLContentWidgetComponent(final Map attributeValues)
	{
		return createSSLContentWidgetComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLCustomerFit createSSLCustomerFit(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLCUSTOMERFIT );
			return (SSLCustomerFit)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLCustomerFit : "+e.getMessage(), 0 );
		}
	}
	
	public SSLCustomerFit createSSLCustomerFit(final Map attributeValues)
	{
		return createSSLCustomerFit( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLCustomerType createSSLCustomerType(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLCUSTOMERTYPE );
			return (SSLCustomerType)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLCustomerType : "+e.getMessage(), 0 );
		}
	}
	
	public SSLCustomerType createSSLCustomerType(final Map attributeValues)
	{
		return createSSLCustomerType( getSession().getSessionContext(), attributeValues );
	}
	
	public SslDiscoverBlogUpdateParentComponent createSslDiscoverBlogParentComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLDISCOVERBLOGPARENTCOMPONENT );
			return (SslDiscoverBlogUpdateParentComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslDiscoverBlogParentComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslDiscoverBlogUpdateParentComponent createSslDiscoverBlogParentComponent(final Map attributeValues)
	{
		return createSslDiscoverBlogParentComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslDiscoverBlogUpdateParentComponent createSslDynamicListComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLDYNAMICLISTCOMPONENT );
			return (SslDiscoverBlogUpdateParentComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslDynamicListComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslDiscoverBlogUpdateParentComponent createSslDynamicListComponent(final Map attributeValues)
	{
		return createSslDynamicListComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslEventCarouselComponent createSslEventCarouselComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLEVENTCAROUSELCOMPONENT );
			return (SslEventCarouselComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslEventCarouselComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslEventCarouselComponent createSslEventCarouselComponent(final Map attributeValues)
	{
		return createSslEventCarouselComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslEventListComponent createSslEventListComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLEVENTLISTCOMPONENT );
			return (SslEventListComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslEventListComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslEventListComponent createSslEventListComponent(final Map attributeValues)
	{
		return createSslEventListComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslExclusiveBrandLinksComponent createSslExclusiveBrandLinksComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLEXCLUSIVEBRANDLINKSCOMPONENT );
			return (SslExclusiveBrandLinksComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslExclusiveBrandLinksComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslExclusiveBrandLinksComponent createSslExclusiveBrandLinksComponent(final Map attributeValues)
	{
		return createSslExclusiveBrandLinksComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslExclusiveBrandsComponent createSslExclusiveBrandsComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLEXCLUSIVEBRANDSCOMPONENT );
			return (SslExclusiveBrandsComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslExclusiveBrandsComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslExclusiveBrandsComponent createSslExclusiveBrandsComponent(final Map attributeValues)
	{
		return createSslExclusiveBrandsComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLFAQCollectionComponent createSSLFAQCollectionComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLFAQCOLLECTIONCOMPONENT );
			return (SSLFAQCollectionComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLFAQCollectionComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLFAQCollectionComponent createSSLFAQCollectionComponent(final Map attributeValues)
	{
		return createSSLFAQCollectionComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLFAQComponent createSSLFAQComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLFAQCOMPONENT );
			return (SSLFAQComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLFAQComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLFAQComponent createSSLFAQComponent(final Map attributeValues)
	{
		return createSSLFAQComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLFemaleCustomerFit createSSLFemaleCustomerFit(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLFEMALECUSTOMERFIT );
			return (SSLFemaleCustomerFit)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLFemaleCustomerFit : "+e.getMessage(), 0 );
		}
	}
	
	public SSLFemaleCustomerFit createSSLFemaleCustomerFit(final Map attributeValues)
	{
		return createSSLFemaleCustomerFit( getSession().getSessionContext(), attributeValues );
	}
	
	public SslFirstCitizenCardLevelRestriction createSslFirstCitizenCardLevelRestriction(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLFIRSTCITIZENCARDLEVELRESTRICTION );
			return (SslFirstCitizenCardLevelRestriction)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslFirstCitizenCardLevelRestriction : "+e.getMessage(), 0 );
		}
	}
	
	public SslFirstCitizenCardLevelRestriction createSslFirstCitizenCardLevelRestriction(final Map attributeValues)
	{
		return createSslFirstCitizenCardLevelRestriction( getSession().getSessionContext(), attributeValues );
	}
	
	public SslGiftImageTextComponent createSslGiftImageTextComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLGIFTIMAGETEXTCOMPONENT );
			return (SslGiftImageTextComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslGiftImageTextComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslGiftImageTextComponent createSslGiftImageTextComponent(final Map attributeValues)
	{
		return createSslGiftImageTextComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLHeadingWidgetComponent createSSLHeadingWidgetComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLHEADINGWIDGETCOMPONENT );
			return (SSLHeadingWidgetComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLHeadingWidgetComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLHeadingWidgetComponent createSSLHeadingWidgetComponent(final Map attributeValues)
	{
		return createSSLHeadingWidgetComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslHTMLContentComponent createSslHTMLContentComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLHTMLCONTENTCOMPONENT );
			return (SslHTMLContentComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslHTMLContentComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslHTMLContentComponent createSslHTMLContentComponent(final Map attributeValues)
	{
		return createSslHTMLContentComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslImageComponent createSslImageComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLIMAGECOMPONENT );
			return (SslImageComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslImageComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslImageComponent createSslImageComponent(final Map attributeValues)
	{
		return createSslImageComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLImageLinkComponent createSSLImageLinkComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLIMAGELINKCOMPONENT );
			return (SSLImageLinkComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLImageLinkComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLImageLinkComponent createSSLImageLinkComponent(final Map attributeValues)
	{
		return createSSLImageLinkComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslImageMapComponent createSslImageMapComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLIMAGEMAPCOMPONENT );
			return (SslImageMapComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslImageMapComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslImageMapComponent createSslImageMapComponent(final Map attributeValues)
	{
		return createSslImageMapComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLImageRollOverComponent createSSLImageRollOverComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLIMAGEROLLOVERCOMPONENT );
			return (SSLImageRollOverComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLImageRollOverComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLImageRollOverComponent createSSLImageRollOverComponent(final Map attributeValues)
	{
		return createSSLImageRollOverComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLImageRollOverLinkComponent createSSLImageRollOverLinkComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLIMAGEROLLOVERLINKCOMPONENT );
			return (SSLImageRollOverLinkComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLImageRollOverLinkComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLImageRollOverLinkComponent createSSLImageRollOverLinkComponent(final Map attributeValues)
	{
		return createSSLImageRollOverLinkComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLImageRollOverSubComponent createSSLImageRollOverSubComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLIMAGEROLLOVERSUBCOMPONENT );
			return (SSLImageRollOverSubComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLImageRollOverSubComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLImageRollOverSubComponent createSSLImageRollOverSubComponent(final Map attributeValues)
	{
		return createSSLImageRollOverSubComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslImageTextComponent createSslImageTextComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLIMAGETEXTCOMPONENT );
			return (SslImageTextComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslImageTextComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslImageTextComponent createSslImageTextComponent(final Map attributeValues)
	{
		return createSslImageTextComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLLeftRightComponent createSSLLeftRightComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLLEFTRIGHTCOMPONENT );
			return (SSLLeftRightComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLLeftRightComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLLeftRightComponent createSSLLeftRightComponent(final Map attributeValues)
	{
		return createSSLLeftRightComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLLinkGridWidgetComponent createSSLLinkGridWidgetComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLLINKGRIDWIDGETCOMPONENT );
			return (SSLLinkGridWidgetComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLLinkGridWidgetComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLLinkGridWidgetComponent createSSLLinkGridWidgetComponent(final Map attributeValues)
	{
		return createSSLLinkGridWidgetComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLLuxuryStoreCategoryBannerCMSComponent createSSLLuxuryStoreCategoryBannerCMSComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLLUXURYSTORECATEGORYBANNERCMSCOMPONENT );
			return (SSLLuxuryStoreCategoryBannerCMSComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLLuxuryStoreCategoryBannerCMSComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLLuxuryStoreCategoryBannerCMSComponent createSSLLuxuryStoreCategoryBannerCMSComponent(final Map attributeValues)
	{
		return createSSLLuxuryStoreCategoryBannerCMSComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLLuxuryStoreCategoryBannerCollectionComponent createSSLLuxuryStoreCategoryBannerCollectionComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLLUXURYSTORECATEGORYBANNERCOLLECTIONCOMPONENT );
			return (SSLLuxuryStoreCategoryBannerCollectionComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLLuxuryStoreCategoryBannerCollectionComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLLuxuryStoreCategoryBannerCollectionComponent createSSLLuxuryStoreCategoryBannerCollectionComponent(final Map attributeValues)
	{
		return createSSLLuxuryStoreCategoryBannerCollectionComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLLuxuryStoreInstagramCMSComponent createSSLLuxuryStoreInstagramCMSComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLLUXURYSTOREINSTAGRAMCMSCOMPONENT );
			return (SSLLuxuryStoreInstagramCMSComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLLuxuryStoreInstagramCMSComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLLuxuryStoreInstagramCMSComponent createSSLLuxuryStoreInstagramCMSComponent(final Map attributeValues)
	{
		return createSSLLuxuryStoreInstagramCMSComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLLuxuryStoreNewArrivalsCMSComponent createSSLLuxuryStoreNewArrivalsCMSComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLLUXURYSTORENEWARRIVALSCMSCOMPONENT );
			return (SSLLuxuryStoreNewArrivalsCMSComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLLuxuryStoreNewArrivalsCMSComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLLuxuryStoreNewArrivalsCMSComponent createSSLLuxuryStoreNewArrivalsCMSComponent(final Map attributeValues)
	{
		return createSSLLuxuryStoreNewArrivalsCMSComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLLuxuryStoreNewArrivalsCollectionComponent createSSLLuxuryStoreNewArrivalsCollectionComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLLUXURYSTORENEWARRIVALSCOLLECTIONCOMPONENT );
			return (SSLLuxuryStoreNewArrivalsCollectionComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLLuxuryStoreNewArrivalsCollectionComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLLuxuryStoreNewArrivalsCollectionComponent createSSLLuxuryStoreNewArrivalsCollectionComponent(final Map attributeValues)
	{
		return createSSLLuxuryStoreNewArrivalsCollectionComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLLuxuryStoreParallaxComponent createSSLLuxuryStoreParallaxComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLLUXURYSTOREPARALLAXCOMPONENT );
			return (SSLLuxuryStoreParallaxComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLLuxuryStoreParallaxComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLLuxuryStoreParallaxComponent createSSLLuxuryStoreParallaxComponent(final Map attributeValues)
	{
		return createSSLLuxuryStoreParallaxComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLMaleCustomerFit createSSLMaleCustomerFit(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLMALECUSTOMERFIT );
			return (SSLMaleCustomerFit)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLMaleCustomerFit : "+e.getMessage(), 0 );
		}
	}
	
	public SSLMaleCustomerFit createSSLMaleCustomerFit(final Map attributeValues)
	{
		return createSSLMaleCustomerFit( getSession().getSessionContext(), attributeValues );
	}
	
	public SslMediumTypeRestriction createSslMediumTypeRestriction(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLMEDIUMTYPERESTRICTION );
			return (SslMediumTypeRestriction)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslMediumTypeRestriction : "+e.getMessage(), 0 );
		}
	}
	
	public SslMediumTypeRestriction createSslMediumTypeRestriction(final Map attributeValues)
	{
		return createSslMediumTypeRestriction( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLMobileContentPage createSSLMobileContentPage(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLMOBILECONTENTPAGE );
			return (SSLMobileContentPage)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLMobileContentPage : "+e.getMessage(), 0 );
		}
	}
	
	public SSLMobileContentPage createSSLMobileContentPage(final Map attributeValues)
	{
		return createSSLMobileContentPage( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLMobileWidgetComponent createSSLMobileWidgetComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLMOBILEWIDGETCOMPONENT );
			return (SSLMobileWidgetComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLMobileWidgetComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLMobileWidgetComponent createSSLMobileWidgetComponent(final Map attributeValues)
	{
		return createSSLMobileWidgetComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLMobileWidgetLimit createSSLMobileWidgetLimit(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLMOBILEWIDGETLIMIT );
			return (SSLMobileWidgetLimit)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLMobileWidgetLimit : "+e.getMessage(), 0 );
		}
	}
	
	public SSLMobileWidgetLimit createSSLMobileWidgetLimit(final Map attributeValues)
	{
		return createSSLMobileWidgetLimit( getSession().getSessionContext(), attributeValues );
	}
	
	public SslMultiClickBannerComponent createSslMultiClickBannerComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLMULTICLICKBANNERCOMPONENT );
			return (SslMultiClickBannerComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslMultiClickBannerComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslMultiClickBannerComponent createSslMultiClickBannerComponent(final Map attributeValues)
	{
		return createSslMultiClickBannerComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslMyAccountAlertComponent createSslMyAccountAlertComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLMYACCOUNTALERTCOMPONENT );
			return (SslMyAccountAlertComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslMyAccountAlertComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslMyAccountAlertComponent createSslMyAccountAlertComponent(final Map attributeValues)
	{
		return createSslMyAccountAlertComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslOrderLimitDiscountPercentagePromotion createSslOrderLimitDiscountPercentagePromotion(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLORDERLIMITDISCOUNTPERCENTAGEPROMOTION );
			return (SslOrderLimitDiscountPercentagePromotion)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslOrderLimitDiscountPercentagePromotion : "+e.getMessage(), 0 );
		}
	}
	
	public SslOrderLimitDiscountPercentagePromotion createSslOrderLimitDiscountPercentagePromotion(final Map attributeValues)
	{
		return createSslOrderLimitDiscountPercentagePromotion( getSession().getSessionContext(), attributeValues );
	}
	
	public SslOrderSteppedMultiBuyDiscountPromotion createSslOrderSteppedMultiBuyDiscountPromotion(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLORDERSTEPPEDMULTIBUYDISCOUNTPROMOTION );
			return (SslOrderSteppedMultiBuyDiscountPromotion)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslOrderSteppedMultiBuyDiscountPromotion : "+e.getMessage(), 0 );
		}
	}
	
	public SslOrderSteppedMultiBuyDiscountPromotion createSslOrderSteppedMultiBuyDiscountPromotion(final Map attributeValues)
	{
		return createSslOrderSteppedMultiBuyDiscountPromotion( getSession().getSessionContext(), attributeValues );
	}
	
	public OrderThresholdFixedDiscountPromotion createSslOrderThresholdFixedDiscountPromotion(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLORDERTHRESHOLDFIXEDDISCOUNTPROMOTION );
			return (OrderThresholdFixedDiscountPromotion)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslOrderThresholdFixedDiscountPromotion : "+e.getMessage(), 0 );
		}
	}
	
	public OrderThresholdFixedDiscountPromotion createSslOrderThresholdFixedDiscountPromotion(final Map attributeValues)
	{
		return createSslOrderThresholdFixedDiscountPromotion( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLOrderRestriction createSslOrderWithProductRestriction(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLORDERWITHPRODUCTRESTRICTION );
			return (SSLOrderRestriction)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslOrderWithProductRestriction : "+e.getMessage(), 0 );
		}
	}
	
	public SSLOrderRestriction createSslOrderWithProductRestriction(final Map attributeValues)
	{
		return createSslOrderWithProductRestriction( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLPDPProductInfoCollectionComponent createSSLPDPProductInfoCollectionComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLPDPPRODUCTINFOCOLLECTIONCOMPONENT );
			return (SSLPDPProductInfoCollectionComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLPDPProductInfoCollectionComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLPDPProductInfoCollectionComponent createSSLPDPProductInfoCollectionComponent(final Map attributeValues)
	{
		return createSSLPDPProductInfoCollectionComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLPDPSimpleCMSTabComponent createSSLPDPSimpleCMSTabComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLPDPSIMPLECMSTABCOMPONENT );
			return (SSLPDPSimpleCMSTabComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLPDPSimpleCMSTabComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLPDPSimpleCMSTabComponent createSSLPDPSimpleCMSTabComponent(final Map attributeValues)
	{
		return createSSLPDPSimpleCMSTabComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLPostalCodeCityStateMapping createSSLPostalCodeCityStateMapping(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLPOSTALCODECITYSTATEMAPPING );
			return (SSLPostalCodeCityStateMapping)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLPostalCodeCityStateMapping : "+e.getMessage(), 0 );
		}
	}
	
	public SSLPostalCodeCityStateMapping createSSLPostalCodeCityStateMapping(final Map attributeValues)
	{
		return createSSLPostalCodeCityStateMapping( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLProductAttrTranslationData createSSLProductAttrMapping(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLPRODUCTATTRMAPPING );
			return (SSLProductAttrTranslationData)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLProductAttrMapping : "+e.getMessage(), 0 );
		}
	}
	
	public SSLProductAttrTranslationData createSSLProductAttrMapping(final Map attributeValues)
	{
		return createSSLProductAttrMapping( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLProductAttrTemplateCronJob createSSLProductAttrTemplateCronJob(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLPRODUCTATTRTEMPLATECRONJOB );
			return (SSLProductAttrTemplateCronJob)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLProductAttrTemplateCronJob : "+e.getMessage(), 0 );
		}
	}
	
	public SSLProductAttrTemplateCronJob createSSLProductAttrTemplateCronJob(final Map attributeValues)
	{
		return createSSLProductAttrTemplateCronJob( getSession().getSessionContext(), attributeValues );
	}
	
	public SslProductBOGODiscountPromotion createSslProductBOGODiscountPromotion(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLPRODUCTBOGODISCOUNTPROMOTION );
			return (SslProductBOGODiscountPromotion)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslProductBOGODiscountPromotion : "+e.getMessage(), 0 );
		}
	}
	
	public SslProductBOGODiscountPromotion createSslProductBOGODiscountPromotion(final Map attributeValues)
	{
		return createSslProductBOGODiscountPromotion( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLProductBOGOFPromotion createSslProductBOGOFPromotion(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLPRODUCTBOGOFPROMOTION );
			return (SSLProductBOGOFPromotion)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslProductBOGOFPromotion : "+e.getMessage(), 0 );
		}
	}
	
	public SSLProductBOGOFPromotion createSslProductBOGOFPromotion(final Map attributeValues)
	{
		return createSslProductBOGOFPromotion( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLProductDetailBlogsComponent createSSLProductDetailBlogsComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLPRODUCTDETAILBLOGSCOMPONENT );
			return (SSLProductDetailBlogsComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLProductDetailBlogsComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLProductDetailBlogsComponent createSSLProductDetailBlogsComponent(final Map attributeValues)
	{
		return createSSLProductDetailBlogsComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLProductDetailImageCarousalComponent createSSLProductDetailImageCarousalComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLPRODUCTDETAILIMAGECAROUSALCOMPONENT );
			return (SSLProductDetailImageCarousalComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLProductDetailImageCarousalComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLProductDetailImageCarousalComponent createSSLProductDetailImageCarousalComponent(final Map attributeValues)
	{
		return createSSLProductDetailImageCarousalComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslProductDetailJspIncludeComponent createSslProductDetailJspIncludeComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLPRODUCTDETAILJSPINCLUDECOMPONENT );
			return (SslProductDetailJspIncludeComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslProductDetailJspIncludeComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslProductDetailJspIncludeComponent createSslProductDetailJspIncludeComponent(final Map attributeValues)
	{
		return createSslProductDetailJspIncludeComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLProductDetailReviewRatingComponent createSSLProductDetailReviewRatingComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLPRODUCTDETAILREVIEWRATINGCOMPONENT );
			return (SSLProductDetailReviewRatingComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLProductDetailReviewRatingComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLProductDetailReviewRatingComponent createSSLProductDetailReviewRatingComponent(final Map attributeValues)
	{
		return createSSLProductDetailReviewRatingComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLProductDetailSimilarProductComponent createSSLProductDetailSimilarProductComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLPRODUCTDETAILSIMILARPRODUCTCOMPONENT );
			return (SSLProductDetailSimilarProductComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLProductDetailSimilarProductComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLProductDetailSimilarProductComponent createSSLProductDetailSimilarProductComponent(final Map attributeValues)
	{
		return createSSLProductDetailSimilarProductComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLProductAttrTemplateCronJob createSSLProductHierarchyStyleWiseCronJob(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLPRODUCTHIERARCHYSTYLEWISECRONJOB );
			return (SSLProductAttrTemplateCronJob)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLProductHierarchyStyleWiseCronJob : "+e.getMessage(), 0 );
		}
	}
	
	public SSLProductAttrTemplateCronJob createSSLProductHierarchyStyleWiseCronJob(final Map attributeValues)
	{
		return createSSLProductHierarchyStyleWiseCronJob( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLProductLinkSimilarProductsCronJob createSSLProductLinkSimilarProductsCronJob(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLPRODUCTLINKSIMILARPRODUCTSCRONJOB );
			return (SSLProductLinkSimilarProductsCronJob)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLProductLinkSimilarProductsCronJob : "+e.getMessage(), 0 );
		}
	}
	
	public SSLProductLinkSimilarProductsCronJob createSSLProductLinkSimilarProductsCronJob(final Map attributeValues)
	{
		return createSSLProductLinkSimilarProductsCronJob( getSession().getSessionContext(), attributeValues );
	}
	
	public SslProductMultiBuyDiscountPromotion createSslProductMultiBuyDiscountPromotion(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLPRODUCTMULTIBUYDISCOUNTPROMOTION );
			return (SslProductMultiBuyDiscountPromotion)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslProductMultiBuyDiscountPromotion : "+e.getMessage(), 0 );
		}
	}
	
	public SslProductMultiBuyDiscountPromotion createSslProductMultiBuyDiscountPromotion(final Map attributeValues)
	{
		return createSslProductMultiBuyDiscountPromotion( getSession().getSessionContext(), attributeValues );
	}
	
	public SslProductPerfectPartnerDiscountPromotion createSslProductPerfectPartnerDiscountPromotion(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLPRODUCTPERFECTPARTNERDISCOUNTPROMOTION );
			return (SslProductPerfectPartnerDiscountPromotion)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslProductPerfectPartnerDiscountPromotion : "+e.getMessage(), 0 );
		}
	}
	
	public SslProductPerfectPartnerDiscountPromotion createSslProductPerfectPartnerDiscountPromotion(final Map attributeValues)
	{
		return createSslProductPerfectPartnerDiscountPromotion( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLProductPrimaryImageUrlReportCronJob createSSLProductPrimaryImageUrlReportCronJob(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLPRODUCTPRIMARYIMAGEURLREPORTCRONJOB );
			return (SSLProductPrimaryImageUrlReportCronJob)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLProductPrimaryImageUrlReportCronJob : "+e.getMessage(), 0 );
		}
	}
	
	public SSLProductPrimaryImageUrlReportCronJob createSSLProductPrimaryImageUrlReportCronJob(final Map attributeValues)
	{
		return createSSLProductPrimaryImageUrlReportCronJob( getSession().getSessionContext(), attributeValues );
	}
	
	public SslProductPromotionRestriction createSslProductPromotionRestriction(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLPRODUCTPROMOTIONRESTRICTION );
			return (SslProductPromotionRestriction)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslProductPromotionRestriction : "+e.getMessage(), 0 );
		}
	}
	
	public SslProductPromotionRestriction createSslProductPromotionRestriction(final Map attributeValues)
	{
		return createSslProductPromotionRestriction( getSession().getSessionContext(), attributeValues );
	}
	
	public SslProductSteppedMultiBuyDiscountPromotion createSslProductSteppedMultiBuyDiscountPromotion(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLPRODUCTSTEPPEDMULTIBUYDISCOUNTPROMOTION );
			return (SslProductSteppedMultiBuyDiscountPromotion)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslProductSteppedMultiBuyDiscountPromotion : "+e.getMessage(), 0 );
		}
	}
	
	public SslProductSteppedMultiBuyDiscountPromotion createSslProductSteppedMultiBuyDiscountPromotion(final Map attributeValues)
	{
		return createSslProductSteppedMultiBuyDiscountPromotion( getSession().getSessionContext(), attributeValues );
	}
	
	public SslProductValueDiscountPromotion createSslProductValueDiscountPromotion(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLPRODUCTVALUEDISCOUNTPROMOTION );
			return (SslProductValueDiscountPromotion)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslProductValueDiscountPromotion : "+e.getMessage(), 0 );
		}
	}
	
	public SslProductValueDiscountPromotion createSslProductValueDiscountPromotion(final Map attributeValues)
	{
		return createSslProductValueDiscountPromotion( getSession().getSessionContext(), attributeValues );
	}
	
	public SslProductVariantJspIncludeComponent createSslProductVariantJspIncludeComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLPRODUCTVARIANTJSPINCLUDECOMPONENT );
			return (SslProductVariantJspIncludeComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslProductVariantJspIncludeComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslProductVariantJspIncludeComponent createSslProductVariantJspIncludeComponent(final Map attributeValues)
	{
		return createSslProductVariantJspIncludeComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLProductWidgetCarouselComponent createSSLProductWidgetCarouselComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLPRODUCTWIDGETCAROUSELCOMPONENT );
			return (SSLProductWidgetCarouselComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLProductWidgetCarouselComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLProductWidgetCarouselComponent createSSLProductWidgetCarouselComponent(final Map attributeValues)
	{
		return createSSLProductWidgetCarouselComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslRecentlyViewedProductComponent createSslRecentlyViewedProductComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLRECENTLYVIEWEDPRODUCTCOMPONENT );
			return (SslRecentlyViewedProductComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslRecentlyViewedProductComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslRecentlyViewedProductComponent createSslRecentlyViewedProductComponent(final Map attributeValues)
	{
		return createSslRecentlyViewedProductComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLRecentlyViewedProductsComponent createSSLRecentlyViewedProductsComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLRECENTLYVIEWEDPRODUCTSCOMPONENT );
			return (SSLRecentlyViewedProductsComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLRecentlyViewedProductsComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLRecentlyViewedProductsComponent createSSLRecentlyViewedProductsComponent(final Map attributeValues)
	{
		return createSSLRecentlyViewedProductsComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLReturnEntry createSSLReturnEntry(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLRETURNENTRY );
			return (SSLReturnEntry)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLReturnEntry : "+e.getMessage(), 0 );
		}
	}
	
	public SSLReturnEntry createSSLReturnEntry(final Map attributeValues)
	{
		return createSSLReturnEntry( getSession().getSessionContext(), attributeValues );
	}
	
	public SslShopBySizeMapping createSslShopBySizeMapping(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLSHOPBYSIZEMAPPING );
			return (SslShopBySizeMapping)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslShopBySizeMapping : "+e.getMessage(), 0 );
		}
	}
	
	public SslShopBySizeMapping createSslShopBySizeMapping(final Map attributeValues)
	{
		return createSslShopBySizeMapping( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLSilverShopperComponent createSSLSilverShopperComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLSILVERSHOPPERCOMPONENT );
			return (SSLSilverShopperComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLSilverShopperComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLSilverShopperComponent createSSLSilverShopperComponent(final Map attributeValues)
	{
		return createSSLSilverShopperComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslSimpleBannerComponent createSslSimpleBannerComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLSIMPLEBANNERCOMPONENT );
			return (SslSimpleBannerComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslSimpleBannerComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslSimpleBannerComponent createSslSimpleBannerComponent(final Map attributeValues)
	{
		return createSslSimpleBannerComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslSolrExtIndexerCronJob createSslSolrExtIndexerCronJob(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLSOLREXTINDEXERCRONJOB );
			return (SslSolrExtIndexerCronJob)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslSolrExtIndexerCronJob : "+e.getMessage(), 0 );
		}
	}
	
	public SslSolrExtIndexerCronJob createSslSolrExtIndexerCronJob(final Map attributeValues)
	{
		return createSslSolrExtIndexerCronJob( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLStyleHubCollectionComponent createSSLStyleHubCollectionComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLSTYLEHUBCOLLECTIONCOMPONENT );
			return (SSLStyleHubCollectionComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLStyleHubCollectionComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLStyleHubCollectionComponent createSSLStyleHubCollectionComponent(final Map attributeValues)
	{
		return createSSLStyleHubCollectionComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLStyleHubComponent createSSLStyleHubComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLSTYLEHUBCOMPONENT );
			return (SSLStyleHubComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLStyleHubComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLStyleHubComponent createSSLStyleHubComponent(final Map attributeValues)
	{
		return createSSLStyleHubComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslTax createSslTax(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLTAX );
			return (SslTax)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslTax : "+e.getMessage(), 0 );
		}
	}
	
	public SslTax createSslTax(final Map attributeValues)
	{
		return createSslTax( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLTestimonialCollectionComponent createSSLTestimonialCollectionComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLTESTIMONIALCOLLECTIONCOMPONENT );
			return (SSLTestimonialCollectionComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLTestimonialCollectionComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLTestimonialCollectionComponent createSSLTestimonialCollectionComponent(final Map attributeValues)
	{
		return createSSLTestimonialCollectionComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLTestimonialComponent createSSLTestimonialComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLTESTIMONIALCOMPONENT );
			return (SSLTestimonialComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLTestimonialComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLTestimonialComponent createSSLTestimonialComponent(final Map attributeValues)
	{
		return createSSLTestimonialComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLTextWidgetComponent createSSLTextWidgetComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLTEXTWIDGETCOMPONENT );
			return (SSLTextWidgetComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLTextWidgetComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLTextWidgetComponent createSSLTextWidgetComponent(final Map attributeValues)
	{
		return createSSLTextWidgetComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLTextWidgetListComponent createSSLTextWidgetListComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLTEXTWIDGETLISTCOMPONENT );
			return (SSLTextWidgetListComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLTextWidgetListComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLTextWidgetListComponent createSSLTextWidgetListComponent(final Map attributeValues)
	{
		return createSSLTextWidgetListComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLUndeliverPincodeInfo createSSLUndeliverPincodeInfo(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLUNDELIVERPINCODEINFO );
			return (SSLUndeliverPincodeInfo)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLUndeliverPincodeInfo : "+e.getMessage(), 0 );
		}
	}
	
	public SSLUndeliverPincodeInfo createSSLUndeliverPincodeInfo(final Map attributeValues)
	{
		return createSSLUndeliverPincodeInfo( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLUniqueDeviceIdentifier createSSLUniqueDeviceIdentifier(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLUNIQUEDEVICEIDENTIFIER );
			return (SSLUniqueDeviceIdentifier)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLUniqueDeviceIdentifier : "+e.getMessage(), 0 );
		}
	}
	
	public SSLUniqueDeviceIdentifier createSSLUniqueDeviceIdentifier(final Map attributeValues)
	{
		return createSSLUniqueDeviceIdentifier( getSession().getSessionContext(), attributeValues );
	}
	
	public SslUpcomingEventComponent createSslUpcomingEventComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLUPCOMINGEVENTCOMPONENT );
			return (SslUpcomingEventComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslUpcomingEventComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslUpcomingEventComponent createSslUpcomingEventComponent(final Map attributeValues)
	{
		return createSslUpcomingEventComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLUserDomainRestriction createSSLUserDomainRestriction(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLUSERDOMAINRESTRICTION );
			return (SSLUserDomainRestriction)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLUserDomainRestriction : "+e.getMessage(), 0 );
		}
	}
	
	public SSLUserDomainRestriction createSSLUserDomainRestriction(final Map attributeValues)
	{
		return createSSLUserDomainRestriction( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLUserGroupRestriction createSSLUserGroupRestriction(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLUSERGROUPRESTRICTION );
			return (SSLUserGroupRestriction)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLUserGroupRestriction : "+e.getMessage(), 0 );
		}
	}
	
	public SSLUserGroupRestriction createSSLUserGroupRestriction(final Map attributeValues)
	{
		return createSSLUserGroupRestriction( getSession().getSessionContext(), attributeValues );
	}
	
	public SslUserTypeRestriction createSslUserTypeRestriction(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLUSERTYPERESTRICTION );
			return (SslUserTypeRestriction)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslUserTypeRestriction : "+e.getMessage(), 0 );
		}
	}
	
	public SslUserTypeRestriction createSslUserTypeRestriction(final Map attributeValues)
	{
		return createSslUserTypeRestriction( getSession().getSessionContext(), attributeValues );
	}
	
	public SslVerticalCarouselComponent createSslVerticalCarouselComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLVERTICALCAROUSELCOMPONENT );
			return (SslVerticalCarouselComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslVerticalCarouselComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslVerticalCarouselComponent createSslVerticalCarouselComponent(final Map attributeValues)
	{
		return createSslVerticalCarouselComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslVideoTextComponent createSslVideoTextComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLVIDEOTEXTCOMPONENT );
			return (SslVideoTextComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslVideoTextComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslVideoTextComponent createSslVideoTextComponent(final Map attributeValues)
	{
		return createSslVideoTextComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SSLViewAllWidgetComponent createSSLViewAllWidgetComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLVIEWALLWIDGETCOMPONENT );
			return (SSLViewAllWidgetComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLViewAllWidgetComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SSLViewAllWidgetComponent createSSLViewAllWidgetComponent(final Map attributeValues)
	{
		return createSSLViewAllWidgetComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslVoucherComponent createSSLVoucherComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLVOUCHERCOMPONENT );
			return (SslVoucherComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SSLVoucherComponent : "+e.getMessage(), 0 );
		}
	}
	
	public SslVoucherComponent createSSLVoucherComponent(final Map attributeValues)
	{
		return createSSLVoucherComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public SslWalletRefundEmailProcess createSslWalletRefundEmailProcess(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.SSLWALLETREFUNDEMAILPROCESS );
			return (SslWalletRefundEmailProcess)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SslWalletRefundEmailProcess : "+e.getMessage(), 0 );
		}
	}
	
	public SslWalletRefundEmailProcess createSslWalletRefundEmailProcess(final Map attributeValues)
	{
		return createSslWalletRefundEmailProcess( getSession().getSessionContext(), attributeValues );
	}
	
	public SterlingCustomerNotificationProcess createSterlingCustomerNotificationProcess(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.STERLINGCUSTOMERNOTIFICATIONPROCESS );
			return (SterlingCustomerNotificationProcess)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SterlingCustomerNotificationProcess : "+e.getMessage(), 0 );
		}
	}
	
	public SterlingCustomerNotificationProcess createSterlingCustomerNotificationProcess(final Map attributeValues)
	{
		return createSterlingCustomerNotificationProcess( getSession().getSessionContext(), attributeValues );
	}
	
	public SterlingHybrisStatusMapping createSterlingHybrisStatusMapping(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.STERLINGHYBRISSTATUSMAPPING );
			return (SterlingHybrisStatusMapping)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating SterlingHybrisStatusMapping : "+e.getMessage(), 0 );
		}
	}
	
	public SterlingHybrisStatusMapping createSterlingHybrisStatusMapping(final Map attributeValues)
	{
		return createSterlingHybrisStatusMapping( getSession().getSessionContext(), attributeValues );
	}
	
	public StoreFinderHeaderComponent createStoreFinderHeaderComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.STOREFINDERHEADERCOMPONENT );
			return (StoreFinderHeaderComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating StoreFinderHeaderComponent : "+e.getMessage(), 0 );
		}
	}
	
	public StoreFinderHeaderComponent createStoreFinderHeaderComponent(final Map attributeValues)
	{
		return createStoreFinderHeaderComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public StyleAndInspirationCMSComponent createStyleAndInspirationCMSComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.STYLEANDINSPIRATIONCMSCOMPONENT );
			return (StyleAndInspirationCMSComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating StyleAndInspirationCMSComponent : "+e.getMessage(), 0 );
		}
	}
	
	public StyleAndInspirationCMSComponent createStyleAndInspirationCMSComponent(final Map attributeValues)
	{
		return createStyleAndInspirationCMSComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public TemporaryPasswordProcess createTemporaryPasswordProcess(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.TEMPORARYPASSWORDPROCESS );
			return (TemporaryPasswordProcess)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating TemporaryPasswordProcess : "+e.getMessage(), 0 );
		}
	}
	
	public TemporaryPasswordProcess createTemporaryPasswordProcess(final Map attributeValues)
	{
		return createTemporaryPasswordProcess( getSession().getSessionContext(), attributeValues );
	}
	
	public TopFooterComponent createTopFooterComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.TOPFOOTERCOMPONENT );
			return (TopFooterComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating TopFooterComponent : "+e.getMessage(), 0 );
		}
	}
	
	public TopFooterComponent createTopFooterComponent(final Map attributeValues)
	{
		return createTopFooterComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public UserDomains createUserDomains(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.USERDOMAINS );
			return (UserDomains)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating UserDomains : "+e.getMessage(), 0 );
		}
	}
	
	public UserDomains createUserDomains(final Map attributeValues)
	{
		return createUserDomains( getSession().getSessionContext(), attributeValues );
	}
	
	public UserOTP createUserOTP(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.USEROTP );
			return (UserOTP)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating UserOTP : "+e.getMessage(), 0 );
		}
	}
	
	public UserOTP createUserOTP(final Map attributeValues)
	{
		return createUserOTP( getSession().getSessionContext(), attributeValues );
	}
	
	public UserOTPConfigRules createUserOTPConfigRules(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.USEROTPCONFIGRULES );
			return (UserOTPConfigRules)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating UserOTPConfigRules : "+e.getMessage(), 0 );
		}
	}
	
	public UserOTPConfigRules createUserOTPConfigRules(final Map attributeValues)
	{
		return createUserOTPConfigRules( getSession().getSessionContext(), attributeValues );
	}
	
	public VerifiedByComponent createVerifiedByComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.VERIFIEDBYCOMPONENT );
			return (VerifiedByComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating VerifiedByComponent : "+e.getMessage(), 0 );
		}
	}
	
	public VerifiedByComponent createVerifiedByComponent(final Map attributeValues)
	{
		return createVerifiedByComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public VideoBrandDescComponent createVideoBrandDescComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.VIDEOBRANDDESCCOMPONENT );
			return (VideoBrandDescComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating VideoBrandDescComponent : "+e.getMessage(), 0 );
		}
	}
	
	public VideoBrandDescComponent createVideoBrandDescComponent(final Map attributeValues)
	{
		return createVideoBrandDescComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public VirtualCategoryEntry createVirtualCategoryEntry(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.VIRTUALCATEGORYENTRY );
			return (VirtualCategoryEntry)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating VirtualCategoryEntry : "+e.getMessage(), 0 );
		}
	}
	
	public VirtualCategoryEntry createVirtualCategoryEntry(final Map attributeValues)
	{
		return createVirtualCategoryEntry( getSession().getSessionContext(), attributeValues );
	}
	
	public WalletCreditsBulkUploadStoreFrontProcess createWalletCreditsBulkUploadStoreFrontProcess(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.WALLETCREDITSBULKUPLOADSTOREFRONTPROCESS );
			return (WalletCreditsBulkUploadStoreFrontProcess)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating WalletCreditsBulkUploadStoreFrontProcess : "+e.getMessage(), 0 );
		}
	}
	
	public WalletCreditsBulkUploadStoreFrontProcess createWalletCreditsBulkUploadStoreFrontProcess(final Map attributeValues)
	{
		return createWalletCreditsBulkUploadStoreFrontProcess( getSession().getSessionContext(), attributeValues );
	}
	
	public WishListComponent createWishListComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.WISHLISTCOMPONENT );
			return (WishListComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating WishListComponent : "+e.getMessage(), 0 );
		}
	}
	
	public WishListComponent createWishListComponent(final Map attributeValues)
	{
		return createWishListComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public WomenCollectionComponent createWomenCollectionComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.WOMENCOLLECTIONCOMPONENT );
			return (WomenCollectionComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating WomenCollectionComponent : "+e.getMessage(), 0 );
		}
	}
	
	public WomenCollectionComponent createWomenCollectionComponent(final Map attributeValues)
	{
		return createWomenCollectionComponent( getSession().getSessionContext(), attributeValues );
	}
	
	public WomenTopCollectionComponent createWomenTopCollectionComponent(final SessionContext ctx, final Map attributeValues)
	{
		try
		{
			ComposedType type = getTenant().getJaloConnection().getTypeManager().getComposedType( SslCoreConstants.TC.WOMENTOPCOLLECTIONCOMPONENT );
			return (WomenTopCollectionComponent)type.newInstance( ctx, attributeValues );
		}
		catch( JaloGenericCreationException e)
		{
			final Throwable cause = e.getCause();
			throw (cause instanceof RuntimeException ?
			(RuntimeException)cause
			:
			new JaloSystemException( cause, cause.getMessage(), e.getErrorCode() ) );
		}
		catch( JaloBusinessException e )
		{
			throw new JaloSystemException( e ,"error creating WomenTopCollectionComponent : "+e.getMessage(), 0 );
		}
	}
	
	public WomenTopCollectionComponent createWomenTopCollectionComponent(final Map attributeValues)
	{
		return createWomenTopCollectionComponent( getSession().getSessionContext(), attributeValues );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.creditNoteAmount</code> attribute.
	 * @return the creditNoteAmount - Credit Note Amount of the RMA
	 */
	public String getCreditNoteAmount(final SessionContext ctx, final ReturnRequest item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.CREDITNOTEAMOUNT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.creditNoteAmount</code> attribute.
	 * @return the creditNoteAmount - Credit Note Amount of the RMA
	 */
	public String getCreditNoteAmount(final ReturnRequest item)
	{
		return getCreditNoteAmount( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.creditNoteAmount</code> attribute. 
	 * @param value the creditNoteAmount - Credit Note Amount of the RMA
	 */
	public void setCreditNoteAmount(final SessionContext ctx, final ReturnRequest item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.CREDITNOTEAMOUNT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.creditNoteAmount</code> attribute. 
	 * @param value the creditNoteAmount - Credit Note Amount of the RMA
	 */
	public void setCreditNoteAmount(final ReturnRequest item, final String value)
	{
		setCreditNoteAmount( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.creditNoteNumber</code> attribute.
	 * @return the creditNoteNumber - Credit Note Number of the RMA
	 */
	public String getCreditNoteNumber(final SessionContext ctx, final ReturnRequest item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.CREDITNOTENUMBER);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.creditNoteNumber</code> attribute.
	 * @return the creditNoteNumber - Credit Note Number of the RMA
	 */
	public String getCreditNoteNumber(final ReturnRequest item)
	{
		return getCreditNoteNumber( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.creditNoteNumber</code> attribute. 
	 * @param value the creditNoteNumber - Credit Note Number of the RMA
	 */
	public void setCreditNoteNumber(final SessionContext ctx, final ReturnRequest item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.CREDITNOTENUMBER,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.creditNoteNumber</code> attribute. 
	 * @param value the creditNoteNumber - Credit Note Number of the RMA
	 */
	public void setCreditNoteNumber(final ReturnRequest item, final String value)
	{
		setCreditNoteNumber( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.crmStatusFlag</code> attribute.
	 * @return the crmStatusFlag
	 */
	public Boolean isCrmStatusFlag(final SessionContext ctx, final Customer item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.CRMSTATUSFLAG);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.crmStatusFlag</code> attribute.
	 * @return the crmStatusFlag
	 */
	public Boolean isCrmStatusFlag(final Customer item)
	{
		return isCrmStatusFlag( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.crmStatusFlag</code> attribute. 
	 * @return the crmStatusFlag
	 */
	public boolean isCrmStatusFlagAsPrimitive(final SessionContext ctx, final Customer item)
	{
		Boolean value = isCrmStatusFlag( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.crmStatusFlag</code> attribute. 
	 * @return the crmStatusFlag
	 */
	public boolean isCrmStatusFlagAsPrimitive(final Customer item)
	{
		return isCrmStatusFlagAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.crmStatusFlag</code> attribute. 
	 * @param value the crmStatusFlag
	 */
	public void setCrmStatusFlag(final SessionContext ctx, final Customer item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.CRMSTATUSFLAG,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.crmStatusFlag</code> attribute. 
	 * @param value the crmStatusFlag
	 */
	public void setCrmStatusFlag(final Customer item, final Boolean value)
	{
		setCrmStatusFlag( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.crmStatusFlag</code> attribute. 
	 * @param value the crmStatusFlag
	 */
	public void setCrmStatusFlag(final SessionContext ctx, final Customer item, final boolean value)
	{
		setCrmStatusFlag( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.crmStatusFlag</code> attribute. 
	 * @param value the crmStatusFlag
	 */
	public void setCrmStatusFlag(final Customer item, final boolean value)
	{
		setCrmStatusFlag( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Order.csAgentId</code> attribute.
	 * @return the csAgentId - To store CS Agent ID.
	 */
	public String getCsAgentId(final SessionContext ctx, final Order item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Order.CSAGENTID);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Order.csAgentId</code> attribute.
	 * @return the csAgentId - To store CS Agent ID.
	 */
	public String getCsAgentId(final Order item)
	{
		return getCsAgentId( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Order.csAgentId</code> attribute. 
	 * @param value the csAgentId - To store CS Agent ID.
	 */
	public void setCsAgentId(final SessionContext ctx, final Order item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Order.CSAGENTID,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Order.csAgentId</code> attribute. 
	 * @param value the csAgentId - To store CS Agent ID.
	 */
	public void setCsAgentId(final Order item, final String value)
	{
		setCsAgentId( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.csTicket</code> attribute.
	 * @return the csTicket - CS Ticket Associated with Return Request
	 */
	public CsTicket getCsTicket(final SessionContext ctx, final ReturnRequest item)
	{
		return (CsTicket)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.CSTICKET);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.csTicket</code> attribute.
	 * @return the csTicket - CS Ticket Associated with Return Request
	 */
	public CsTicket getCsTicket(final ReturnRequest item)
	{
		return getCsTicket( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.csTicket</code> attribute. 
	 * @param value the csTicket - CS Ticket Associated with Return Request
	 */
	public void setCsTicket(final SessionContext ctx, final ReturnRequest item, final CsTicket value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.CSTICKET,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.csTicket</code> attribute. 
	 * @param value the csTicket - CS Ticket Associated with Return Request
	 */
	public void setCsTicket(final ReturnRequest item, final CsTicket value)
	{
		setCsTicket( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>BaseStore.customerCareCreditsLimit</code> attribute.
	 * @return the customerCareCreditsLimit - Maximum customer credits limit for wallet.
	 */
	public Double getCustomerCareCreditsLimit(final SessionContext ctx, final BaseStore item)
	{
		return (Double)item.getProperty( ctx, SslCoreConstants.Attributes.BaseStore.CUSTOMERCARECREDITSLIMIT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>BaseStore.customerCareCreditsLimit</code> attribute.
	 * @return the customerCareCreditsLimit - Maximum customer credits limit for wallet.
	 */
	public Double getCustomerCareCreditsLimit(final BaseStore item)
	{
		return getCustomerCareCreditsLimit( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>BaseStore.customerCareCreditsLimit</code> attribute. 
	 * @return the customerCareCreditsLimit - Maximum customer credits limit for wallet.
	 */
	public double getCustomerCareCreditsLimitAsPrimitive(final SessionContext ctx, final BaseStore item)
	{
		Double value = getCustomerCareCreditsLimit( ctx,item );
		return value != null ? value.doubleValue() : 0.0d;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>BaseStore.customerCareCreditsLimit</code> attribute. 
	 * @return the customerCareCreditsLimit - Maximum customer credits limit for wallet.
	 */
	public double getCustomerCareCreditsLimitAsPrimitive(final BaseStore item)
	{
		return getCustomerCareCreditsLimitAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>BaseStore.customerCareCreditsLimit</code> attribute. 
	 * @param value the customerCareCreditsLimit - Maximum customer credits limit for wallet.
	 */
	public void setCustomerCareCreditsLimit(final SessionContext ctx, final BaseStore item, final Double value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.BaseStore.CUSTOMERCARECREDITSLIMIT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>BaseStore.customerCareCreditsLimit</code> attribute. 
	 * @param value the customerCareCreditsLimit - Maximum customer credits limit for wallet.
	 */
	public void setCustomerCareCreditsLimit(final BaseStore item, final Double value)
	{
		setCustomerCareCreditsLimit( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>BaseStore.customerCareCreditsLimit</code> attribute. 
	 * @param value the customerCareCreditsLimit - Maximum customer credits limit for wallet.
	 */
	public void setCustomerCareCreditsLimit(final SessionContext ctx, final BaseStore item, final double value)
	{
		setCustomerCareCreditsLimit( ctx, item, Double.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>BaseStore.customerCareCreditsLimit</code> attribute. 
	 * @param value the customerCareCreditsLimit - Maximum customer credits limit for wallet.
	 */
	public void setCustomerCareCreditsLimit(final BaseStore item, final double value)
	{
		setCustomerCareCreditsLimit( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.customerFit</code> attribute.
	 * @return the customerFit
	 */
	public List<SSLCustomerFit> getCustomerFit(final SessionContext ctx, final Customer item)
	{
		List<SSLCustomerFit> coll = (List<SSLCustomerFit>)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.CUSTOMERFIT);
		return coll != null ? coll : Collections.EMPTY_LIST;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.customerFit</code> attribute.
	 * @return the customerFit
	 */
	public List<SSLCustomerFit> getCustomerFit(final Customer item)
	{
		return getCustomerFit( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.customerFit</code> attribute. 
	 * @param value the customerFit
	 */
	public void setCustomerFit(final SessionContext ctx, final Customer item, final List<SSLCustomerFit> value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.CUSTOMERFIT,value == null || !value.isEmpty() ? value : null );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.customerFit</code> attribute. 
	 * @param value the customerFit
	 */
	public void setCustomerFit(final Customer item, final List<SSLCustomerFit> value)
	{
		setCustomerFit( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>BaseSite.customerIssueCategory</code> attribute.
	 * @return the customerIssueCategory - Defines all types of customer issues.
	 */
	public List<String> getCustomerIssueCategory(final SessionContext ctx, final BaseSite item)
	{
		List<String> coll = (List<String>)item.getProperty( ctx, SslCoreConstants.Attributes.BaseSite.CUSTOMERISSUECATEGORY);
		return coll != null ? coll : Collections.EMPTY_LIST;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>BaseSite.customerIssueCategory</code> attribute.
	 * @return the customerIssueCategory - Defines all types of customer issues.
	 */
	public List<String> getCustomerIssueCategory(final BaseSite item)
	{
		return getCustomerIssueCategory( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>BaseSite.customerIssueCategory</code> attribute. 
	 * @param value the customerIssueCategory - Defines all types of customer issues.
	 */
	public void setCustomerIssueCategory(final SessionContext ctx, final BaseSite item, final List<String> value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.BaseSite.CUSTOMERISSUECATEGORY,value == null || !value.isEmpty() ? value : null );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>BaseSite.customerIssueCategory</code> attribute. 
	 * @param value the customerIssueCategory - Defines all types of customer issues.
	 */
	public void setCustomerIssueCategory(final BaseSite item, final List<String> value)
	{
		setCustomerIssueCategory( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.customerNotification</code> attribute.
	 * @return the customerNotification
	 */
	public Collection<NotifyCustomer> getCustomerNotification(final SessionContext ctx, final Product item)
	{
		return SSLPRODUCTCUSTOMERNOTIFICATIONRELCUSTOMERNOTIFICATIONHANDLER.getValues( ctx, item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.customerNotification</code> attribute.
	 * @return the customerNotification
	 */
	public Collection<NotifyCustomer> getCustomerNotification(final Product item)
	{
		return getCustomerNotification( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.customerNotification</code> attribute. 
	 * @param value the customerNotification
	 */
	public void setCustomerNotification(final SessionContext ctx, final Product item, final Collection<NotifyCustomer> value)
	{
		SSLPRODUCTCUSTOMERNOTIFICATIONRELCUSTOMERNOTIFICATIONHANDLER.setValues( ctx, item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.customerNotification</code> attribute. 
	 * @param value the customerNotification
	 */
	public void setCustomerNotification(final Product item, final Collection<NotifyCustomer> value)
	{
		setCustomerNotification( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Adds <code>value</code> to customerNotification. 
	 * @param value the item to add to customerNotification
	 */
	public void addToCustomerNotification(final SessionContext ctx, final Product item, final NotifyCustomer value)
	{
		SSLPRODUCTCUSTOMERNOTIFICATIONRELCUSTOMERNOTIFICATIONHANDLER.addValue( ctx, item, value );
	}
	
	/**
	 * <i>Generated method</i> - Adds <code>value</code> to customerNotification. 
	 * @param value the item to add to customerNotification
	 */
	public void addToCustomerNotification(final Product item, final NotifyCustomer value)
	{
		addToCustomerNotification( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Removes <code>value</code> from customerNotification. 
	 * @param value the item to remove from customerNotification
	 */
	public void removeFromCustomerNotification(final SessionContext ctx, final Product item, final NotifyCustomer value)
	{
		SSLPRODUCTCUSTOMERNOTIFICATIONRELCUSTOMERNOTIFICATIONHANDLER.removeValue( ctx, item, value );
	}
	
	/**
	 * <i>Generated method</i> - Removes <code>value</code> from customerNotification. 
	 * @param value the item to remove from customerNotification
	 */
	public void removeFromCustomerNotification(final Product item, final NotifyCustomer value)
	{
		removeFromCustomerNotification( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Cart.customerService</code> attribute.
	 * @return the customerService - To store the reason for Abandoned Cart.
	 */
	public String getCustomerService(final SessionContext ctx, final Cart item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Cart.CUSTOMERSERVICE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Cart.customerService</code> attribute.
	 * @return the customerService - To store the reason for Abandoned Cart.
	 */
	public String getCustomerService(final Cart item)
	{
		return getCustomerService( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Cart.customerService</code> attribute. 
	 * @param value the customerService - To store the reason for Abandoned Cart.
	 */
	public void setCustomerService(final SessionContext ctx, final Cart item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Cart.CUSTOMERSERVICE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Cart.customerService</code> attribute. 
	 * @param value the customerService - To store the reason for Abandoned Cart.
	 */
	public void setCustomerService(final Cart item, final String value)
	{
		setCustomerService( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.damagedZoneQuantity</code> attribute.
	 * @return the damagedZoneQuantity - Damaged Zone Quantity
	 */
	public Long getDamagedZoneQuantity(final SessionContext ctx, final ReturnEntry item)
	{
		return (Long)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnEntry.DAMAGEDZONEQUANTITY);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.damagedZoneQuantity</code> attribute.
	 * @return the damagedZoneQuantity - Damaged Zone Quantity
	 */
	public Long getDamagedZoneQuantity(final ReturnEntry item)
	{
		return getDamagedZoneQuantity( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.damagedZoneQuantity</code> attribute. 
	 * @return the damagedZoneQuantity - Damaged Zone Quantity
	 */
	public long getDamagedZoneQuantityAsPrimitive(final SessionContext ctx, final ReturnEntry item)
	{
		Long value = getDamagedZoneQuantity( ctx,item );
		return value != null ? value.longValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.damagedZoneQuantity</code> attribute. 
	 * @return the damagedZoneQuantity - Damaged Zone Quantity
	 */
	public long getDamagedZoneQuantityAsPrimitive(final ReturnEntry item)
	{
		return getDamagedZoneQuantityAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.damagedZoneQuantity</code> attribute. 
	 * @param value the damagedZoneQuantity - Damaged Zone Quantity
	 */
	public void setDamagedZoneQuantity(final SessionContext ctx, final ReturnEntry item, final Long value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnEntry.DAMAGEDZONEQUANTITY,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.damagedZoneQuantity</code> attribute. 
	 * @param value the damagedZoneQuantity - Damaged Zone Quantity
	 */
	public void setDamagedZoneQuantity(final ReturnEntry item, final Long value)
	{
		setDamagedZoneQuantity( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.damagedZoneQuantity</code> attribute. 
	 * @param value the damagedZoneQuantity - Damaged Zone Quantity
	 */
	public void setDamagedZoneQuantity(final SessionContext ctx, final ReturnEntry item, final long value)
	{
		setDamagedZoneQuantity( ctx, item, Long.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.damagedZoneQuantity</code> attribute. 
	 * @param value the damagedZoneQuantity - Damaged Zone Quantity
	 */
	public void setDamagedZoneQuantity(final ReturnEntry item, final long value)
	{
		setDamagedZoneQuantity( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.dateOfBirth</code> attribute.
	 * @return the dateOfBirth - Date of Birth
	 */
	public Date getDateOfBirth(final SessionContext ctx, final Customer item)
	{
		return (Date)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.DATEOFBIRTH);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.dateOfBirth</code> attribute.
	 * @return the dateOfBirth - Date of Birth
	 */
	public Date getDateOfBirth(final Customer item)
	{
		return getDateOfBirth( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.dateOfBirth</code> attribute. 
	 * @param value the dateOfBirth - Date of Birth
	 */
	public void setDateOfBirth(final SessionContext ctx, final Customer item, final Date value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.DATEOFBIRTH,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.dateOfBirth</code> attribute. 
	 * @param value the dateOfBirth - Date of Birth
	 */
	public void setDateOfBirth(final Customer item, final Date value)
	{
		setDateOfBirth( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.dealOfTheDay</code> attribute.
	 * @return the dealOfTheDay - To indicate the deal of the day product
	 */
	public Boolean isDealOfTheDay(final SessionContext ctx, final Product item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Product.DEALOFTHEDAY);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.dealOfTheDay</code> attribute.
	 * @return the dealOfTheDay - To indicate the deal of the day product
	 */
	public Boolean isDealOfTheDay(final Product item)
	{
		return isDealOfTheDay( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.dealOfTheDay</code> attribute. 
	 * @return the dealOfTheDay - To indicate the deal of the day product
	 */
	public boolean isDealOfTheDayAsPrimitive(final SessionContext ctx, final Product item)
	{
		Boolean value = isDealOfTheDay( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.dealOfTheDay</code> attribute. 
	 * @return the dealOfTheDay - To indicate the deal of the day product
	 */
	public boolean isDealOfTheDayAsPrimitive(final Product item)
	{
		return isDealOfTheDayAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.dealOfTheDay</code> attribute. 
	 * @param value the dealOfTheDay - To indicate the deal of the day product
	 */
	public void setDealOfTheDay(final SessionContext ctx, final Product item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.DEALOFTHEDAY,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.dealOfTheDay</code> attribute. 
	 * @param value the dealOfTheDay - To indicate the deal of the day product
	 */
	public void setDealOfTheDay(final Product item, final Boolean value)
	{
		setDealOfTheDay( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.dealOfTheDay</code> attribute. 
	 * @param value the dealOfTheDay - To indicate the deal of the day product
	 */
	public void setDealOfTheDay(final SessionContext ctx, final Product item, final boolean value)
	{
		setDealOfTheDay( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.dealOfTheDay</code> attribute. 
	 * @param value the dealOfTheDay - To indicate the deal of the day product
	 */
	public void setDealOfTheDay(final Product item, final boolean value)
	{
		setDealOfTheDay( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.deliveryCharge</code> attribute.
	 * @return the deliveryCharge - Delivery Charges
	 */
	public String getDeliveryCharge(final SessionContext ctx, final ReturnRequest item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.DELIVERYCHARGE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.deliveryCharge</code> attribute.
	 * @return the deliveryCharge - Delivery Charges
	 */
	public String getDeliveryCharge(final ReturnRequest item)
	{
		return getDeliveryCharge( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.deliveryCharge</code> attribute. 
	 * @param value the deliveryCharge - Delivery Charges
	 */
	public void setDeliveryCharge(final SessionContext ctx, final ReturnRequest item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.DELIVERYCHARGE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.deliveryCharge</code> attribute. 
	 * @param value the deliveryCharge - Delivery Charges
	 */
	public void setDeliveryCharge(final ReturnRequest item, final String value)
	{
		setDeliveryCharge( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.deliveryPinCodes</code> attribute.
	 * @return the deliveryPinCodes - List of all the available pincodes for the product
	 */
	public List<PincodesList> getDeliveryPinCodes(final SessionContext ctx, final Product item)
	{
		List<PincodesList> coll = (List<PincodesList>)item.getProperty( ctx, SslCoreConstants.Attributes.Product.DELIVERYPINCODES);
		return coll != null ? coll : Collections.EMPTY_LIST;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.deliveryPinCodes</code> attribute.
	 * @return the deliveryPinCodes - List of all the available pincodes for the product
	 */
	public List<PincodesList> getDeliveryPinCodes(final Product item)
	{
		return getDeliveryPinCodes( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.deliveryPinCodes</code> attribute. 
	 * @param value the deliveryPinCodes - List of all the available pincodes for the product
	 */
	public void setDeliveryPinCodes(final SessionContext ctx, final Product item, final List<PincodesList> value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.DELIVERYPINCODES,value == null || !value.isEmpty() ? value : null );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.deliveryPinCodes</code> attribute. 
	 * @param value the deliveryPinCodes - List of all the available pincodes for the product
	 */
	public void setDeliveryPinCodes(final Product item, final List<PincodesList> value)
	{
		setDeliveryPinCodes( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.departmentCode</code> attribute.
	 * @return the departmentCode - To indicate DEPT
	 */
	public String getDepartmentCode(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.DEPARTMENTCODE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.departmentCode</code> attribute.
	 * @return the departmentCode - To indicate DEPT
	 */
	public String getDepartmentCode(final Product item)
	{
		return getDepartmentCode( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.departmentCode</code> attribute. 
	 * @param value the departmentCode - To indicate DEPT
	 */
	public void setDepartmentCode(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.DEPARTMENTCODE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.departmentCode</code> attribute. 
	 * @param value the departmentCode - To indicate DEPT
	 */
	public void setDepartmentCode(final Product item, final String value)
	{
		setDepartmentCode( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.departmentName</code> attribute.
	 * @return the departmentName - To indicate DEPT_NAME
	 */
	public String getDepartmentName(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.DEPARTMENTNAME);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.departmentName</code> attribute.
	 * @return the departmentName - To indicate DEPT_NAME
	 */
	public String getDepartmentName(final Product item)
	{
		return getDepartmentName( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.departmentName</code> attribute. 
	 * @param value the departmentName - To indicate DEPT_NAME
	 */
	public void setDepartmentName(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.DEPARTMENTNAME,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.departmentName</code> attribute. 
	 * @param value the departmentName - To indicate DEPT_NAME
	 */
	public void setDepartmentName(final Product item, final String value)
	{
		setDepartmentName( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.detailedDescription</code> attribute.
	 * @return the detailedDescription
	 */
	public String getDetailedDescription(final SessionContext ctx, final Category item)
	{
		if( ctx == null || ctx.getLanguage() == null )
		{
			throw new JaloInvalidParameterException("GeneratedCategory.getDetailedDescription requires a session language", 0 );
		}
		return (String)item.getLocalizedProperty( ctx, SslCoreConstants.Attributes.Category.DETAILEDDESCRIPTION);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.detailedDescription</code> attribute.
	 * @return the detailedDescription
	 */
	public String getDetailedDescription(final Category item)
	{
		return getDetailedDescription( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.detailedDescription</code> attribute. 
	 * @return the localized detailedDescription
	 */
	public Map<Language,String> getAllDetailedDescription(final SessionContext ctx, final Category item)
	{
		return (Map<Language,String>)item.getAllLocalizedProperties(ctx,SslCoreConstants.Attributes.Category.DETAILEDDESCRIPTION,C2LManager.getInstance().getAllLanguages());
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.detailedDescription</code> attribute. 
	 * @return the localized detailedDescription
	 */
	public Map<Language,String> getAllDetailedDescription(final Category item)
	{
		return getAllDetailedDescription( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.detailedDescription</code> attribute. 
	 * @param value the detailedDescription
	 */
	public void setDetailedDescription(final SessionContext ctx, final Category item, final String value)
	{
		if( ctx == null || ctx.getLanguage() == null )
		{
			throw new JaloInvalidParameterException("GeneratedCategory.setDetailedDescription requires a session language", 0 );
		}
		item.setLocalizedProperty(ctx, SslCoreConstants.Attributes.Category.DETAILEDDESCRIPTION,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.detailedDescription</code> attribute. 
	 * @param value the detailedDescription
	 */
	public void setDetailedDescription(final Category item, final String value)
	{
		setDetailedDescription( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.detailedDescription</code> attribute. 
	 * @param value the detailedDescription
	 */
	public void setAllDetailedDescription(final SessionContext ctx, final Category item, final Map<Language,String> value)
	{
		item.setAllLocalizedProperties(ctx,SslCoreConstants.Attributes.Category.DETAILEDDESCRIPTION,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.detailedDescription</code> attribute. 
	 * @param value the detailedDescription
	 */
	public void setAllDetailedDescription(final Category item, final Map<Language,String> value)
	{
		setAllDetailedDescription( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.disclaimer</code> attribute.
	 * @return the disclaimer - Product level disclaimer
	 */
	public String getDisclaimer(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.DISCLAIMER);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.disclaimer</code> attribute.
	 * @return the disclaimer - Product level disclaimer
	 */
	public String getDisclaimer(final Product item)
	{
		return getDisclaimer( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.disclaimer</code> attribute. 
	 * @param value the disclaimer - Product level disclaimer
	 */
	public void setDisclaimer(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.DISCLAIMER,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.disclaimer</code> attribute. 
	 * @param value the disclaimer - Product level disclaimer
	 */
	public void setDisclaimer(final Product item, final String value)
	{
		setDisclaimer( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.dob</code> attribute.
	 * @return the dob
	 */
	public Date getDob(final SessionContext ctx, final Customer item)
	{
		return (Date)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.DOB);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.dob</code> attribute.
	 * @return the dob
	 */
	public Date getDob(final Customer item)
	{
		return getDob( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.dob</code> attribute. 
	 * @param value the dob
	 */
	public void setDob(final SessionContext ctx, final Customer item, final Date value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.DOB,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.dob</code> attribute. 
	 * @param value the dob
	 */
	public void setDob(final Customer item, final Date value)
	{
		setDob( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Vendor.dropShip</code> attribute.
	 * @return the dropShip - Identify a vendor can drop ship
	 */
	public Boolean isDropShip(final SessionContext ctx, final Vendor item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Vendor.DROPSHIP);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Vendor.dropShip</code> attribute.
	 * @return the dropShip - Identify a vendor can drop ship
	 */
	public Boolean isDropShip(final Vendor item)
	{
		return isDropShip( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Vendor.dropShip</code> attribute. 
	 * @return the dropShip - Identify a vendor can drop ship
	 */
	public boolean isDropShipAsPrimitive(final SessionContext ctx, final Vendor item)
	{
		Boolean value = isDropShip( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Vendor.dropShip</code> attribute. 
	 * @return the dropShip - Identify a vendor can drop ship
	 */
	public boolean isDropShipAsPrimitive(final Vendor item)
	{
		return isDropShipAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Vendor.dropShip</code> attribute. 
	 * @param value the dropShip - Identify a vendor can drop ship
	 */
	public void setDropShip(final SessionContext ctx, final Vendor item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Vendor.DROPSHIP,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Vendor.dropShip</code> attribute. 
	 * @param value the dropShip - Identify a vendor can drop ship
	 */
	public void setDropShip(final Vendor item, final Boolean value)
	{
		setDropShip( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Vendor.dropShip</code> attribute. 
	 * @param value the dropShip - Identify a vendor can drop ship
	 */
	public void setDropShip(final SessionContext ctx, final Vendor item, final boolean value)
	{
		setDropShip( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Vendor.dropShip</code> attribute. 
	 * @param value the dropShip - Identify a vendor can drop ship
	 */
	public void setDropShip(final Vendor item, final boolean value)
	{
		setDropShip( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.eGift</code> attribute.
	 * @return the eGift - E-Gift
	 */
	public Boolean isEGift(final SessionContext ctx, final Product item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Product.EGIFT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.eGift</code> attribute.
	 * @return the eGift - E-Gift
	 */
	public Boolean isEGift(final Product item)
	{
		return isEGift( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.eGift</code> attribute. 
	 * @return the eGift - E-Gift
	 */
	public boolean isEGiftAsPrimitive(final SessionContext ctx, final Product item)
	{
		Boolean value = isEGift( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.eGift</code> attribute. 
	 * @return the eGift - E-Gift
	 */
	public boolean isEGiftAsPrimitive(final Product item)
	{
		return isEGiftAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.eGift</code> attribute. 
	 * @param value the eGift - E-Gift
	 */
	public void setEGift(final SessionContext ctx, final Product item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.EGIFT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.eGift</code> attribute. 
	 * @param value the eGift - E-Gift
	 */
	public void setEGift(final Product item, final Boolean value)
	{
		setEGift( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.eGift</code> attribute. 
	 * @param value the eGift - E-Gift
	 */
	public void setEGift(final SessionContext ctx, final Product item, final boolean value)
	{
		setEGift( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.eGift</code> attribute. 
	 * @param value the eGift - E-Gift
	 */
	public void setEGift(final Product item, final boolean value)
	{
		setEGift( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.eGiftRecipientEmail</code> attribute.
	 * @return the eGiftRecipientEmail
	 */
	public String getEGiftRecipientEmail(final SessionContext ctx, final AbstractOrder item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrder.EGIFTRECIPIENTEMAIL);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.eGiftRecipientEmail</code> attribute.
	 * @return the eGiftRecipientEmail
	 */
	public String getEGiftRecipientEmail(final AbstractOrder item)
	{
		return getEGiftRecipientEmail( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.eGiftRecipientEmail</code> attribute. 
	 * @param value the eGiftRecipientEmail
	 */
	public void setEGiftRecipientEmail(final SessionContext ctx, final AbstractOrder item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrder.EGIFTRECIPIENTEMAIL,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.eGiftRecipientEmail</code> attribute. 
	 * @param value the eGiftRecipientEmail
	 */
	public void setEGiftRecipientEmail(final AbstractOrder item, final String value)
	{
		setEGiftRecipientEmail( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.eGiftRecipientFirstName</code> attribute.
	 * @return the eGiftRecipientFirstName
	 */
	public String getEGiftRecipientFirstName(final SessionContext ctx, final AbstractOrder item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrder.EGIFTRECIPIENTFIRSTNAME);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.eGiftRecipientFirstName</code> attribute.
	 * @return the eGiftRecipientFirstName
	 */
	public String getEGiftRecipientFirstName(final AbstractOrder item)
	{
		return getEGiftRecipientFirstName( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.eGiftRecipientFirstName</code> attribute. 
	 * @param value the eGiftRecipientFirstName
	 */
	public void setEGiftRecipientFirstName(final SessionContext ctx, final AbstractOrder item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrder.EGIFTRECIPIENTFIRSTNAME,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.eGiftRecipientFirstName</code> attribute. 
	 * @param value the eGiftRecipientFirstName
	 */
	public void setEGiftRecipientFirstName(final AbstractOrder item, final String value)
	{
		setEGiftRecipientFirstName( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.eGiftRecipientLastName</code> attribute.
	 * @return the eGiftRecipientLastName
	 */
	public String getEGiftRecipientLastName(final SessionContext ctx, final AbstractOrder item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrder.EGIFTRECIPIENTLASTNAME);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.eGiftRecipientLastName</code> attribute.
	 * @return the eGiftRecipientLastName
	 */
	public String getEGiftRecipientLastName(final AbstractOrder item)
	{
		return getEGiftRecipientLastName( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.eGiftRecipientLastName</code> attribute. 
	 * @param value the eGiftRecipientLastName
	 */
	public void setEGiftRecipientLastName(final SessionContext ctx, final AbstractOrder item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrder.EGIFTRECIPIENTLASTNAME,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.eGiftRecipientLastName</code> attribute. 
	 * @param value the eGiftRecipientLastName
	 */
	public void setEGiftRecipientLastName(final AbstractOrder item, final String value)
	{
		setEGiftRecipientLastName( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.eventDate</code> attribute.
	 * @return the eventDate - Event Date
	 */
	public Date getEventDate(final SessionContext ctx, final PriceRow item)
	{
		return (Date)item.getProperty( ctx, SslCoreConstants.Attributes.PriceRow.EVENTDATE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.eventDate</code> attribute.
	 * @return the eventDate - Event Date
	 */
	public Date getEventDate(final PriceRow item)
	{
		return getEventDate( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.eventDate</code> attribute. 
	 * @param value the eventDate - Event Date
	 */
	public void setEventDate(final SessionContext ctx, final PriceRow item, final Date value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.PriceRow.EVENTDATE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.eventDate</code> attribute. 
	 * @param value the eventDate - Event Date
	 */
	public void setEventDate(final PriceRow item, final Date value)
	{
		setEventDate( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.eventId</code> attribute.
	 * @return the eventId - Event Id
	 */
	public String getEventId(final SessionContext ctx, final PriceRow item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.PriceRow.EVENTID);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.eventId</code> attribute.
	 * @return the eventId - Event Id
	 */
	public String getEventId(final PriceRow item)
	{
		return getEventId( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.eventId</code> attribute. 
	 * @param value the eventId - Event Id
	 */
	public void setEventId(final SessionContext ctx, final PriceRow item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.PriceRow.EVENTID,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.eventId</code> attribute. 
	 * @param value the eventId - Event Id
	 */
	public void setEventId(final PriceRow item, final String value)
	{
		setEventId( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.exchangeOrder</code> attribute.
	 * @return the exchangeOrder - Exchange Order
	 */
	public Order getExchangeOrder(final SessionContext ctx, final ReturnRequest item)
	{
		return (Order)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.EXCHANGEORDER);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.exchangeOrder</code> attribute.
	 * @return the exchangeOrder - Exchange Order
	 */
	public Order getExchangeOrder(final ReturnRequest item)
	{
		return getExchangeOrder( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.exchangeOrder</code> attribute. 
	 * @param value the exchangeOrder - Exchange Order
	 */
	public void setExchangeOrder(final SessionContext ctx, final ReturnRequest item, final Order value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.EXCHANGEORDER,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.exchangeOrder</code> attribute. 
	 * @param value the exchangeOrder - Exchange Order
	 */
	public void setExchangeOrder(final ReturnRequest item, final Order value)
	{
		setExchangeOrder( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReplacementEntry.exchangeStockLevels</code> attribute.
	 * @return the exchangeStockLevels
	 */
	public Set<ExchangeStockLevel> getExchangeStockLevels(final SessionContext ctx, final ReplacementEntry item)
	{
		return (Set<ExchangeStockLevel>)REPLACEMENTENTRYSTOCKLEVELRELATIONEXCHANGESTOCKLEVELSHANDLER.getValues( ctx, item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReplacementEntry.exchangeStockLevels</code> attribute.
	 * @return the exchangeStockLevels
	 */
	public Set<ExchangeStockLevel> getExchangeStockLevels(final ReplacementEntry item)
	{
		return getExchangeStockLevels( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReplacementEntry.exchangeStockLevels</code> attribute. 
	 * @param value the exchangeStockLevels
	 */
	public void setExchangeStockLevels(final SessionContext ctx, final ReplacementEntry item, final Set<ExchangeStockLevel> value)
	{
		REPLACEMENTENTRYSTOCKLEVELRELATIONEXCHANGESTOCKLEVELSHANDLER.setValues( ctx, item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReplacementEntry.exchangeStockLevels</code> attribute. 
	 * @param value the exchangeStockLevels
	 */
	public void setExchangeStockLevels(final ReplacementEntry item, final Set<ExchangeStockLevel> value)
	{
		setExchangeStockLevels( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Adds <code>value</code> to exchangeStockLevels. 
	 * @param value the item to add to exchangeStockLevels
	 */
	public void addToExchangeStockLevels(final SessionContext ctx, final ReplacementEntry item, final ExchangeStockLevel value)
	{
		REPLACEMENTENTRYSTOCKLEVELRELATIONEXCHANGESTOCKLEVELSHANDLER.addValue( ctx, item, value );
	}
	
	/**
	 * <i>Generated method</i> - Adds <code>value</code> to exchangeStockLevels. 
	 * @param value the item to add to exchangeStockLevels
	 */
	public void addToExchangeStockLevels(final ReplacementEntry item, final ExchangeStockLevel value)
	{
		addToExchangeStockLevels( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Removes <code>value</code> from exchangeStockLevels. 
	 * @param value the item to remove from exchangeStockLevels
	 */
	public void removeFromExchangeStockLevels(final SessionContext ctx, final ReplacementEntry item, final ExchangeStockLevel value)
	{
		REPLACEMENTENTRYSTOCKLEVELRELATIONEXCHANGESTOCKLEVELSHANDLER.removeValue( ctx, item, value );
	}
	
	/**
	 * <i>Generated method</i> - Removes <code>value</code> from exchangeStockLevels. 
	 * @param value the item to remove from exchangeStockLevels
	 */
	public void removeFromExchangeStockLevels(final ReplacementEntry item, final ExchangeStockLevel value)
	{
		removeFromExchangeStockLevels( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.exclusive</code> attribute.
	 * @return the exclusive - To indicate exclusive product
	 */
	public Boolean isExclusive(final SessionContext ctx, final Product item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Product.EXCLUSIVE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.exclusive</code> attribute.
	 * @return the exclusive - To indicate exclusive product
	 */
	public Boolean isExclusive(final Product item)
	{
		return isExclusive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.exclusive</code> attribute. 
	 * @return the exclusive - To indicate exclusive product
	 */
	public boolean isExclusiveAsPrimitive(final SessionContext ctx, final Product item)
	{
		Boolean value = isExclusive( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.exclusive</code> attribute. 
	 * @return the exclusive - To indicate exclusive product
	 */
	public boolean isExclusiveAsPrimitive(final Product item)
	{
		return isExclusiveAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.exclusive</code> attribute. 
	 * @param value the exclusive - To indicate exclusive product
	 */
	public void setExclusive(final SessionContext ctx, final Product item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.EXCLUSIVE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.exclusive</code> attribute. 
	 * @param value the exclusive - To indicate exclusive product
	 */
	public void setExclusive(final Product item, final Boolean value)
	{
		setExclusive( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.exclusive</code> attribute. 
	 * @param value the exclusive - To indicate exclusive product
	 */
	public void setExclusive(final SessionContext ctx, final Product item, final boolean value)
	{
		setExclusive( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.exclusive</code> attribute. 
	 * @param value the exclusive - To indicate exclusive product
	 */
	public void setExclusive(final Product item, final boolean value)
	{
		setExclusive( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.fccCardNumber</code> attribute.
	 * @return the fccCardNumber
	 */
	public String getFccCardNumber(final SessionContext ctx, final AbstractOrder item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrder.FCCCARDNUMBER);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.fccCardNumber</code> attribute.
	 * @return the fccCardNumber
	 */
	public String getFccCardNumber(final AbstractOrder item)
	{
		return getFccCardNumber( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.fccCardNumber</code> attribute. 
	 * @param value the fccCardNumber
	 */
	public void setFccCardNumber(final SessionContext ctx, final AbstractOrder item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrder.FCCCARDNUMBER,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.fccCardNumber</code> attribute. 
	 * @param value the fccCardNumber
	 */
	public void setFccCardNumber(final AbstractOrder item, final String value)
	{
		setFccCardNumber( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.featureComponents</code> attribute.
	 * @return the featureComponents - List of Promotions for this Category
	 */
	public List<CMSMediaParagraphLinkComponent> getFeatureComponents(final SessionContext ctx, final Category item)
	{
		List<CMSMediaParagraphLinkComponent> coll = (List<CMSMediaParagraphLinkComponent>)item.getProperty( ctx, SslCoreConstants.Attributes.Category.FEATURECOMPONENTS);
		return coll != null ? coll : Collections.EMPTY_LIST;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.featureComponents</code> attribute.
	 * @return the featureComponents - List of Promotions for this Category
	 */
	public List<CMSMediaParagraphLinkComponent> getFeatureComponents(final Category item)
	{
		return getFeatureComponents( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.featureComponents</code> attribute. 
	 * @param value the featureComponents - List of Promotions for this Category
	 */
	public void setFeatureComponents(final SessionContext ctx, final Category item, final List<CMSMediaParagraphLinkComponent> value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.FEATURECOMPONENTS,value == null || !value.isEmpty() ? value : null );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.featureComponents</code> attribute. 
	 * @param value the featureComponents - List of Promotions for this Category
	 */
	public void setFeatureComponents(final Category item, final List<CMSMediaParagraphLinkComponent> value)
	{
		setFeatureComponents( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.finalRefundAmount</code> attribute.
	 * @return the finalRefundAmount - Damaged Zone Quantity
	 */
	public Double getFinalRefundAmount(final SessionContext ctx, final ReturnEntry item)
	{
		return (Double)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnEntry.FINALREFUNDAMOUNT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.finalRefundAmount</code> attribute.
	 * @return the finalRefundAmount - Damaged Zone Quantity
	 */
	public Double getFinalRefundAmount(final ReturnEntry item)
	{
		return getFinalRefundAmount( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.finalRefundAmount</code> attribute. 
	 * @return the finalRefundAmount - Damaged Zone Quantity
	 */
	public double getFinalRefundAmountAsPrimitive(final SessionContext ctx, final ReturnEntry item)
	{
		Double value = getFinalRefundAmount( ctx,item );
		return value != null ? value.doubleValue() : 0.0d;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.finalRefundAmount</code> attribute. 
	 * @return the finalRefundAmount - Damaged Zone Quantity
	 */
	public double getFinalRefundAmountAsPrimitive(final ReturnEntry item)
	{
		return getFinalRefundAmountAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.finalRefundAmount</code> attribute. 
	 * @param value the finalRefundAmount - Damaged Zone Quantity
	 */
	public void setFinalRefundAmount(final SessionContext ctx, final ReturnEntry item, final Double value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnEntry.FINALREFUNDAMOUNT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.finalRefundAmount</code> attribute. 
	 * @param value the finalRefundAmount - Damaged Zone Quantity
	 */
	public void setFinalRefundAmount(final ReturnEntry item, final Double value)
	{
		setFinalRefundAmount( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.finalRefundAmount</code> attribute. 
	 * @param value the finalRefundAmount - Damaged Zone Quantity
	 */
	public void setFinalRefundAmount(final SessionContext ctx, final ReturnEntry item, final double value)
	{
		setFinalRefundAmount( ctx, item, Double.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.finalRefundAmount</code> attribute. 
	 * @param value the finalRefundAmount - Damaged Zone Quantity
	 */
	public void setFinalRefundAmount(final ReturnEntry item, final double value)
	{
		setFinalRefundAmount( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.finalReturnQuantity</code> attribute.
	 * @return the finalReturnQuantity - Inventory Zone Quantity
	 */
	public Long getFinalReturnQuantity(final SessionContext ctx, final ReturnEntry item)
	{
		return (Long)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnEntry.FINALRETURNQUANTITY);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.finalReturnQuantity</code> attribute.
	 * @return the finalReturnQuantity - Inventory Zone Quantity
	 */
	public Long getFinalReturnQuantity(final ReturnEntry item)
	{
		return getFinalReturnQuantity( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.finalReturnQuantity</code> attribute. 
	 * @return the finalReturnQuantity - Inventory Zone Quantity
	 */
	public long getFinalReturnQuantityAsPrimitive(final SessionContext ctx, final ReturnEntry item)
	{
		Long value = getFinalReturnQuantity( ctx,item );
		return value != null ? value.longValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.finalReturnQuantity</code> attribute. 
	 * @return the finalReturnQuantity - Inventory Zone Quantity
	 */
	public long getFinalReturnQuantityAsPrimitive(final ReturnEntry item)
	{
		return getFinalReturnQuantityAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.finalReturnQuantity</code> attribute. 
	 * @param value the finalReturnQuantity - Inventory Zone Quantity
	 */
	public void setFinalReturnQuantity(final SessionContext ctx, final ReturnEntry item, final Long value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnEntry.FINALRETURNQUANTITY,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.finalReturnQuantity</code> attribute. 
	 * @param value the finalReturnQuantity - Inventory Zone Quantity
	 */
	public void setFinalReturnQuantity(final ReturnEntry item, final Long value)
	{
		setFinalReturnQuantity( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.finalReturnQuantity</code> attribute. 
	 * @param value the finalReturnQuantity - Inventory Zone Quantity
	 */
	public void setFinalReturnQuantity(final SessionContext ctx, final ReturnEntry item, final long value)
	{
		setFinalReturnQuantity( ctx, item, Long.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.finalReturnQuantity</code> attribute. 
	 * @param value the finalReturnQuantity - Inventory Zone Quantity
	 */
	public void setFinalReturnQuantity(final ReturnEntry item, final long value)
	{
		setFinalReturnQuantity( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Order.firstOrderFlag</code> attribute.
	 * @return the firstOrderFlag - if customer is new and this order is first then this
	 *                             flag will be set as true
	 */
	public Boolean isFirstOrderFlag(final SessionContext ctx, final Order item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Order.FIRSTORDERFLAG);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Order.firstOrderFlag</code> attribute.
	 * @return the firstOrderFlag - if customer is new and this order is first then this
	 *                             flag will be set as true
	 */
	public Boolean isFirstOrderFlag(final Order item)
	{
		return isFirstOrderFlag( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Order.firstOrderFlag</code> attribute. 
	 * @return the firstOrderFlag - if customer is new and this order is first then this
	 *                             flag will be set as true
	 */
	public boolean isFirstOrderFlagAsPrimitive(final SessionContext ctx, final Order item)
	{
		Boolean value = isFirstOrderFlag( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Order.firstOrderFlag</code> attribute. 
	 * @return the firstOrderFlag - if customer is new and this order is first then this
	 *                             flag will be set as true
	 */
	public boolean isFirstOrderFlagAsPrimitive(final Order item)
	{
		return isFirstOrderFlagAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Order.firstOrderFlag</code> attribute. 
	 * @param value the firstOrderFlag - if customer is new and this order is first then this
	 *                             flag will be set as true
	 */
	public void setFirstOrderFlag(final SessionContext ctx, final Order item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Order.FIRSTORDERFLAG,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Order.firstOrderFlag</code> attribute. 
	 * @param value the firstOrderFlag - if customer is new and this order is first then this
	 *                             flag will be set as true
	 */
	public void setFirstOrderFlag(final Order item, final Boolean value)
	{
		setFirstOrderFlag( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Order.firstOrderFlag</code> attribute. 
	 * @param value the firstOrderFlag - if customer is new and this order is first then this
	 *                             flag will be set as true
	 */
	public void setFirstOrderFlag(final SessionContext ctx, final Order item, final boolean value)
	{
		setFirstOrderFlag( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Order.firstOrderFlag</code> attribute. 
	 * @param value the firstOrderFlag - if customer is new and this order is first then this
	 *                             flag will be set as true
	 */
	public void setFirstOrderFlag(final Order item, final boolean value)
	{
		setFirstOrderFlag( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.gender</code> attribute.
	 * @return the gender - Gender
	 */
	public EnumerationValue getGender(final SessionContext ctx, final Customer item)
	{
		return (EnumerationValue)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.GENDER);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.gender</code> attribute.
	 * @return the gender - Gender
	 */
	public EnumerationValue getGender(final Customer item)
	{
		return getGender( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.gender</code> attribute. 
	 * @param value the gender - Gender
	 */
	public void setGender(final SessionContext ctx, final Customer item, final EnumerationValue value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.GENDER,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.gender</code> attribute. 
	 * @param value the gender - Gender
	 */
	public void setGender(final Customer item, final EnumerationValue value)
	{
		setGender( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CronJob.generalString</code> attribute.
	 * @return the generalString - General String Value
	 */
	public String getGeneralString(final SessionContext ctx, final CronJob item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.CronJob.GENERALSTRING);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CronJob.generalString</code> attribute.
	 * @return the generalString - General String Value
	 */
	public String getGeneralString(final CronJob item)
	{
		return getGeneralString( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CronJob.generalString</code> attribute. 
	 * @param value the generalString - General String Value
	 */
	public void setGeneralString(final SessionContext ctx, final CronJob item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.CronJob.GENERALSTRING,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CronJob.generalString</code> attribute. 
	 * @param value the generalString - General String Value
	 */
	public void setGeneralString(final CronJob item, final String value)
	{
		setGeneralString( getSession().getSessionContext(), item, value );
	}
	
	@Override
	public String getName()
	{
		return SslCoreConstants.EXTENSIONNAME;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.giftAgeGroup</code> attribute.
	 * @return the giftAgeGroup
	 */
	public String getGiftAgeGroup(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.GIFTAGEGROUP);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.giftAgeGroup</code> attribute.
	 * @return the giftAgeGroup
	 */
	public String getGiftAgeGroup(final Product item)
	{
		return getGiftAgeGroup( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.giftAgeGroup</code> attribute. 
	 * @param value the giftAgeGroup
	 */
	public void setGiftAgeGroup(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.GIFTAGEGROUP,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.giftAgeGroup</code> attribute. 
	 * @param value the giftAgeGroup
	 */
	public void setGiftAgeGroup(final Product item, final String value)
	{
		setGiftAgeGroup( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.giftImage</code> attribute.
	 * @return the giftImage
	 */
	public Media getGiftImage(final SessionContext ctx, final AbstractOrder item)
	{
		return (Media)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrder.GIFTIMAGE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.giftImage</code> attribute.
	 * @return the giftImage
	 */
	public Media getGiftImage(final AbstractOrder item)
	{
		return getGiftImage( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.giftImage</code> attribute. 
	 * @param value the giftImage
	 */
	public void setGiftImage(final SessionContext ctx, final AbstractOrder item, final Media value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrder.GIFTIMAGE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.giftImage</code> attribute. 
	 * @param value the giftImage
	 */
	public void setGiftImage(final AbstractOrder item, final Media value)
	{
		setGiftImage( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.giftMessage</code> attribute.
	 * @return the giftMessage
	 */
	public String getGiftMessage(final SessionContext ctx, final AbstractOrder item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrder.GIFTMESSAGE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.giftMessage</code> attribute.
	 * @return the giftMessage
	 */
	public String getGiftMessage(final AbstractOrder item)
	{
		return getGiftMessage( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.giftMessage</code> attribute. 
	 * @param value the giftMessage
	 */
	public void setGiftMessage(final SessionContext ctx, final AbstractOrder item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrder.GIFTMESSAGE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.giftMessage</code> attribute. 
	 * @param value the giftMessage
	 */
	public void setGiftMessage(final AbstractOrder item, final String value)
	{
		setGiftMessage( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.giftRecipientName</code> attribute.
	 * @return the giftRecipientName
	 */
	public String getGiftRecipientName(final SessionContext ctx, final AbstractOrder item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrder.GIFTRECIPIENTNAME);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.giftRecipientName</code> attribute.
	 * @return the giftRecipientName
	 */
	public String getGiftRecipientName(final AbstractOrder item)
	{
		return getGiftRecipientName( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.giftRecipientName</code> attribute. 
	 * @param value the giftRecipientName
	 */
	public void setGiftRecipientName(final SessionContext ctx, final AbstractOrder item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrder.GIFTRECIPIENTNAME,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.giftRecipientName</code> attribute. 
	 * @param value the giftRecipientName
	 */
	public void setGiftRecipientName(final AbstractOrder item, final String value)
	{
		setGiftRecipientName( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.giftSenderName</code> attribute.
	 * @return the giftSenderName
	 */
	public String getGiftSenderName(final SessionContext ctx, final AbstractOrder item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrder.GIFTSENDERNAME);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.giftSenderName</code> attribute.
	 * @return the giftSenderName
	 */
	public String getGiftSenderName(final AbstractOrder item)
	{
		return getGiftSenderName( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.giftSenderName</code> attribute. 
	 * @param value the giftSenderName
	 */
	public void setGiftSenderName(final SessionContext ctx, final AbstractOrder item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrder.GIFTSENDERNAME,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.giftSenderName</code> attribute. 
	 * @param value the giftSenderName
	 */
	public void setGiftSenderName(final AbstractOrder item, final String value)
	{
		setGiftSenderName( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.giftTo</code> attribute.
	 * @return the giftTo
	 */
	public String getGiftTo(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.GIFTTO);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.giftTo</code> attribute.
	 * @return the giftTo
	 */
	public String getGiftTo(final Product item)
	{
		return getGiftTo( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.giftTo</code> attribute. 
	 * @param value the giftTo
	 */
	public void setGiftTo(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.GIFTTO,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.giftTo</code> attribute. 
	 * @param value the giftTo
	 */
	public void setGiftTo(final Product item, final String value)
	{
		setGiftTo( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.giftWrap</code> attribute.
	 * @return the giftWrap - Identify a product can be gift wrapped
	 */
	public Boolean isGiftWrap(final SessionContext ctx, final Product item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Product.GIFTWRAP);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.giftWrap</code> attribute.
	 * @return the giftWrap - Identify a product can be gift wrapped
	 */
	public Boolean isGiftWrap(final Product item)
	{
		return isGiftWrap( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.giftWrap</code> attribute. 
	 * @return the giftWrap - Identify a product can be gift wrapped
	 */
	public boolean isGiftWrapAsPrimitive(final SessionContext ctx, final Product item)
	{
		Boolean value = isGiftWrap( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.giftWrap</code> attribute. 
	 * @return the giftWrap - Identify a product can be gift wrapped
	 */
	public boolean isGiftWrapAsPrimitive(final Product item)
	{
		return isGiftWrapAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.giftWrap</code> attribute. 
	 * @param value the giftWrap - Identify a product can be gift wrapped
	 */
	public void setGiftWrap(final SessionContext ctx, final Product item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.GIFTWRAP,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.giftWrap</code> attribute. 
	 * @param value the giftWrap - Identify a product can be gift wrapped
	 */
	public void setGiftWrap(final Product item, final Boolean value)
	{
		setGiftWrap( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.giftWrap</code> attribute. 
	 * @param value the giftWrap - Identify a product can be gift wrapped
	 */
	public void setGiftWrap(final SessionContext ctx, final Product item, final boolean value)
	{
		setGiftWrap( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.giftWrap</code> attribute. 
	 * @param value the giftWrap - Identify a product can be gift wrapped
	 */
	public void setGiftWrap(final Product item, final boolean value)
	{
		setGiftWrap( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.gstinNumber</code> attribute.
	 * @return the gstinNumber - If customer has opted for b2b transaction, then save gstin number inside order
	 */
	public String getGstinNumber(final SessionContext ctx, final AbstractOrder item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrder.GSTINNUMBER);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.gstinNumber</code> attribute.
	 * @return the gstinNumber - If customer has opted for b2b transaction, then save gstin number inside order
	 */
	public String getGstinNumber(final AbstractOrder item)
	{
		return getGstinNumber( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.gstinNumber</code> attribute. 
	 * @param value the gstinNumber - If customer has opted for b2b transaction, then save gstin number inside order
	 */
	public void setGstinNumber(final SessionContext ctx, final AbstractOrder item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrder.GSTINNUMBER,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.gstinNumber</code> attribute. 
	 * @param value the gstinNumber - If customer has opted for b2b transaction, then save gstin number inside order
	 */
	public void setGstinNumber(final AbstractOrder item, final String value)
	{
		setGstinNumber( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.gstinNumber</code> attribute.
	 * @return the gstinNumber
	 */
	public String getGstinNumber(final SessionContext ctx, final Customer item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.GSTINNUMBER);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.gstinNumber</code> attribute.
	 * @return the gstinNumber
	 */
	public String getGstinNumber(final Customer item)
	{
		return getGstinNumber( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.gstinNumber</code> attribute. 
	 * @param value the gstinNumber
	 */
	public void setGstinNumber(final SessionContext ctx, final Customer item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.GSTINNUMBER,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.gstinNumber</code> attribute. 
	 * @param value the gstinNumber
	 */
	public void setGstinNumber(final Customer item, final String value)
	{
		setGstinNumber( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.heroProduct</code> attribute.
	 * @return the heroProduct - To indicate hero product
	 */
	public Boolean isHeroProduct(final SessionContext ctx, final Product item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Product.HEROPRODUCT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.heroProduct</code> attribute.
	 * @return the heroProduct - To indicate hero product
	 */
	public Boolean isHeroProduct(final Product item)
	{
		return isHeroProduct( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.heroProduct</code> attribute. 
	 * @return the heroProduct - To indicate hero product
	 */
	public boolean isHeroProductAsPrimitive(final SessionContext ctx, final Product item)
	{
		Boolean value = isHeroProduct( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.heroProduct</code> attribute. 
	 * @return the heroProduct - To indicate hero product
	 */
	public boolean isHeroProductAsPrimitive(final Product item)
	{
		return isHeroProductAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.heroProduct</code> attribute. 
	 * @param value the heroProduct - To indicate hero product
	 */
	public void setHeroProduct(final SessionContext ctx, final Product item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.HEROPRODUCT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.heroProduct</code> attribute. 
	 * @param value the heroProduct - To indicate hero product
	 */
	public void setHeroProduct(final Product item, final Boolean value)
	{
		setHeroProduct( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.heroProduct</code> attribute. 
	 * @param value the heroProduct - To indicate hero product
	 */
	public void setHeroProduct(final SessionContext ctx, final Product item, final boolean value)
	{
		setHeroProduct( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.heroProduct</code> attribute. 
	 * @param value the heroProduct - To indicate hero product
	 */
	public void setHeroProduct(final Product item, final boolean value)
	{
		setHeroProduct( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ConsignmentEntry.hideEntry</code> attribute.
	 * @return the hideEntry - For Partial Cancellation, mark true for original
	 *                             consignment Entry to not be shown
	 */
	public Boolean isHideEntry(final SessionContext ctx, final ConsignmentEntry item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.ConsignmentEntry.HIDEENTRY);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ConsignmentEntry.hideEntry</code> attribute.
	 * @return the hideEntry - For Partial Cancellation, mark true for original
	 *                             consignment Entry to not be shown
	 */
	public Boolean isHideEntry(final ConsignmentEntry item)
	{
		return isHideEntry( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ConsignmentEntry.hideEntry</code> attribute. 
	 * @return the hideEntry - For Partial Cancellation, mark true for original
	 *                             consignment Entry to not be shown
	 */
	public boolean isHideEntryAsPrimitive(final SessionContext ctx, final ConsignmentEntry item)
	{
		Boolean value = isHideEntry( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ConsignmentEntry.hideEntry</code> attribute. 
	 * @return the hideEntry - For Partial Cancellation, mark true for original
	 *                             consignment Entry to not be shown
	 */
	public boolean isHideEntryAsPrimitive(final ConsignmentEntry item)
	{
		return isHideEntryAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ConsignmentEntry.hideEntry</code> attribute. 
	 * @param value the hideEntry - For Partial Cancellation, mark true for original
	 *                             consignment Entry to not be shown
	 */
	public void setHideEntry(final SessionContext ctx, final ConsignmentEntry item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ConsignmentEntry.HIDEENTRY,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ConsignmentEntry.hideEntry</code> attribute. 
	 * @param value the hideEntry - For Partial Cancellation, mark true for original
	 *                             consignment Entry to not be shown
	 */
	public void setHideEntry(final ConsignmentEntry item, final Boolean value)
	{
		setHideEntry( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ConsignmentEntry.hideEntry</code> attribute. 
	 * @param value the hideEntry - For Partial Cancellation, mark true for original
	 *                             consignment Entry to not be shown
	 */
	public void setHideEntry(final SessionContext ctx, final ConsignmentEntry item, final boolean value)
	{
		setHideEntry( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ConsignmentEntry.hideEntry</code> attribute. 
	 * @param value the hideEntry - For Partial Cancellation, mark true for original
	 *                             consignment Entry to not be shown
	 */
	public void setHideEntry(final ConsignmentEntry item, final boolean value)
	{
		setHideEntry( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.holdQuantity</code> attribute.
	 * @return the holdQuantity - Hold Quantity
	 */
	public Integer getHoldQuantity(final SessionContext ctx, final StockLevel item)
	{
		return (Integer)item.getProperty( ctx, SslCoreConstants.Attributes.StockLevel.HOLDQUANTITY);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.holdQuantity</code> attribute.
	 * @return the holdQuantity - Hold Quantity
	 */
	public Integer getHoldQuantity(final StockLevel item)
	{
		return getHoldQuantity( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.holdQuantity</code> attribute. 
	 * @return the holdQuantity - Hold Quantity
	 */
	public int getHoldQuantityAsPrimitive(final SessionContext ctx, final StockLevel item)
	{
		Integer value = getHoldQuantity( ctx,item );
		return value != null ? value.intValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.holdQuantity</code> attribute. 
	 * @return the holdQuantity - Hold Quantity
	 */
	public int getHoldQuantityAsPrimitive(final StockLevel item)
	{
		return getHoldQuantityAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.holdQuantity</code> attribute. 
	 * @param value the holdQuantity - Hold Quantity
	 */
	public void setHoldQuantity(final SessionContext ctx, final StockLevel item, final Integer value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.StockLevel.HOLDQUANTITY,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.holdQuantity</code> attribute. 
	 * @param value the holdQuantity - Hold Quantity
	 */
	public void setHoldQuantity(final StockLevel item, final Integer value)
	{
		setHoldQuantity( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.holdQuantity</code> attribute. 
	 * @param value the holdQuantity - Hold Quantity
	 */
	public void setHoldQuantity(final SessionContext ctx, final StockLevel item, final int value)
	{
		setHoldQuantity( ctx, item, Integer.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.holdQuantity</code> attribute. 
	 * @param value the holdQuantity - Hold Quantity
	 */
	public void setHoldQuantity(final StockLevel item, final int value)
	{
		setHoldQuantity( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.homeStore</code> attribute.
	 * @return the homeStore
	 */
	public PointOfService getHomeStore(final SessionContext ctx, final Customer item)
	{
		return (PointOfService)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.HOMESTORE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.homeStore</code> attribute.
	 * @return the homeStore
	 */
	public PointOfService getHomeStore(final Customer item)
	{
		return getHomeStore( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.homeStore</code> attribute. 
	 * @param value the homeStore
	 */
	public void setHomeStore(final SessionContext ctx, final Customer item, final PointOfService value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.HOMESTORE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.homeStore</code> attribute. 
	 * @param value the homeStore
	 */
	public void setHomeStore(final Customer item, final PointOfService value)
	{
		setHomeStore( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.homeStoreCreatedDate</code> attribute.
	 * @return the homeStoreCreatedDate
	 */
	public Date getHomeStoreCreatedDate(final SessionContext ctx, final Customer item)
	{
		return (Date)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.HOMESTORECREATEDDATE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.homeStoreCreatedDate</code> attribute.
	 * @return the homeStoreCreatedDate
	 */
	public Date getHomeStoreCreatedDate(final Customer item)
	{
		return getHomeStoreCreatedDate( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.homeStoreCreatedDate</code> attribute. 
	 * @param value the homeStoreCreatedDate
	 */
	public void setHomeStoreCreatedDate(final SessionContext ctx, final Customer item, final Date value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.HOMESTORECREATEDDATE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.homeStoreCreatedDate</code> attribute. 
	 * @param value the homeStoreCreatedDate
	 */
	public void setHomeStoreCreatedDate(final Customer item, final Date value)
	{
		setHomeStoreCreatedDate( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.homeStoreModifiedDate</code> attribute.
	 * @return the homeStoreModifiedDate
	 */
	public Date getHomeStoreModifiedDate(final SessionContext ctx, final Customer item)
	{
		return (Date)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.HOMESTOREMODIFIEDDATE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.homeStoreModifiedDate</code> attribute.
	 * @return the homeStoreModifiedDate
	 */
	public Date getHomeStoreModifiedDate(final Customer item)
	{
		return getHomeStoreModifiedDate( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.homeStoreModifiedDate</code> attribute. 
	 * @param value the homeStoreModifiedDate
	 */
	public void setHomeStoreModifiedDate(final SessionContext ctx, final Customer item, final Date value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.HOMESTOREMODIFIEDDATE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.homeStoreModifiedDate</code> attribute. 
	 * @param value the homeStoreModifiedDate
	 */
	public void setHomeStoreModifiedDate(final Customer item, final Date value)
	{
		setHomeStoreModifiedDate( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.hsnCode</code> attribute.
	 * @return the hsnCode - To indicate HSN Code
	 */
	public String getHsnCode(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.HSNCODE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.hsnCode</code> attribute.
	 * @return the hsnCode - To indicate HSN Code
	 */
	public String getHsnCode(final Product item)
	{
		return getHsnCode( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.hsnCode</code> attribute. 
	 * @param value the hsnCode - To indicate HSN Code
	 */
	public void setHsnCode(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.HSNCODE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.hsnCode</code> attribute. 
	 * @param value the hsnCode - To indicate HSN Code
	 */
	public void setHsnCode(final Product item, final String value)
	{
		setHsnCode( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Media.imageMapHTML</code> attribute.
	 * @return the imageMapHTML - It is localized HTML string that is displayed under
	 *                             the banner.
	 */
	public String getImageMapHTML(final SessionContext ctx, final Media item)
	{
		if( ctx == null || ctx.getLanguage() == null )
		{
			throw new JaloInvalidParameterException("GeneratedMedia.getImageMapHTML requires a session language", 0 );
		}
		return (String)item.getLocalizedProperty( ctx, SslCoreConstants.Attributes.Media.IMAGEMAPHTML);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Media.imageMapHTML</code> attribute.
	 * @return the imageMapHTML - It is localized HTML string that is displayed under
	 *                             the banner.
	 */
	public String getImageMapHTML(final Media item)
	{
		return getImageMapHTML( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Media.imageMapHTML</code> attribute. 
	 * @return the localized imageMapHTML - It is localized HTML string that is displayed under
	 *                             the banner.
	 */
	public Map<Language,String> getAllImageMapHTML(final SessionContext ctx, final Media item)
	{
		return (Map<Language,String>)item.getAllLocalizedProperties(ctx,SslCoreConstants.Attributes.Media.IMAGEMAPHTML,C2LManager.getInstance().getAllLanguages());
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Media.imageMapHTML</code> attribute. 
	 * @return the localized imageMapHTML - It is localized HTML string that is displayed under
	 *                             the banner.
	 */
	public Map<Language,String> getAllImageMapHTML(final Media item)
	{
		return getAllImageMapHTML( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Media.imageMapHTML</code> attribute. 
	 * @param value the imageMapHTML - It is localized HTML string that is displayed under
	 *                             the banner.
	 */
	public void setImageMapHTML(final SessionContext ctx, final Media item, final String value)
	{
		if( ctx == null || ctx.getLanguage() == null )
		{
			throw new JaloInvalidParameterException("GeneratedMedia.setImageMapHTML requires a session language", 0 );
		}
		item.setLocalizedProperty(ctx, SslCoreConstants.Attributes.Media.IMAGEMAPHTML,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Media.imageMapHTML</code> attribute. 
	 * @param value the imageMapHTML - It is localized HTML string that is displayed under
	 *                             the banner.
	 */
	public void setImageMapHTML(final Media item, final String value)
	{
		setImageMapHTML( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Media.imageMapHTML</code> attribute. 
	 * @param value the imageMapHTML - It is localized HTML string that is displayed under
	 *                             the banner.
	 */
	public void setAllImageMapHTML(final SessionContext ctx, final Media item, final Map<Language,String> value)
	{
		item.setAllLocalizedProperties(ctx,SslCoreConstants.Attributes.Media.IMAGEMAPHTML,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Media.imageMapHTML</code> attribute. 
	 * @param value the imageMapHTML - It is localized HTML string that is displayed under
	 *                             the banner.
	 */
	public void setAllImageMapHTML(final Media item, final Map<Language,String> value)
	{
		setAllImageMapHTML( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.inStoreAndOnlineComponent</code> attribute.
	 * @return the inStoreAndOnlineComponent - List of Recommended Products for this Category
	 */
	public InStoreAndOnlineComponent getInStoreAndOnlineComponent(final SessionContext ctx, final Category item)
	{
		return (InStoreAndOnlineComponent)item.getProperty( ctx, SslCoreConstants.Attributes.Category.INSTOREANDONLINECOMPONENT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.inStoreAndOnlineComponent</code> attribute.
	 * @return the inStoreAndOnlineComponent - List of Recommended Products for this Category
	 */
	public InStoreAndOnlineComponent getInStoreAndOnlineComponent(final Category item)
	{
		return getInStoreAndOnlineComponent( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.inStoreAndOnlineComponent</code> attribute. 
	 * @param value the inStoreAndOnlineComponent - List of Recommended Products for this Category
	 */
	public void setInStoreAndOnlineComponent(final SessionContext ctx, final Category item, final InStoreAndOnlineComponent value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.INSTOREANDONLINECOMPONENT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.inStoreAndOnlineComponent</code> attribute. 
	 * @param value the inStoreAndOnlineComponent - List of Recommended Products for this Category
	 */
	public void setInStoreAndOnlineComponent(final Category item, final InStoreAndOnlineComponent value)
	{
		setInStoreAndOnlineComponent( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.inStoreLocation</code> attribute.
	 * @return the inStoreLocation - Store location of the return
	 */
	public Warehouse getInStoreLocation(final SessionContext ctx, final ReturnRequest item)
	{
		return (Warehouse)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.INSTORELOCATION);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.inStoreLocation</code> attribute.
	 * @return the inStoreLocation - Store location of the return
	 */
	public Warehouse getInStoreLocation(final ReturnRequest item)
	{
		return getInStoreLocation( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.inStoreLocation</code> attribute. 
	 * @param value the inStoreLocation - Store location of the return
	 */
	public void setInStoreLocation(final SessionContext ctx, final ReturnRequest item, final Warehouse value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.INSTORELOCATION,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.inStoreLocation</code> attribute. 
	 * @param value the inStoreLocation - Store location of the return
	 */
	public void setInStoreLocation(final ReturnRequest item, final Warehouse value)
	{
		setInStoreLocation( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.internationalShipping</code> attribute.
	 * @return the internationalShipping
	 */
	public Boolean isInternationalShipping(final SessionContext ctx, final Product item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Product.INTERNATIONALSHIPPING);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.internationalShipping</code> attribute.
	 * @return the internationalShipping
	 */
	public Boolean isInternationalShipping(final Product item)
	{
		return isInternationalShipping( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.internationalShipping</code> attribute. 
	 * @return the internationalShipping
	 */
	public boolean isInternationalShippingAsPrimitive(final SessionContext ctx, final Product item)
	{
		Boolean value = isInternationalShipping( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.internationalShipping</code> attribute. 
	 * @return the internationalShipping
	 */
	public boolean isInternationalShippingAsPrimitive(final Product item)
	{
		return isInternationalShippingAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.internationalShipping</code> attribute. 
	 * @param value the internationalShipping
	 */
	public void setInternationalShipping(final SessionContext ctx, final Product item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.INTERNATIONALSHIPPING,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.internationalShipping</code> attribute. 
	 * @param value the internationalShipping
	 */
	public void setInternationalShipping(final Product item, final Boolean value)
	{
		setInternationalShipping( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.internationalShipping</code> attribute. 
	 * @param value the internationalShipping
	 */
	public void setInternationalShipping(final SessionContext ctx, final Product item, final boolean value)
	{
		setInternationalShipping( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.internationalShipping</code> attribute. 
	 * @param value the internationalShipping
	 */
	public void setInternationalShipping(final Product item, final boolean value)
	{
		setInternationalShipping( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.inventoryZoneQuantity</code> attribute.
	 * @return the inventoryZoneQuantity - Inventory Zone Quantity
	 */
	public Long getInventoryZoneQuantity(final SessionContext ctx, final ReturnEntry item)
	{
		return (Long)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnEntry.INVENTORYZONEQUANTITY);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.inventoryZoneQuantity</code> attribute.
	 * @return the inventoryZoneQuantity - Inventory Zone Quantity
	 */
	public Long getInventoryZoneQuantity(final ReturnEntry item)
	{
		return getInventoryZoneQuantity( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.inventoryZoneQuantity</code> attribute. 
	 * @return the inventoryZoneQuantity - Inventory Zone Quantity
	 */
	public long getInventoryZoneQuantityAsPrimitive(final SessionContext ctx, final ReturnEntry item)
	{
		Long value = getInventoryZoneQuantity( ctx,item );
		return value != null ? value.longValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.inventoryZoneQuantity</code> attribute. 
	 * @return the inventoryZoneQuantity - Inventory Zone Quantity
	 */
	public long getInventoryZoneQuantityAsPrimitive(final ReturnEntry item)
	{
		return getInventoryZoneQuantityAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.inventoryZoneQuantity</code> attribute. 
	 * @param value the inventoryZoneQuantity - Inventory Zone Quantity
	 */
	public void setInventoryZoneQuantity(final SessionContext ctx, final ReturnEntry item, final Long value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnEntry.INVENTORYZONEQUANTITY,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.inventoryZoneQuantity</code> attribute. 
	 * @param value the inventoryZoneQuantity - Inventory Zone Quantity
	 */
	public void setInventoryZoneQuantity(final ReturnEntry item, final Long value)
	{
		setInventoryZoneQuantity( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.inventoryZoneQuantity</code> attribute. 
	 * @param value the inventoryZoneQuantity - Inventory Zone Quantity
	 */
	public void setInventoryZoneQuantity(final SessionContext ctx, final ReturnEntry item, final long value)
	{
		setInventoryZoneQuantity( ctx, item, Long.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.inventoryZoneQuantity</code> attribute. 
	 * @param value the inventoryZoneQuantity - Inventory Zone Quantity
	 */
	public void setInventoryZoneQuantity(final ReturnEntry item, final long value)
	{
		setInventoryZoneQuantity( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.IP</code> attribute.
	 * @return the IP
	 */
	public String getIP(final SessionContext ctx, final AbstractOrder item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrder.IP);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.IP</code> attribute.
	 * @return the IP
	 */
	public String getIP(final AbstractOrder item)
	{
		return getIP( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.IP</code> attribute. 
	 * @param value the IP
	 */
	public void setIP(final SessionContext ctx, final AbstractOrder item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrder.IP,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.IP</code> attribute. 
	 * @param value the IP
	 */
	public void setIP(final AbstractOrder item, final String value)
	{
		setIP( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.isAlterationAvailable</code> attribute.
	 * @return the isAlterationAvailable - Identify a product can be altered
	 */
	public Boolean isIsAlterationAvailable(final SessionContext ctx, final Product item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Product.ISALTERATIONAVAILABLE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.isAlterationAvailable</code> attribute.
	 * @return the isAlterationAvailable - Identify a product can be altered
	 */
	public Boolean isIsAlterationAvailable(final Product item)
	{
		return isIsAlterationAvailable( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.isAlterationAvailable</code> attribute. 
	 * @return the isAlterationAvailable - Identify a product can be altered
	 */
	public boolean isIsAlterationAvailableAsPrimitive(final SessionContext ctx, final Product item)
	{
		Boolean value = isIsAlterationAvailable( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.isAlterationAvailable</code> attribute. 
	 * @return the isAlterationAvailable - Identify a product can be altered
	 */
	public boolean isIsAlterationAvailableAsPrimitive(final Product item)
	{
		return isIsAlterationAvailableAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.isAlterationAvailable</code> attribute. 
	 * @param value the isAlterationAvailable - Identify a product can be altered
	 */
	public void setIsAlterationAvailable(final SessionContext ctx, final Product item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.ISALTERATIONAVAILABLE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.isAlterationAvailable</code> attribute. 
	 * @param value the isAlterationAvailable - Identify a product can be altered
	 */
	public void setIsAlterationAvailable(final Product item, final Boolean value)
	{
		setIsAlterationAvailable( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.isAlterationAvailable</code> attribute. 
	 * @param value the isAlterationAvailable - Identify a product can be altered
	 */
	public void setIsAlterationAvailable(final SessionContext ctx, final Product item, final boolean value)
	{
		setIsAlterationAvailable( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.isAlterationAvailable</code> attribute. 
	 * @param value the isAlterationAvailable - Identify a product can be altered
	 */
	public void setIsAlterationAvailable(final Product item, final boolean value)
	{
		setIsAlterationAvailable( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Cart.isApplicableForAbondedNotify</code> attribute.
	 * @return the isApplicableForAbondedNotify
	 */
	public Boolean isIsApplicableForAbondedNotify(final SessionContext ctx, final Cart item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Cart.ISAPPLICABLEFORABONDEDNOTIFY);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Cart.isApplicableForAbondedNotify</code> attribute.
	 * @return the isApplicableForAbondedNotify
	 */
	public Boolean isIsApplicableForAbondedNotify(final Cart item)
	{
		return isIsApplicableForAbondedNotify( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Cart.isApplicableForAbondedNotify</code> attribute. 
	 * @return the isApplicableForAbondedNotify
	 */
	public boolean isIsApplicableForAbondedNotifyAsPrimitive(final SessionContext ctx, final Cart item)
	{
		Boolean value = isIsApplicableForAbondedNotify( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Cart.isApplicableForAbondedNotify</code> attribute. 
	 * @return the isApplicableForAbondedNotify
	 */
	public boolean isIsApplicableForAbondedNotifyAsPrimitive(final Cart item)
	{
		return isIsApplicableForAbondedNotifyAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Cart.isApplicableForAbondedNotify</code> attribute. 
	 * @param value the isApplicableForAbondedNotify
	 */
	public void setIsApplicableForAbondedNotify(final SessionContext ctx, final Cart item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Cart.ISAPPLICABLEFORABONDEDNOTIFY,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Cart.isApplicableForAbondedNotify</code> attribute. 
	 * @param value the isApplicableForAbondedNotify
	 */
	public void setIsApplicableForAbondedNotify(final Cart item, final Boolean value)
	{
		setIsApplicableForAbondedNotify( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Cart.isApplicableForAbondedNotify</code> attribute. 
	 * @param value the isApplicableForAbondedNotify
	 */
	public void setIsApplicableForAbondedNotify(final SessionContext ctx, final Cart item, final boolean value)
	{
		setIsApplicableForAbondedNotify( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Cart.isApplicableForAbondedNotify</code> attribute. 
	 * @param value the isApplicableForAbondedNotify
	 */
	public void setIsApplicableForAbondedNotify(final Cart item, final boolean value)
	{
		setIsApplicableForAbondedNotify( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.isAvailable</code> attribute.
	 * @return the isAvailable - To indicate availability to pickup from store
	 */
	public Boolean isIsAvailable(final SessionContext ctx, final Product item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Product.ISAVAILABLE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.isAvailable</code> attribute.
	 * @return the isAvailable - To indicate availability to pickup from store
	 */
	public Boolean isIsAvailable(final Product item)
	{
		return isIsAvailable( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.isAvailable</code> attribute. 
	 * @return the isAvailable - To indicate availability to pickup from store
	 */
	public boolean isIsAvailableAsPrimitive(final SessionContext ctx, final Product item)
	{
		Boolean value = isIsAvailable( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.isAvailable</code> attribute. 
	 * @return the isAvailable - To indicate availability to pickup from store
	 */
	public boolean isIsAvailableAsPrimitive(final Product item)
	{
		return isIsAvailableAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.isAvailable</code> attribute. 
	 * @param value the isAvailable - To indicate availability to pickup from store
	 */
	public void setIsAvailable(final SessionContext ctx, final Product item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.ISAVAILABLE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.isAvailable</code> attribute. 
	 * @param value the isAvailable - To indicate availability to pickup from store
	 */
	public void setIsAvailable(final Product item, final Boolean value)
	{
		setIsAvailable( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.isAvailable</code> attribute. 
	 * @param value the isAvailable - To indicate availability to pickup from store
	 */
	public void setIsAvailable(final SessionContext ctx, final Product item, final boolean value)
	{
		setIsAvailable( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.isAvailable</code> attribute. 
	 * @param value the isAvailable - To indicate availability to pickup from store
	 */
	public void setIsAvailable(final Product item, final boolean value)
	{
		setIsAvailable( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.isAvailableForCoD</code> attribute.
	 * @return the isAvailableForCoD - Is available for CoD.
	 */
	public Boolean isIsAvailableForCoD(final SessionContext ctx, final Product item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Product.ISAVAILABLEFORCOD);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.isAvailableForCoD</code> attribute.
	 * @return the isAvailableForCoD - Is available for CoD.
	 */
	public Boolean isIsAvailableForCoD(final Product item)
	{
		return isIsAvailableForCoD( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.isAvailableForCoD</code> attribute. 
	 * @return the isAvailableForCoD - Is available for CoD.
	 */
	public boolean isIsAvailableForCoDAsPrimitive(final SessionContext ctx, final Product item)
	{
		Boolean value = isIsAvailableForCoD( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.isAvailableForCoD</code> attribute. 
	 * @return the isAvailableForCoD - Is available for CoD.
	 */
	public boolean isIsAvailableForCoDAsPrimitive(final Product item)
	{
		return isIsAvailableForCoDAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.isAvailableForCoD</code> attribute. 
	 * @param value the isAvailableForCoD - Is available for CoD.
	 */
	public void setIsAvailableForCoD(final SessionContext ctx, final Product item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.ISAVAILABLEFORCOD,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.isAvailableForCoD</code> attribute. 
	 * @param value the isAvailableForCoD - Is available for CoD.
	 */
	public void setIsAvailableForCoD(final Product item, final Boolean value)
	{
		setIsAvailableForCoD( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.isAvailableForCoD</code> attribute. 
	 * @param value the isAvailableForCoD - Is available for CoD.
	 */
	public void setIsAvailableForCoD(final SessionContext ctx, final Product item, final boolean value)
	{
		setIsAvailableForCoD( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.isAvailableForCoD</code> attribute. 
	 * @param value the isAvailableForCoD - Is available for CoD.
	 */
	public void setIsAvailableForCoD(final Product item, final boolean value)
	{
		setIsAvailableForCoD( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.isBrand</code> attribute.
	 * @return the isBrand - Specify the Brand
	 */
	public Boolean isIsBrand(final SessionContext ctx, final Category item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Category.ISBRAND);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.isBrand</code> attribute.
	 * @return the isBrand - Specify the Brand
	 */
	public Boolean isIsBrand(final Category item)
	{
		return isIsBrand( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.isBrand</code> attribute. 
	 * @return the isBrand - Specify the Brand
	 */
	public boolean isIsBrandAsPrimitive(final SessionContext ctx, final Category item)
	{
		Boolean value = isIsBrand( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.isBrand</code> attribute. 
	 * @return the isBrand - Specify the Brand
	 */
	public boolean isIsBrandAsPrimitive(final Category item)
	{
		return isIsBrandAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.isBrand</code> attribute. 
	 * @param value the isBrand - Specify the Brand
	 */
	public void setIsBrand(final SessionContext ctx, final Category item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.ISBRAND,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.isBrand</code> attribute. 
	 * @param value the isBrand - Specify the Brand
	 */
	public void setIsBrand(final Category item, final Boolean value)
	{
		setIsBrand( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.isBrand</code> attribute. 
	 * @param value the isBrand - Specify the Brand
	 */
	public void setIsBrand(final SessionContext ctx, final Category item, final boolean value)
	{
		setIsBrand( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.isBrand</code> attribute. 
	 * @param value the isBrand - Specify the Brand
	 */
	public void setIsBrand(final Category item, final boolean value)
	{
		setIsBrand( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Cart.isCsPaymentMethodSelected</code> attribute.
	 * @return the isCsPaymentMethodSelected
	 */
	public Boolean isIsCsPaymentMethodSelected(final SessionContext ctx, final Cart item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Cart.ISCSPAYMENTMETHODSELECTED);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Cart.isCsPaymentMethodSelected</code> attribute.
	 * @return the isCsPaymentMethodSelected
	 */
	public Boolean isIsCsPaymentMethodSelected(final Cart item)
	{
		return isIsCsPaymentMethodSelected( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Cart.isCsPaymentMethodSelected</code> attribute. 
	 * @return the isCsPaymentMethodSelected
	 */
	public boolean isIsCsPaymentMethodSelectedAsPrimitive(final SessionContext ctx, final Cart item)
	{
		Boolean value = isIsCsPaymentMethodSelected( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Cart.isCsPaymentMethodSelected</code> attribute. 
	 * @return the isCsPaymentMethodSelected
	 */
	public boolean isIsCsPaymentMethodSelectedAsPrimitive(final Cart item)
	{
		return isIsCsPaymentMethodSelectedAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Cart.isCsPaymentMethodSelected</code> attribute. 
	 * @param value the isCsPaymentMethodSelected
	 */
	public void setIsCsPaymentMethodSelected(final SessionContext ctx, final Cart item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Cart.ISCSPAYMENTMETHODSELECTED,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Cart.isCsPaymentMethodSelected</code> attribute. 
	 * @param value the isCsPaymentMethodSelected
	 */
	public void setIsCsPaymentMethodSelected(final Cart item, final Boolean value)
	{
		setIsCsPaymentMethodSelected( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Cart.isCsPaymentMethodSelected</code> attribute. 
	 * @param value the isCsPaymentMethodSelected
	 */
	public void setIsCsPaymentMethodSelected(final SessionContext ctx, final Cart item, final boolean value)
	{
		setIsCsPaymentMethodSelected( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Cart.isCsPaymentMethodSelected</code> attribute. 
	 * @param value the isCsPaymentMethodSelected
	 */
	public void setIsCsPaymentMethodSelected(final Cart item, final boolean value)
	{
		setIsCsPaymentMethodSelected( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PointOfService.isEnabledForPersonalShopper</code> attribute.
	 * @return the isEnabledForPersonalShopper
	 */
	public Boolean isIsEnabledForPersonalShopper(final SessionContext ctx, final PointOfService item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.PointOfService.ISENABLEDFORPERSONALSHOPPER);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PointOfService.isEnabledForPersonalShopper</code> attribute.
	 * @return the isEnabledForPersonalShopper
	 */
	public Boolean isIsEnabledForPersonalShopper(final PointOfService item)
	{
		return isIsEnabledForPersonalShopper( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PointOfService.isEnabledForPersonalShopper</code> attribute. 
	 * @return the isEnabledForPersonalShopper
	 */
	public boolean isIsEnabledForPersonalShopperAsPrimitive(final SessionContext ctx, final PointOfService item)
	{
		Boolean value = isIsEnabledForPersonalShopper( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PointOfService.isEnabledForPersonalShopper</code> attribute. 
	 * @return the isEnabledForPersonalShopper
	 */
	public boolean isIsEnabledForPersonalShopperAsPrimitive(final PointOfService item)
	{
		return isIsEnabledForPersonalShopperAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PointOfService.isEnabledForPersonalShopper</code> attribute. 
	 * @param value the isEnabledForPersonalShopper
	 */
	public void setIsEnabledForPersonalShopper(final SessionContext ctx, final PointOfService item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.PointOfService.ISENABLEDFORPERSONALSHOPPER,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PointOfService.isEnabledForPersonalShopper</code> attribute. 
	 * @param value the isEnabledForPersonalShopper
	 */
	public void setIsEnabledForPersonalShopper(final PointOfService item, final Boolean value)
	{
		setIsEnabledForPersonalShopper( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PointOfService.isEnabledForPersonalShopper</code> attribute. 
	 * @param value the isEnabledForPersonalShopper
	 */
	public void setIsEnabledForPersonalShopper(final SessionContext ctx, final PointOfService item, final boolean value)
	{
		setIsEnabledForPersonalShopper( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PointOfService.isEnabledForPersonalShopper</code> attribute. 
	 * @param value the isEnabledForPersonalShopper
	 */
	public void setIsEnabledForPersonalShopper(final PointOfService item, final boolean value)
	{
		setIsEnabledForPersonalShopper( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.isGiftProduct</code> attribute.
	 * @return the isGiftProduct - Identify a product can be gifted
	 */
	public Boolean isIsGiftProduct(final SessionContext ctx, final Product item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Product.ISGIFTPRODUCT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.isGiftProduct</code> attribute.
	 * @return the isGiftProduct - Identify a product can be gifted
	 */
	public Boolean isIsGiftProduct(final Product item)
	{
		return isIsGiftProduct( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.isGiftProduct</code> attribute. 
	 * @return the isGiftProduct - Identify a product can be gifted
	 */
	public boolean isIsGiftProductAsPrimitive(final SessionContext ctx, final Product item)
	{
		Boolean value = isIsGiftProduct( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.isGiftProduct</code> attribute. 
	 * @return the isGiftProduct - Identify a product can be gifted
	 */
	public boolean isIsGiftProductAsPrimitive(final Product item)
	{
		return isIsGiftProductAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.isGiftProduct</code> attribute. 
	 * @param value the isGiftProduct - Identify a product can be gifted
	 */
	public void setIsGiftProduct(final SessionContext ctx, final Product item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.ISGIFTPRODUCT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.isGiftProduct</code> attribute. 
	 * @param value the isGiftProduct - Identify a product can be gifted
	 */
	public void setIsGiftProduct(final Product item, final Boolean value)
	{
		setIsGiftProduct( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.isGiftProduct</code> attribute. 
	 * @param value the isGiftProduct - Identify a product can be gifted
	 */
	public void setIsGiftProduct(final SessionContext ctx, final Product item, final boolean value)
	{
		setIsGiftProduct( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.isGiftProduct</code> attribute. 
	 * @param value the isGiftProduct - Identify a product can be gifted
	 */
	public void setIsGiftProduct(final Product item, final boolean value)
	{
		setIsGiftProduct( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.isIndexable</code> attribute.
	 * @return the isIndexable - Specifies if the catgeory is indexable or not.
	 */
	public Boolean isIsIndexable(final SessionContext ctx, final Category item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Category.ISINDEXABLE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.isIndexable</code> attribute.
	 * @return the isIndexable - Specifies if the catgeory is indexable or not.
	 */
	public Boolean isIsIndexable(final Category item)
	{
		return isIsIndexable( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.isIndexable</code> attribute. 
	 * @return the isIndexable - Specifies if the catgeory is indexable or not.
	 */
	public boolean isIsIndexableAsPrimitive(final SessionContext ctx, final Category item)
	{
		Boolean value = isIsIndexable( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.isIndexable</code> attribute. 
	 * @return the isIndexable - Specifies if the catgeory is indexable or not.
	 */
	public boolean isIsIndexableAsPrimitive(final Category item)
	{
		return isIsIndexableAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.isIndexable</code> attribute. 
	 * @param value the isIndexable - Specifies if the catgeory is indexable or not.
	 */
	public void setIsIndexable(final SessionContext ctx, final Category item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.ISINDEXABLE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.isIndexable</code> attribute. 
	 * @param value the isIndexable - Specifies if the catgeory is indexable or not.
	 */
	public void setIsIndexable(final Category item, final Boolean value)
	{
		setIsIndexable( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.isIndexable</code> attribute. 
	 * @param value the isIndexable - Specifies if the catgeory is indexable or not.
	 */
	public void setIsIndexable(final SessionContext ctx, final Category item, final boolean value)
	{
		setIsIndexable( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.isIndexable</code> attribute. 
	 * @param value the isIndexable - Specifies if the catgeory is indexable or not.
	 */
	public void setIsIndexable(final Category item, final boolean value)
	{
		setIsIndexable( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.isOverriden</code> attribute.
	 * @return the isOverriden
	 */
	public Boolean isIsOverriden(final SessionContext ctx, final ReturnEntry item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnEntry.ISOVERRIDEN);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.isOverriden</code> attribute.
	 * @return the isOverriden
	 */
	public Boolean isIsOverriden(final ReturnEntry item)
	{
		return isIsOverriden( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.isOverriden</code> attribute. 
	 * @return the isOverriden
	 */
	public boolean isIsOverridenAsPrimitive(final SessionContext ctx, final ReturnEntry item)
	{
		Boolean value = isIsOverriden( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.isOverriden</code> attribute. 
	 * @return the isOverriden
	 */
	public boolean isIsOverridenAsPrimitive(final ReturnEntry item)
	{
		return isIsOverridenAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.isOverriden</code> attribute. 
	 * @param value the isOverriden
	 */
	public void setIsOverriden(final SessionContext ctx, final ReturnEntry item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnEntry.ISOVERRIDEN,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.isOverriden</code> attribute. 
	 * @param value the isOverriden
	 */
	public void setIsOverriden(final ReturnEntry item, final Boolean value)
	{
		setIsOverriden( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.isOverriden</code> attribute. 
	 * @param value the isOverriden
	 */
	public void setIsOverriden(final SessionContext ctx, final ReturnEntry item, final boolean value)
	{
		setIsOverriden( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.isOverriden</code> attribute. 
	 * @param value the isOverriden
	 */
	public void setIsOverriden(final ReturnEntry item, final boolean value)
	{
		setIsOverriden( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.isPromotionalPrice</code> attribute.
	 * @return the isPromotionalPrice - Identify a price is a promotional price
	 */
	public Boolean isIsPromotionalPrice(final SessionContext ctx, final PriceRow item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.PriceRow.ISPROMOTIONALPRICE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.isPromotionalPrice</code> attribute.
	 * @return the isPromotionalPrice - Identify a price is a promotional price
	 */
	public Boolean isIsPromotionalPrice(final PriceRow item)
	{
		return isIsPromotionalPrice( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.isPromotionalPrice</code> attribute. 
	 * @return the isPromotionalPrice - Identify a price is a promotional price
	 */
	public boolean isIsPromotionalPriceAsPrimitive(final SessionContext ctx, final PriceRow item)
	{
		Boolean value = isIsPromotionalPrice( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.isPromotionalPrice</code> attribute. 
	 * @return the isPromotionalPrice - Identify a price is a promotional price
	 */
	public boolean isIsPromotionalPriceAsPrimitive(final PriceRow item)
	{
		return isIsPromotionalPriceAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.isPromotionalPrice</code> attribute. 
	 * @param value the isPromotionalPrice - Identify a price is a promotional price
	 */
	public void setIsPromotionalPrice(final SessionContext ctx, final PriceRow item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.PriceRow.ISPROMOTIONALPRICE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.isPromotionalPrice</code> attribute. 
	 * @param value the isPromotionalPrice - Identify a price is a promotional price
	 */
	public void setIsPromotionalPrice(final PriceRow item, final Boolean value)
	{
		setIsPromotionalPrice( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.isPromotionalPrice</code> attribute. 
	 * @param value the isPromotionalPrice - Identify a price is a promotional price
	 */
	public void setIsPromotionalPrice(final SessionContext ctx, final PriceRow item, final boolean value)
	{
		setIsPromotionalPrice( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.isPromotionalPrice</code> attribute. 
	 * @param value the isPromotionalPrice - Identify a price is a promotional price
	 */
	public void setIsPromotionalPrice(final PriceRow item, final boolean value)
	{
		setIsPromotionalPrice( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CustomerReview.isRecommended</code> attribute.
	 * @return the isRecommended - Whether the product is recommended from customer
	 *                             point of view.
	 */
	public Boolean isIsRecommended(final SessionContext ctx, final CustomerReview item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.CustomerReview.ISRECOMMENDED);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CustomerReview.isRecommended</code> attribute.
	 * @return the isRecommended - Whether the product is recommended from customer
	 *                             point of view.
	 */
	public Boolean isIsRecommended(final CustomerReview item)
	{
		return isIsRecommended( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CustomerReview.isRecommended</code> attribute. 
	 * @return the isRecommended - Whether the product is recommended from customer
	 *                             point of view.
	 */
	public boolean isIsRecommendedAsPrimitive(final SessionContext ctx, final CustomerReview item)
	{
		Boolean value = isIsRecommended( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CustomerReview.isRecommended</code> attribute. 
	 * @return the isRecommended - Whether the product is recommended from customer
	 *                             point of view.
	 */
	public boolean isIsRecommendedAsPrimitive(final CustomerReview item)
	{
		return isIsRecommendedAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CustomerReview.isRecommended</code> attribute. 
	 * @param value the isRecommended - Whether the product is recommended from customer
	 *                             point of view.
	 */
	public void setIsRecommended(final SessionContext ctx, final CustomerReview item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.CustomerReview.ISRECOMMENDED,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CustomerReview.isRecommended</code> attribute. 
	 * @param value the isRecommended - Whether the product is recommended from customer
	 *                             point of view.
	 */
	public void setIsRecommended(final CustomerReview item, final Boolean value)
	{
		setIsRecommended( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CustomerReview.isRecommended</code> attribute. 
	 * @param value the isRecommended - Whether the product is recommended from customer
	 *                             point of view.
	 */
	public void setIsRecommended(final SessionContext ctx, final CustomerReview item, final boolean value)
	{
		setIsRecommended( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CustomerReview.isRecommended</code> attribute. 
	 * @param value the isRecommended - Whether the product is recommended from customer
	 *                             point of view.
	 */
	public void setIsRecommended(final CustomerReview item, final boolean value)
	{
		setIsRecommended( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.isSocialPicUploaded</code> attribute.
	 * @return the isSocialPicUploaded
	 */
	public Boolean isIsSocialPicUploaded(final SessionContext ctx, final Customer item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.ISSOCIALPICUPLOADED);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.isSocialPicUploaded</code> attribute.
	 * @return the isSocialPicUploaded
	 */
	public Boolean isIsSocialPicUploaded(final Customer item)
	{
		return isIsSocialPicUploaded( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.isSocialPicUploaded</code> attribute. 
	 * @return the isSocialPicUploaded
	 */
	public boolean isIsSocialPicUploadedAsPrimitive(final SessionContext ctx, final Customer item)
	{
		Boolean value = isIsSocialPicUploaded( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.isSocialPicUploaded</code> attribute. 
	 * @return the isSocialPicUploaded
	 */
	public boolean isIsSocialPicUploadedAsPrimitive(final Customer item)
	{
		return isIsSocialPicUploadedAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.isSocialPicUploaded</code> attribute. 
	 * @param value the isSocialPicUploaded
	 */
	public void setIsSocialPicUploaded(final SessionContext ctx, final Customer item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.ISSOCIALPICUPLOADED,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.isSocialPicUploaded</code> attribute. 
	 * @param value the isSocialPicUploaded
	 */
	public void setIsSocialPicUploaded(final Customer item, final Boolean value)
	{
		setIsSocialPicUploaded( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.isSocialPicUploaded</code> attribute. 
	 * @param value the isSocialPicUploaded
	 */
	public void setIsSocialPicUploaded(final SessionContext ctx, final Customer item, final boolean value)
	{
		setIsSocialPicUploaded( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.isSocialPicUploaded</code> attribute. 
	 * @param value the isSocialPicUploaded
	 */
	public void setIsSocialPicUploaded(final Customer item, final boolean value)
	{
		setIsSocialPicUploaded( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Warehouse.isStorePickupAvailable</code> attribute.
	 * @return the isStorePickupAvailable - to check is pickup from store facility available on this warehouse or not
	 */
	public Boolean isIsStorePickupAvailable(final SessionContext ctx, final Warehouse item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Warehouse.ISSTOREPICKUPAVAILABLE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Warehouse.isStorePickupAvailable</code> attribute.
	 * @return the isStorePickupAvailable - to check is pickup from store facility available on this warehouse or not
	 */
	public Boolean isIsStorePickupAvailable(final Warehouse item)
	{
		return isIsStorePickupAvailable( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Warehouse.isStorePickupAvailable</code> attribute. 
	 * @return the isStorePickupAvailable - to check is pickup from store facility available on this warehouse or not
	 */
	public boolean isIsStorePickupAvailableAsPrimitive(final SessionContext ctx, final Warehouse item)
	{
		Boolean value = isIsStorePickupAvailable( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Warehouse.isStorePickupAvailable</code> attribute. 
	 * @return the isStorePickupAvailable - to check is pickup from store facility available on this warehouse or not
	 */
	public boolean isIsStorePickupAvailableAsPrimitive(final Warehouse item)
	{
		return isIsStorePickupAvailableAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Warehouse.isStorePickupAvailable</code> attribute. 
	 * @param value the isStorePickupAvailable - to check is pickup from store facility available on this warehouse or not
	 */
	public void setIsStorePickupAvailable(final SessionContext ctx, final Warehouse item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Warehouse.ISSTOREPICKUPAVAILABLE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Warehouse.isStorePickupAvailable</code> attribute. 
	 * @param value the isStorePickupAvailable - to check is pickup from store facility available on this warehouse or not
	 */
	public void setIsStorePickupAvailable(final Warehouse item, final Boolean value)
	{
		setIsStorePickupAvailable( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Warehouse.isStorePickupAvailable</code> attribute. 
	 * @param value the isStorePickupAvailable - to check is pickup from store facility available on this warehouse or not
	 */
	public void setIsStorePickupAvailable(final SessionContext ctx, final Warehouse item, final boolean value)
	{
		setIsStorePickupAvailable( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Warehouse.isStorePickupAvailable</code> attribute. 
	 * @param value the isStorePickupAvailable - to check is pickup from store facility available on this warehouse or not
	 */
	public void setIsStorePickupAvailable(final Warehouse item, final boolean value)
	{
		setIsStorePickupAvailable( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.isSubscribed</code> attribute.
	 * @return the isSubscribed - Is Subscribed
	 */
	public Integer getIsSubscribed(final SessionContext ctx, final Customer item)
	{
		return (Integer)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.ISSUBSCRIBED);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.isSubscribed</code> attribute.
	 * @return the isSubscribed - Is Subscribed
	 */
	public Integer getIsSubscribed(final Customer item)
	{
		return getIsSubscribed( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.isSubscribed</code> attribute. 
	 * @return the isSubscribed - Is Subscribed
	 */
	public int getIsSubscribedAsPrimitive(final SessionContext ctx, final Customer item)
	{
		Integer value = getIsSubscribed( ctx,item );
		return value != null ? value.intValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.isSubscribed</code> attribute. 
	 * @return the isSubscribed - Is Subscribed
	 */
	public int getIsSubscribedAsPrimitive(final Customer item)
	{
		return getIsSubscribedAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.isSubscribed</code> attribute. 
	 * @param value the isSubscribed - Is Subscribed
	 */
	public void setIsSubscribed(final SessionContext ctx, final Customer item, final Integer value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.ISSUBSCRIBED,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.isSubscribed</code> attribute. 
	 * @param value the isSubscribed - Is Subscribed
	 */
	public void setIsSubscribed(final Customer item, final Integer value)
	{
		setIsSubscribed( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.isSubscribed</code> attribute. 
	 * @param value the isSubscribed - Is Subscribed
	 */
	public void setIsSubscribed(final SessionContext ctx, final Customer item, final int value)
	{
		setIsSubscribed( ctx, item, Integer.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.isSubscribed</code> attribute. 
	 * @param value the isSubscribed - Is Subscribed
	 */
	public void setIsSubscribed(final Customer item, final int value)
	{
		setIsSubscribed( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.isSumofProductsPriceRow</code> attribute.
	 * @return the isSumofProductsPriceRow - To Identify that Price Row is Sum of all Product
	 * 							Prices in BundleProduct
	 */
	public Boolean isIsSumofProductsPriceRow(final SessionContext ctx, final PriceRow item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.PriceRow.ISSUMOFPRODUCTSPRICEROW);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.isSumofProductsPriceRow</code> attribute.
	 * @return the isSumofProductsPriceRow - To Identify that Price Row is Sum of all Product
	 * 							Prices in BundleProduct
	 */
	public Boolean isIsSumofProductsPriceRow(final PriceRow item)
	{
		return isIsSumofProductsPriceRow( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.isSumofProductsPriceRow</code> attribute. 
	 * @return the isSumofProductsPriceRow - To Identify that Price Row is Sum of all Product
	 * 							Prices in BundleProduct
	 */
	public boolean isIsSumofProductsPriceRowAsPrimitive(final SessionContext ctx, final PriceRow item)
	{
		Boolean value = isIsSumofProductsPriceRow( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.isSumofProductsPriceRow</code> attribute. 
	 * @return the isSumofProductsPriceRow - To Identify that Price Row is Sum of all Product
	 * 							Prices in BundleProduct
	 */
	public boolean isIsSumofProductsPriceRowAsPrimitive(final PriceRow item)
	{
		return isIsSumofProductsPriceRowAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.isSumofProductsPriceRow</code> attribute. 
	 * @param value the isSumofProductsPriceRow - To Identify that Price Row is Sum of all Product
	 * 							Prices in BundleProduct
	 */
	public void setIsSumofProductsPriceRow(final SessionContext ctx, final PriceRow item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.PriceRow.ISSUMOFPRODUCTSPRICEROW,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.isSumofProductsPriceRow</code> attribute. 
	 * @param value the isSumofProductsPriceRow - To Identify that Price Row is Sum of all Product
	 * 							Prices in BundleProduct
	 */
	public void setIsSumofProductsPriceRow(final PriceRow item, final Boolean value)
	{
		setIsSumofProductsPriceRow( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.isSumofProductsPriceRow</code> attribute. 
	 * @param value the isSumofProductsPriceRow - To Identify that Price Row is Sum of all Product
	 * 							Prices in BundleProduct
	 */
	public void setIsSumofProductsPriceRow(final SessionContext ctx, final PriceRow item, final boolean value)
	{
		setIsSumofProductsPriceRow( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.isSumofProductsPriceRow</code> attribute. 
	 * @param value the isSumofProductsPriceRow - To Identify that Price Row is Sum of all Product
	 * 							Prices in BundleProduct
	 */
	public void setIsSumofProductsPriceRow(final PriceRow item, final boolean value)
	{
		setIsSumofProductsPriceRow( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.isVirtualCategory</code> attribute.
	 * @return the isVirtualCategory - Is Virtual Category
	 */
	public Boolean isIsVirtualCategory(final SessionContext ctx, final Category item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Category.ISVIRTUALCATEGORY);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.isVirtualCategory</code> attribute.
	 * @return the isVirtualCategory - Is Virtual Category
	 */
	public Boolean isIsVirtualCategory(final Category item)
	{
		return isIsVirtualCategory( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.isVirtualCategory</code> attribute. 
	 * @return the isVirtualCategory - Is Virtual Category
	 */
	public boolean isIsVirtualCategoryAsPrimitive(final SessionContext ctx, final Category item)
	{
		Boolean value = isIsVirtualCategory( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.isVirtualCategory</code> attribute. 
	 * @return the isVirtualCategory - Is Virtual Category
	 */
	public boolean isIsVirtualCategoryAsPrimitive(final Category item)
	{
		return isIsVirtualCategoryAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.isVirtualCategory</code> attribute. 
	 * @param value the isVirtualCategory - Is Virtual Category
	 */
	public void setIsVirtualCategory(final SessionContext ctx, final Category item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.ISVIRTUALCATEGORY,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.isVirtualCategory</code> attribute. 
	 * @param value the isVirtualCategory - Is Virtual Category
	 */
	public void setIsVirtualCategory(final Category item, final Boolean value)
	{
		setIsVirtualCategory( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.isVirtualCategory</code> attribute. 
	 * @param value the isVirtualCategory - Is Virtual Category
	 */
	public void setIsVirtualCategory(final SessionContext ctx, final Category item, final boolean value)
	{
		setIsVirtualCategory( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.isVirtualCategory</code> attribute. 
	 * @param value the isVirtualCategory - Is Virtual Category
	 */
	public void setIsVirtualCategory(final Category item, final boolean value)
	{
		setIsVirtualCategory( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.itemDiscount</code> attribute.
	 * @return the itemDiscount
	 */
	public Double getItemDiscount(final SessionContext ctx, final AbstractOrderEntry item)
	{
		return (Double)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrderEntry.ITEMDISCOUNT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.itemDiscount</code> attribute.
	 * @return the itemDiscount
	 */
	public Double getItemDiscount(final AbstractOrderEntry item)
	{
		return getItemDiscount( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.itemDiscount</code> attribute. 
	 * @return the itemDiscount
	 */
	public double getItemDiscountAsPrimitive(final SessionContext ctx, final AbstractOrderEntry item)
	{
		Double value = getItemDiscount( ctx,item );
		return value != null ? value.doubleValue() : 0.0d;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.itemDiscount</code> attribute. 
	 * @return the itemDiscount
	 */
	public double getItemDiscountAsPrimitive(final AbstractOrderEntry item)
	{
		return getItemDiscountAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.itemDiscount</code> attribute. 
	 * @param value the itemDiscount
	 */
	public void setItemDiscount(final SessionContext ctx, final AbstractOrderEntry item, final Double value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrderEntry.ITEMDISCOUNT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.itemDiscount</code> attribute. 
	 * @param value the itemDiscount
	 */
	public void setItemDiscount(final AbstractOrderEntry item, final Double value)
	{
		setItemDiscount( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.itemDiscount</code> attribute. 
	 * @param value the itemDiscount
	 */
	public void setItemDiscount(final SessionContext ctx, final AbstractOrderEntry item, final double value)
	{
		setItemDiscount( ctx, item, Double.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.itemDiscount</code> attribute. 
	 * @param value the itemDiscount
	 */
	public void setItemDiscount(final AbstractOrderEntry item, final double value)
	{
		setItemDiscount( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.itemValWithShipping</code> attribute.
	 * @return the itemValWithShipping
	 */
	public Double getItemValWithShipping(final SessionContext ctx, final AbstractOrderEntry item)
	{
		return (Double)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrderEntry.ITEMVALWITHSHIPPING);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.itemValWithShipping</code> attribute.
	 * @return the itemValWithShipping
	 */
	public Double getItemValWithShipping(final AbstractOrderEntry item)
	{
		return getItemValWithShipping( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.itemValWithShipping</code> attribute. 
	 * @return the itemValWithShipping
	 */
	public double getItemValWithShippingAsPrimitive(final SessionContext ctx, final AbstractOrderEntry item)
	{
		Double value = getItemValWithShipping( ctx,item );
		return value != null ? value.doubleValue() : 0.0d;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.itemValWithShipping</code> attribute. 
	 * @return the itemValWithShipping
	 */
	public double getItemValWithShippingAsPrimitive(final AbstractOrderEntry item)
	{
		return getItemValWithShippingAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.itemValWithShipping</code> attribute. 
	 * @param value the itemValWithShipping
	 */
	public void setItemValWithShipping(final SessionContext ctx, final AbstractOrderEntry item, final Double value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrderEntry.ITEMVALWITHSHIPPING,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.itemValWithShipping</code> attribute. 
	 * @param value the itemValWithShipping
	 */
	public void setItemValWithShipping(final AbstractOrderEntry item, final Double value)
	{
		setItemValWithShipping( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.itemValWithShipping</code> attribute. 
	 * @param value the itemValWithShipping
	 */
	public void setItemValWithShipping(final SessionContext ctx, final AbstractOrderEntry item, final double value)
	{
		setItemValWithShipping( ctx, item, Double.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.itemValWithShipping</code> attribute. 
	 * @param value the itemValWithShipping
	 */
	public void setItemValWithShipping(final AbstractOrderEntry item, final double value)
	{
		setItemValWithShipping( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.kids</code> attribute.
	 * @return the kids
	 */
	public Boolean isKids(final SessionContext ctx, final Customer item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.KIDS);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.kids</code> attribute.
	 * @return the kids
	 */
	public Boolean isKids(final Customer item)
	{
		return isKids( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.kids</code> attribute. 
	 * @return the kids
	 */
	public boolean isKidsAsPrimitive(final SessionContext ctx, final Customer item)
	{
		Boolean value = isKids( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.kids</code> attribute. 
	 * @return the kids
	 */
	public boolean isKidsAsPrimitive(final Customer item)
	{
		return isKidsAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.kids</code> attribute. 
	 * @param value the kids
	 */
	public void setKids(final SessionContext ctx, final Customer item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.KIDS,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.kids</code> attribute. 
	 * @param value the kids
	 */
	public void setKids(final Customer item, final Boolean value)
	{
		setKids( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.kids</code> attribute. 
	 * @param value the kids
	 */
	public void setKids(final SessionContext ctx, final Customer item, final boolean value)
	{
		setKids( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.kids</code> attribute. 
	 * @param value the kids
	 */
	public void setKids(final Customer item, final boolean value)
	{
		setKids( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.landlinenumber</code> attribute.
	 * @return the landlinenumber - Land Line Number
	 */
	public String getLandlinenumber(final SessionContext ctx, final Customer item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.LANDLINENUMBER);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.landlinenumber</code> attribute.
	 * @return the landlinenumber - Land Line Number
	 */
	public String getLandlinenumber(final Customer item)
	{
		return getLandlinenumber( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.landlinenumber</code> attribute. 
	 * @param value the landlinenumber - Land Line Number
	 */
	public void setLandlinenumber(final SessionContext ctx, final Customer item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.LANDLINENUMBER,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.landlinenumber</code> attribute. 
	 * @param value the landlinenumber - Land Line Number
	 */
	public void setLandlinenumber(final Customer item, final String value)
	{
		setLandlinenumber( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Cart.lastUpdatedTime</code> attribute.
	 * @return the lastUpdatedTime - Abonded cart mail
	 */
	public Date getLastUpdatedTime(final SessionContext ctx, final Cart item)
	{
		return (Date)item.getProperty( ctx, SslCoreConstants.Attributes.Cart.LASTUPDATEDTIME);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Cart.lastUpdatedTime</code> attribute.
	 * @return the lastUpdatedTime - Abonded cart mail
	 */
	public Date getLastUpdatedTime(final Cart item)
	{
		return getLastUpdatedTime( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Cart.lastUpdatedTime</code> attribute. 
	 * @param value the lastUpdatedTime - Abonded cart mail
	 */
	public void setLastUpdatedTime(final SessionContext ctx, final Cart item, final Date value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Cart.LASTUPDATEDTIME,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Cart.lastUpdatedTime</code> attribute. 
	 * @param value the lastUpdatedTime - Abonded cart mail
	 */
	public void setLastUpdatedTime(final Cart item, final Date value)
	{
		setLastUpdatedTime( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Warehouse.latitude</code> attribute.
	 * @return the latitude - Latitude of the Warehouse
	 */
	public Double getLatitude(final SessionContext ctx, final Warehouse item)
	{
		return (Double)item.getProperty( ctx, SslCoreConstants.Attributes.Warehouse.LATITUDE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Warehouse.latitude</code> attribute.
	 * @return the latitude - Latitude of the Warehouse
	 */
	public Double getLatitude(final Warehouse item)
	{
		return getLatitude( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Warehouse.latitude</code> attribute. 
	 * @return the latitude - Latitude of the Warehouse
	 */
	public double getLatitudeAsPrimitive(final SessionContext ctx, final Warehouse item)
	{
		Double value = getLatitude( ctx,item );
		return value != null ? value.doubleValue() : 0.0d;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Warehouse.latitude</code> attribute. 
	 * @return the latitude - Latitude of the Warehouse
	 */
	public double getLatitudeAsPrimitive(final Warehouse item)
	{
		return getLatitudeAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Warehouse.latitude</code> attribute. 
	 * @param value the latitude - Latitude of the Warehouse
	 */
	public void setLatitude(final SessionContext ctx, final Warehouse item, final Double value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Warehouse.LATITUDE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Warehouse.latitude</code> attribute. 
	 * @param value the latitude - Latitude of the Warehouse
	 */
	public void setLatitude(final Warehouse item, final Double value)
	{
		setLatitude( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Warehouse.latitude</code> attribute. 
	 * @param value the latitude - Latitude of the Warehouse
	 */
	public void setLatitude(final SessionContext ctx, final Warehouse item, final double value)
	{
		setLatitude( ctx, item, Double.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Warehouse.latitude</code> attribute. 
	 * @param value the latitude - Latitude of the Warehouse
	 */
	public void setLatitude(final Warehouse item, final double value)
	{
		setLatitude( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.limited</code> attribute.
	 * @return the limited - To indicate is limited product
	 */
	public Boolean isLimited(final SessionContext ctx, final Product item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Product.LIMITED);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.limited</code> attribute.
	 * @return the limited - To indicate is limited product
	 */
	public Boolean isLimited(final Product item)
	{
		return isLimited( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.limited</code> attribute. 
	 * @return the limited - To indicate is limited product
	 */
	public boolean isLimitedAsPrimitive(final SessionContext ctx, final Product item)
	{
		Boolean value = isLimited( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.limited</code> attribute. 
	 * @return the limited - To indicate is limited product
	 */
	public boolean isLimitedAsPrimitive(final Product item)
	{
		return isLimitedAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.limited</code> attribute. 
	 * @param value the limited - To indicate is limited product
	 */
	public void setLimited(final SessionContext ctx, final Product item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.LIMITED,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.limited</code> attribute. 
	 * @param value the limited - To indicate is limited product
	 */
	public void setLimited(final Product item, final Boolean value)
	{
		setLimited( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.limited</code> attribute. 
	 * @param value the limited - To indicate is limited product
	 */
	public void setLimited(final SessionContext ctx, final Product item, final boolean value)
	{
		setLimited( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.limited</code> attribute. 
	 * @param value the limited - To indicate is limited product
	 */
	public void setLimited(final Product item, final boolean value)
	{
		setLimited( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>SolrFacetSearchConfig.lineCountShowMore</code> attribute.
	 * @return the lineCountShowMore
	 */
	public String getLineCountShowMore(final SessionContext ctx, final SolrFacetSearchConfig item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.SolrFacetSearchConfig.LINECOUNTSHOWMORE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>SolrFacetSearchConfig.lineCountShowMore</code> attribute.
	 * @return the lineCountShowMore
	 */
	public String getLineCountShowMore(final SolrFacetSearchConfig item)
	{
		return getLineCountShowMore( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>SolrFacetSearchConfig.lineCountShowMore</code> attribute. 
	 * @param value the lineCountShowMore
	 */
	public void setLineCountShowMore(final SessionContext ctx, final SolrFacetSearchConfig item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.SolrFacetSearchConfig.LINECOUNTSHOWMORE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>SolrFacetSearchConfig.lineCountShowMore</code> attribute. 
	 * @param value the lineCountShowMore
	 */
	public void setLineCountShowMore(final SolrFacetSearchConfig item, final String value)
	{
		setLineCountShowMore( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSNavigationNode.link</code> attribute.
	 * @return the link
	 */
	public String getLink(final SessionContext ctx, final CMSNavigationNode item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.CMSNavigationNode.LINK);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSNavigationNode.link</code> attribute.
	 * @return the link
	 */
	public String getLink(final CMSNavigationNode item)
	{
		return getLink( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSNavigationNode.link</code> attribute. 
	 * @param value the link
	 */
	public void setLink(final SessionContext ctx, final CMSNavigationNode item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.CMSNavigationNode.LINK,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSNavigationNode.link</code> attribute. 
	 * @param value the link
	 */
	public void setLink(final CMSNavigationNode item, final String value)
	{
		setLink( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSLinkComponent.linkCategoryType</code> attribute.
	 * @return the linkCategoryType - Describe the Category Url type for Mobile
	 *                             Application(L1/L2/L3)
	 */
	public EnumerationValue getLinkCategoryType(final SessionContext ctx, final CMSLinkComponent item)
	{
		return (EnumerationValue)item.getProperty( ctx, SslCoreConstants.Attributes.CMSLinkComponent.LINKCATEGORYTYPE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSLinkComponent.linkCategoryType</code> attribute.
	 * @return the linkCategoryType - Describe the Category Url type for Mobile
	 *                             Application(L1/L2/L3)
	 */
	public EnumerationValue getLinkCategoryType(final CMSLinkComponent item)
	{
		return getLinkCategoryType( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSLinkComponent.linkCategoryType</code> attribute. 
	 * @param value the linkCategoryType - Describe the Category Url type for Mobile
	 *                             Application(L1/L2/L3)
	 */
	public void setLinkCategoryType(final SessionContext ctx, final CMSLinkComponent item, final EnumerationValue value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.CMSLinkComponent.LINKCATEGORYTYPE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSLinkComponent.linkCategoryType</code> attribute. 
	 * @param value the linkCategoryType - Describe the Category Url type for Mobile
	 *                             Application(L1/L2/L3)
	 */
	public void setLinkCategoryType(final CMSLinkComponent item, final EnumerationValue value)
	{
		setLinkCategoryType( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSLinkComponent.linkLabel</code> attribute.
	 * @return the linkLabel - Describe the Link Label
	 */
	public String getLinkLabel(final SessionContext ctx, final CMSLinkComponent item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.CMSLinkComponent.LINKLABEL);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSLinkComponent.linkLabel</code> attribute.
	 * @return the linkLabel - Describe the Link Label
	 */
	public String getLinkLabel(final CMSLinkComponent item)
	{
		return getLinkLabel( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSLinkComponent.linkLabel</code> attribute. 
	 * @param value the linkLabel - Describe the Link Label
	 */
	public void setLinkLabel(final SessionContext ctx, final CMSLinkComponent item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.CMSLinkComponent.LINKLABEL,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSLinkComponent.linkLabel</code> attribute. 
	 * @param value the linkLabel - Describe the Link Label
	 */
	public void setLinkLabel(final CMSLinkComponent item, final String value)
	{
		setLinkLabel( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSLinkComponent.linkTextColor</code> attribute.
	 * @return the linkTextColor - Color Of Link Text
	 */
	public String getLinkTextColor(final SessionContext ctx, final CMSLinkComponent item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.CMSLinkComponent.LINKTEXTCOLOR);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSLinkComponent.linkTextColor</code> attribute.
	 * @return the linkTextColor - Color Of Link Text
	 */
	public String getLinkTextColor(final CMSLinkComponent item)
	{
		return getLinkTextColor( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSLinkComponent.linkTextColor</code> attribute. 
	 * @param value the linkTextColor - Color Of Link Text
	 */
	public void setLinkTextColor(final SessionContext ctx, final CMSLinkComponent item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.CMSLinkComponent.LINKTEXTCOLOR,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSLinkComponent.linkTextColor</code> attribute. 
	 * @param value the linkTextColor - Color Of Link Text
	 */
	public void setLinkTextColor(final CMSLinkComponent item, final String value)
	{
		setLinkTextColor( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSLinkComponent.linkType</code> attribute.
	 * @return the linkType - Describe the Url type for Mobile
	 *                             Application(category/product/fcc)
	 */
	public EnumerationValue getLinkType(final SessionContext ctx, final CMSLinkComponent item)
	{
		return (EnumerationValue)item.getProperty( ctx, SslCoreConstants.Attributes.CMSLinkComponent.LINKTYPE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSLinkComponent.linkType</code> attribute.
	 * @return the linkType - Describe the Url type for Mobile
	 *                             Application(category/product/fcc)
	 */
	public EnumerationValue getLinkType(final CMSLinkComponent item)
	{
		return getLinkType( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSLinkComponent.linkType</code> attribute. 
	 * @param value the linkType - Describe the Url type for Mobile
	 *                             Application(category/product/fcc)
	 */
	public void setLinkType(final SessionContext ctx, final CMSLinkComponent item, final EnumerationValue value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.CMSLinkComponent.LINKTYPE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSLinkComponent.linkType</code> attribute. 
	 * @param value the linkType - Describe the Url type for Mobile
	 *                             Application(category/product/fcc)
	 */
	public void setLinkType(final CMSLinkComponent item, final EnumerationValue value)
	{
		setLinkType( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>SimpleBannerComponent.linkType</code> attribute.
	 * @return the linkType - Describe the Url type for Mobile
	 *                             Application(category/product/fcc)
	 */
	public EnumerationValue getLinkType(final SessionContext ctx, final SimpleBannerComponent item)
	{
		return (EnumerationValue)item.getProperty( ctx, SslCoreConstants.Attributes.SimpleBannerComponent.LINKTYPE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>SimpleBannerComponent.linkType</code> attribute.
	 * @return the linkType - Describe the Url type for Mobile
	 *                             Application(category/product/fcc)
	 */
	public EnumerationValue getLinkType(final SimpleBannerComponent item)
	{
		return getLinkType( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>SimpleBannerComponent.linkType</code> attribute. 
	 * @param value the linkType - Describe the Url type for Mobile
	 *                             Application(category/product/fcc)
	 */
	public void setLinkType(final SessionContext ctx, final SimpleBannerComponent item, final EnumerationValue value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.SimpleBannerComponent.LINKTYPE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>SimpleBannerComponent.linkType</code> attribute. 
	 * @param value the linkType - Describe the Url type for Mobile
	 *                             Application(category/product/fcc)
	 */
	public void setLinkType(final SimpleBannerComponent item, final EnumerationValue value)
	{
		setLinkType( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.locationID</code> attribute.
	 * @return the locationID - Location ID
	 */
	public Integer getLocationID(final SessionContext ctx, final PriceRow item)
	{
		return (Integer)item.getProperty( ctx, SslCoreConstants.Attributes.PriceRow.LOCATIONID);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.locationID</code> attribute.
	 * @return the locationID - Location ID
	 */
	public Integer getLocationID(final PriceRow item)
	{
		return getLocationID( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.locationID</code> attribute. 
	 * @return the locationID - Location ID
	 */
	public int getLocationIDAsPrimitive(final SessionContext ctx, final PriceRow item)
	{
		Integer value = getLocationID( ctx,item );
		return value != null ? value.intValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.locationID</code> attribute. 
	 * @return the locationID - Location ID
	 */
	public int getLocationIDAsPrimitive(final PriceRow item)
	{
		return getLocationIDAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.locationID</code> attribute. 
	 * @param value the locationID - Location ID
	 */
	public void setLocationID(final SessionContext ctx, final PriceRow item, final Integer value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.PriceRow.LOCATIONID,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.locationID</code> attribute. 
	 * @param value the locationID - Location ID
	 */
	public void setLocationID(final PriceRow item, final Integer value)
	{
		setLocationID( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.locationID</code> attribute. 
	 * @param value the locationID - Location ID
	 */
	public void setLocationID(final SessionContext ctx, final PriceRow item, final int value)
	{
		setLocationID( ctx, item, Integer.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.locationID</code> attribute. 
	 * @param value the locationID - Location ID
	 */
	public void setLocationID(final PriceRow item, final int value)
	{
		setLocationID( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>DiscountRow.locationID</code> attribute.
	 * @return the locationID - Location ID
	 */
	public Integer getLocationID(final SessionContext ctx, final DiscountRow item)
	{
		return (Integer)item.getProperty( ctx, SslCoreConstants.Attributes.DiscountRow.LOCATIONID);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>DiscountRow.locationID</code> attribute.
	 * @return the locationID - Location ID
	 */
	public Integer getLocationID(final DiscountRow item)
	{
		return getLocationID( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>DiscountRow.locationID</code> attribute. 
	 * @return the locationID - Location ID
	 */
	public int getLocationIDAsPrimitive(final SessionContext ctx, final DiscountRow item)
	{
		Integer value = getLocationID( ctx,item );
		return value != null ? value.intValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>DiscountRow.locationID</code> attribute. 
	 * @return the locationID - Location ID
	 */
	public int getLocationIDAsPrimitive(final DiscountRow item)
	{
		return getLocationIDAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>DiscountRow.locationID</code> attribute. 
	 * @param value the locationID - Location ID
	 */
	public void setLocationID(final SessionContext ctx, final DiscountRow item, final Integer value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.DiscountRow.LOCATIONID,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>DiscountRow.locationID</code> attribute. 
	 * @param value the locationID - Location ID
	 */
	public void setLocationID(final DiscountRow item, final Integer value)
	{
		setLocationID( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>DiscountRow.locationID</code> attribute. 
	 * @param value the locationID - Location ID
	 */
	public void setLocationID(final SessionContext ctx, final DiscountRow item, final int value)
	{
		setLocationID( ctx, item, Integer.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>DiscountRow.locationID</code> attribute. 
	 * @param value the locationID - Location ID
	 */
	public void setLocationID(final DiscountRow item, final int value)
	{
		setLocationID( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Warehouse.longitude</code> attribute.
	 * @return the longitude - Longitude of the Warehouse
	 */
	public Double getLongitude(final SessionContext ctx, final Warehouse item)
	{
		return (Double)item.getProperty( ctx, SslCoreConstants.Attributes.Warehouse.LONGITUDE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Warehouse.longitude</code> attribute.
	 * @return the longitude - Longitude of the Warehouse
	 */
	public Double getLongitude(final Warehouse item)
	{
		return getLongitude( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Warehouse.longitude</code> attribute. 
	 * @return the longitude - Longitude of the Warehouse
	 */
	public double getLongitudeAsPrimitive(final SessionContext ctx, final Warehouse item)
	{
		Double value = getLongitude( ctx,item );
		return value != null ? value.doubleValue() : 0.0d;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Warehouse.longitude</code> attribute. 
	 * @return the longitude - Longitude of the Warehouse
	 */
	public double getLongitudeAsPrimitive(final Warehouse item)
	{
		return getLongitudeAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Warehouse.longitude</code> attribute. 
	 * @param value the longitude - Longitude of the Warehouse
	 */
	public void setLongitude(final SessionContext ctx, final Warehouse item, final Double value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Warehouse.LONGITUDE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Warehouse.longitude</code> attribute. 
	 * @param value the longitude - Longitude of the Warehouse
	 */
	public void setLongitude(final Warehouse item, final Double value)
	{
		setLongitude( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Warehouse.longitude</code> attribute. 
	 * @param value the longitude - Longitude of the Warehouse
	 */
	public void setLongitude(final SessionContext ctx, final Warehouse item, final double value)
	{
		setLongitude( ctx, item, Double.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Warehouse.longitude</code> attribute. 
	 * @param value the longitude - Longitude of the Warehouse
	 */
	public void setLongitude(final Warehouse item, final double value)
	{
		setLongitude( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Order.loyaltyOrderFlag</code> attribute.
	 * @return the loyaltyOrderFlag - if user is first citizen then this flag will be true
	 */
	public Boolean isLoyaltyOrderFlag(final SessionContext ctx, final Order item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Order.LOYALTYORDERFLAG);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Order.loyaltyOrderFlag</code> attribute.
	 * @return the loyaltyOrderFlag - if user is first citizen then this flag will be true
	 */
	public Boolean isLoyaltyOrderFlag(final Order item)
	{
		return isLoyaltyOrderFlag( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Order.loyaltyOrderFlag</code> attribute. 
	 * @return the loyaltyOrderFlag - if user is first citizen then this flag will be true
	 */
	public boolean isLoyaltyOrderFlagAsPrimitive(final SessionContext ctx, final Order item)
	{
		Boolean value = isLoyaltyOrderFlag( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Order.loyaltyOrderFlag</code> attribute. 
	 * @return the loyaltyOrderFlag - if user is first citizen then this flag will be true
	 */
	public boolean isLoyaltyOrderFlagAsPrimitive(final Order item)
	{
		return isLoyaltyOrderFlagAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Order.loyaltyOrderFlag</code> attribute. 
	 * @param value the loyaltyOrderFlag - if user is first citizen then this flag will be true
	 */
	public void setLoyaltyOrderFlag(final SessionContext ctx, final Order item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Order.LOYALTYORDERFLAG,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Order.loyaltyOrderFlag</code> attribute. 
	 * @param value the loyaltyOrderFlag - if user is first citizen then this flag will be true
	 */
	public void setLoyaltyOrderFlag(final Order item, final Boolean value)
	{
		setLoyaltyOrderFlag( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Order.loyaltyOrderFlag</code> attribute. 
	 * @param value the loyaltyOrderFlag - if user is first citizen then this flag will be true
	 */
	public void setLoyaltyOrderFlag(final SessionContext ctx, final Order item, final boolean value)
	{
		setLoyaltyOrderFlag( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Order.loyaltyOrderFlag</code> attribute. 
	 * @param value the loyaltyOrderFlag - if user is first citizen then this flag will be true
	 */
	public void setLoyaltyOrderFlag(final Order item, final boolean value)
	{
		setLoyaltyOrderFlag( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSLinkComponent.lThreeCategory</code> attribute.
	 * @return the lThreeCategory - Product tag for plp
	 */
	public String getLThreeCategory(final SessionContext ctx, final CMSLinkComponent item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.CMSLinkComponent.LTHREECATEGORY);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSLinkComponent.lThreeCategory</code> attribute.
	 * @return the lThreeCategory - Product tag for plp
	 */
	public String getLThreeCategory(final CMSLinkComponent item)
	{
		return getLThreeCategory( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSLinkComponent.lThreeCategory</code> attribute. 
	 * @param value the lThreeCategory - Product tag for plp
	 */
	public void setLThreeCategory(final SessionContext ctx, final CMSLinkComponent item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.CMSLinkComponent.LTHREECATEGORY,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSLinkComponent.lThreeCategory</code> attribute. 
	 * @param value the lThreeCategory - Product tag for plp
	 */
	public void setLThreeCategory(final CMSLinkComponent item, final String value)
	{
		setLThreeCategory( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.macAddress</code> attribute.
	 * @return the macAddress - MAC Address of user
	 */
	public String getMacAddress(final SessionContext ctx, final Customer item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.MACADDRESS);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.macAddress</code> attribute.
	 * @return the macAddress - MAC Address of user
	 */
	public String getMacAddress(final Customer item)
	{
		return getMacAddress( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.macAddress</code> attribute. 
	 * @param value the macAddress - MAC Address of user
	 */
	public void setMacAddress(final SessionContext ctx, final Customer item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.MACADDRESS,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.macAddress</code> attribute. 
	 * @param value the macAddress - MAC Address of user
	 */
	public void setMacAddress(final Customer item, final String value)
	{
		setMacAddress( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.married</code> attribute.
	 * @return the married - Marital Status
	 */
	public EnumerationValue getMarried(final SessionContext ctx, final Customer item)
	{
		return (EnumerationValue)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.MARRIED);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.married</code> attribute.
	 * @return the married - Marital Status
	 */
	public EnumerationValue getMarried(final Customer item)
	{
		return getMarried( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.married</code> attribute. 
	 * @param value the married - Marital Status
	 */
	public void setMarried(final SessionContext ctx, final Customer item, final EnumerationValue value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.MARRIED,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.married</code> attribute. 
	 * @param value the married - Marital Status
	 */
	public void setMarried(final Customer item, final EnumerationValue value)
	{
		setMarried( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>SimpleBannerComponent.mediaList</code> attribute.
	 * @return the mediaList
	 */
	public List<Media> getMediaList(final SessionContext ctx, final SimpleBannerComponent item)
	{
		List<Media> coll = (List<Media>)item.getProperty( ctx, SslCoreConstants.Attributes.SimpleBannerComponent.MEDIALIST);
		return coll != null ? coll : Collections.EMPTY_LIST;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>SimpleBannerComponent.mediaList</code> attribute.
	 * @return the mediaList
	 */
	public List<Media> getMediaList(final SimpleBannerComponent item)
	{
		return getMediaList( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>SimpleBannerComponent.mediaList</code> attribute. 
	 * @param value the mediaList
	 */
	public void setMediaList(final SessionContext ctx, final SimpleBannerComponent item, final List<Media> value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.SimpleBannerComponent.MEDIALIST,value == null || !value.isEmpty() ? value : null );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>SimpleBannerComponent.mediaList</code> attribute. 
	 * @param value the mediaList
	 */
	public void setMediaList(final SimpleBannerComponent item, final List<Media> value)
	{
		setMediaList( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSImageComponent.mediaList</code> attribute.
	 * @return the mediaList
	 */
	public List<Media> getMediaList(final SessionContext ctx, final CMSImageComponent item)
	{
		List<Media> coll = (List<Media>)item.getProperty( ctx, SslCoreConstants.Attributes.CMSImageComponent.MEDIALIST);
		return coll != null ? coll : Collections.EMPTY_LIST;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSImageComponent.mediaList</code> attribute.
	 * @return the mediaList
	 */
	public List<Media> getMediaList(final CMSImageComponent item)
	{
		return getMediaList( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSImageComponent.mediaList</code> attribute. 
	 * @param value the mediaList
	 */
	public void setMediaList(final SessionContext ctx, final CMSImageComponent item, final List<Media> value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.CMSImageComponent.MEDIALIST,value == null || !value.isEmpty() ? value : null );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSImageComponent.mediaList</code> attribute. 
	 * @param value the mediaList
	 */
	public void setMediaList(final CMSImageComponent item, final List<Media> value)
	{
		setMediaList( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PaymentInfo.merchantIdUsed</code> attribute.
	 * @return the merchantIdUsed - Represents the payment gateway merchant id used during payment transaction
	 */
	public String getMerchantIdUsed(final SessionContext ctx, final PaymentInfo item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.PaymentInfo.MERCHANTIDUSED);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PaymentInfo.merchantIdUsed</code> attribute.
	 * @return the merchantIdUsed - Represents the payment gateway merchant id used during payment transaction
	 */
	public String getMerchantIdUsed(final PaymentInfo item)
	{
		return getMerchantIdUsed( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PaymentInfo.merchantIdUsed</code> attribute. 
	 * @param value the merchantIdUsed - Represents the payment gateway merchant id used during payment transaction
	 */
	public void setMerchantIdUsed(final SessionContext ctx, final PaymentInfo item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.PaymentInfo.MERCHANTIDUSED,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PaymentInfo.merchantIdUsed</code> attribute. 
	 * @param value the merchantIdUsed - Represents the payment gateway merchant id used during payment transaction
	 */
	public void setMerchantIdUsed(final PaymentInfo item, final String value)
	{
		setMerchantIdUsed( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.metaDescription</code> attribute.
	 * @return the metaDescription
	 */
	public String getMetaDescription(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.METADESCRIPTION);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.metaDescription</code> attribute.
	 * @return the metaDescription
	 */
	public String getMetaDescription(final Product item)
	{
		return getMetaDescription( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.metaDescription</code> attribute. 
	 * @param value the metaDescription
	 */
	public void setMetaDescription(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.METADESCRIPTION,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.metaDescription</code> attribute. 
	 * @param value the metaDescription
	 */
	public void setMetaDescription(final Product item, final String value)
	{
		setMetaDescription( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.metaTitle</code> attribute.
	 * @return the metaTitle - Meta Title for the Product
	 */
	public String getMetaTitle(final SessionContext ctx, final Product item)
	{
		if( ctx == null || ctx.getLanguage() == null )
		{
			throw new JaloInvalidParameterException("GeneratedProduct.getMetaTitle requires a session language", 0 );
		}
		return (String)item.getLocalizedProperty( ctx, SslCoreConstants.Attributes.Product.METATITLE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.metaTitle</code> attribute.
	 * @return the metaTitle - Meta Title for the Product
	 */
	public String getMetaTitle(final Product item)
	{
		return getMetaTitle( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.metaTitle</code> attribute. 
	 * @return the localized metaTitle - Meta Title for the Product
	 */
	public Map<Language,String> getAllMetaTitle(final SessionContext ctx, final Product item)
	{
		return (Map<Language,String>)item.getAllLocalizedProperties(ctx,SslCoreConstants.Attributes.Product.METATITLE,C2LManager.getInstance().getAllLanguages());
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.metaTitle</code> attribute. 
	 * @return the localized metaTitle - Meta Title for the Product
	 */
	public Map<Language,String> getAllMetaTitle(final Product item)
	{
		return getAllMetaTitle( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.metaTitle</code> attribute. 
	 * @param value the metaTitle - Meta Title for the Product
	 */
	public void setMetaTitle(final SessionContext ctx, final Product item, final String value)
	{
		if( ctx == null || ctx.getLanguage() == null )
		{
			throw new JaloInvalidParameterException("GeneratedProduct.setMetaTitle requires a session language", 0 );
		}
		item.setLocalizedProperty(ctx, SslCoreConstants.Attributes.Product.METATITLE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.metaTitle</code> attribute. 
	 * @param value the metaTitle - Meta Title for the Product
	 */
	public void setMetaTitle(final Product item, final String value)
	{
		setMetaTitle( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.metaTitle</code> attribute. 
	 * @param value the metaTitle - Meta Title for the Product
	 */
	public void setAllMetaTitle(final SessionContext ctx, final Product item, final Map<Language,String> value)
	{
		item.setAllLocalizedProperties(ctx,SslCoreConstants.Attributes.Product.METATITLE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.metaTitle</code> attribute. 
	 * @param value the metaTitle - Meta Title for the Product
	 */
	public void setAllMetaTitle(final Product item, final Map<Language,String> value)
	{
		setAllMetaTitle( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.metaTitle</code> attribute.
	 * @return the metaTitle - Meta Title for the Category
	 */
	public String getMetaTitle(final SessionContext ctx, final Category item)
	{
		if( ctx == null || ctx.getLanguage() == null )
		{
			throw new JaloInvalidParameterException("GeneratedCategory.getMetaTitle requires a session language", 0 );
		}
		return (String)item.getLocalizedProperty( ctx, SslCoreConstants.Attributes.Category.METATITLE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.metaTitle</code> attribute.
	 * @return the metaTitle - Meta Title for the Category
	 */
	public String getMetaTitle(final Category item)
	{
		return getMetaTitle( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.metaTitle</code> attribute. 
	 * @return the localized metaTitle - Meta Title for the Category
	 */
	public Map<Language,String> getAllMetaTitle(final SessionContext ctx, final Category item)
	{
		return (Map<Language,String>)item.getAllLocalizedProperties(ctx,SslCoreConstants.Attributes.Category.METATITLE,C2LManager.getInstance().getAllLanguages());
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.metaTitle</code> attribute. 
	 * @return the localized metaTitle - Meta Title for the Category
	 */
	public Map<Language,String> getAllMetaTitle(final Category item)
	{
		return getAllMetaTitle( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.metaTitle</code> attribute. 
	 * @param value the metaTitle - Meta Title for the Category
	 */
	public void setMetaTitle(final SessionContext ctx, final Category item, final String value)
	{
		if( ctx == null || ctx.getLanguage() == null )
		{
			throw new JaloInvalidParameterException("GeneratedCategory.setMetaTitle requires a session language", 0 );
		}
		item.setLocalizedProperty(ctx, SslCoreConstants.Attributes.Category.METATITLE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.metaTitle</code> attribute. 
	 * @param value the metaTitle - Meta Title for the Category
	 */
	public void setMetaTitle(final Category item, final String value)
	{
		setMetaTitle( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.metaTitle</code> attribute. 
	 * @param value the metaTitle - Meta Title for the Category
	 */
	public void setAllMetaTitle(final SessionContext ctx, final Category item, final Map<Language,String> value)
	{
		item.setAllLocalizedProperties(ctx,SslCoreConstants.Attributes.Category.METATITLE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.metaTitle</code> attribute. 
	 * @param value the metaTitle - Meta Title for the Category
	 */
	public void setAllMetaTitle(final Category item, final Map<Language,String> value)
	{
		setAllMetaTitle( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractPage.metaTitle</code> attribute.
	 * @return the metaTitle
	 */
	public String getMetaTitle(final SessionContext ctx, final AbstractPage item)
	{
		if( ctx == null || ctx.getLanguage() == null )
		{
			throw new JaloInvalidParameterException("GeneratedAbstractPage.getMetaTitle requires a session language", 0 );
		}
		return (String)item.getLocalizedProperty( ctx, SslCoreConstants.Attributes.AbstractPage.METATITLE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractPage.metaTitle</code> attribute.
	 * @return the metaTitle
	 */
	public String getMetaTitle(final AbstractPage item)
	{
		return getMetaTitle( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractPage.metaTitle</code> attribute. 
	 * @return the localized metaTitle
	 */
	public Map<Language,String> getAllMetaTitle(final SessionContext ctx, final AbstractPage item)
	{
		return (Map<Language,String>)item.getAllLocalizedProperties(ctx,SslCoreConstants.Attributes.AbstractPage.METATITLE,C2LManager.getInstance().getAllLanguages());
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractPage.metaTitle</code> attribute. 
	 * @return the localized metaTitle
	 */
	public Map<Language,String> getAllMetaTitle(final AbstractPage item)
	{
		return getAllMetaTitle( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractPage.metaTitle</code> attribute. 
	 * @param value the metaTitle
	 */
	public void setMetaTitle(final SessionContext ctx, final AbstractPage item, final String value)
	{
		if( ctx == null || ctx.getLanguage() == null )
		{
			throw new JaloInvalidParameterException("GeneratedAbstractPage.setMetaTitle requires a session language", 0 );
		}
		item.setLocalizedProperty(ctx, SslCoreConstants.Attributes.AbstractPage.METATITLE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractPage.metaTitle</code> attribute. 
	 * @param value the metaTitle
	 */
	public void setMetaTitle(final AbstractPage item, final String value)
	{
		setMetaTitle( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractPage.metaTitle</code> attribute. 
	 * @param value the metaTitle
	 */
	public void setAllMetaTitle(final SessionContext ctx, final AbstractPage item, final Map<Language,String> value)
	{
		item.setAllLocalizedProperties(ctx,SslCoreConstants.Attributes.AbstractPage.METATITLE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractPage.metaTitle</code> attribute. 
	 * @param value the metaTitle
	 */
	public void setAllMetaTitle(final AbstractPage item, final Map<Language,String> value)
	{
		setAllMetaTitle( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Region.mmsCode</code> attribute.
	 * @return the mmsCode - MMS Code
	 */
	public String getMmsCode(final SessionContext ctx, final Region item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Region.MMSCODE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Region.mmsCode</code> attribute.
	 * @return the mmsCode - MMS Code
	 */
	public String getMmsCode(final Region item)
	{
		return getMmsCode( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Region.mmsCode</code> attribute. 
	 * @param value the mmsCode - MMS Code
	 */
	public void setMmsCode(final SessionContext ctx, final Region item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Region.MMSCODE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Region.mmsCode</code> attribute. 
	 * @param value the mmsCode - MMS Code
	 */
	public void setMmsCode(final Region item, final String value)
	{
		setMmsCode( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.mmsDamage</code> attribute.
	 * @return the mmsDamage - This field will hold damage count updated by MMS.
	 */
	public Integer getMmsDamage(final SessionContext ctx, final StockLevel item)
	{
		return (Integer)item.getProperty( ctx, SslCoreConstants.Attributes.StockLevel.MMSDAMAGE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.mmsDamage</code> attribute.
	 * @return the mmsDamage - This field will hold damage count updated by MMS.
	 */
	public Integer getMmsDamage(final StockLevel item)
	{
		return getMmsDamage( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.mmsDamage</code> attribute. 
	 * @return the mmsDamage - This field will hold damage count updated by MMS.
	 */
	public int getMmsDamageAsPrimitive(final SessionContext ctx, final StockLevel item)
	{
		Integer value = getMmsDamage( ctx,item );
		return value != null ? value.intValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.mmsDamage</code> attribute. 
	 * @return the mmsDamage - This field will hold damage count updated by MMS.
	 */
	public int getMmsDamageAsPrimitive(final StockLevel item)
	{
		return getMmsDamageAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.mmsDamage</code> attribute. 
	 * @param value the mmsDamage - This field will hold damage count updated by MMS.
	 */
	public void setMmsDamage(final SessionContext ctx, final StockLevel item, final Integer value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.StockLevel.MMSDAMAGE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.mmsDamage</code> attribute. 
	 * @param value the mmsDamage - This field will hold damage count updated by MMS.
	 */
	public void setMmsDamage(final StockLevel item, final Integer value)
	{
		setMmsDamage( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.mmsDamage</code> attribute. 
	 * @param value the mmsDamage - This field will hold damage count updated by MMS.
	 */
	public void setMmsDamage(final SessionContext ctx, final StockLevel item, final int value)
	{
		setMmsDamage( ctx, item, Integer.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.mmsDamage</code> attribute. 
	 * @param value the mmsDamage - This field will hold damage count updated by MMS.
	 */
	public void setMmsDamage(final StockLevel item, final int value)
	{
		setMmsDamage( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.mmsSuspense</code> attribute.
	 * @return the mmsSuspense - This field will hold suspense count updated by MMS.
	 */
	public Integer getMmsSuspense(final SessionContext ctx, final StockLevel item)
	{
		return (Integer)item.getProperty( ctx, SslCoreConstants.Attributes.StockLevel.MMSSUSPENSE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.mmsSuspense</code> attribute.
	 * @return the mmsSuspense - This field will hold suspense count updated by MMS.
	 */
	public Integer getMmsSuspense(final StockLevel item)
	{
		return getMmsSuspense( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.mmsSuspense</code> attribute. 
	 * @return the mmsSuspense - This field will hold suspense count updated by MMS.
	 */
	public int getMmsSuspenseAsPrimitive(final SessionContext ctx, final StockLevel item)
	{
		Integer value = getMmsSuspense( ctx,item );
		return value != null ? value.intValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.mmsSuspense</code> attribute. 
	 * @return the mmsSuspense - This field will hold suspense count updated by MMS.
	 */
	public int getMmsSuspenseAsPrimitive(final StockLevel item)
	{
		return getMmsSuspenseAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.mmsSuspense</code> attribute. 
	 * @param value the mmsSuspense - This field will hold suspense count updated by MMS.
	 */
	public void setMmsSuspense(final SessionContext ctx, final StockLevel item, final Integer value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.StockLevel.MMSSUSPENSE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.mmsSuspense</code> attribute. 
	 * @param value the mmsSuspense - This field will hold suspense count updated by MMS.
	 */
	public void setMmsSuspense(final StockLevel item, final Integer value)
	{
		setMmsSuspense( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.mmsSuspense</code> attribute. 
	 * @param value the mmsSuspense - This field will hold suspense count updated by MMS.
	 */
	public void setMmsSuspense(final SessionContext ctx, final StockLevel item, final int value)
	{
		setMmsSuspense( ctx, item, Integer.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.mmsSuspense</code> attribute. 
	 * @param value the mmsSuspense - This field will hold suspense count updated by MMS.
	 */
	public void setMmsSuspense(final StockLevel item, final int value)
	{
		setMmsSuspense( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.mobile</code> attribute.
	 * @return the mobile
	 */
	public String getMobile(final SessionContext ctx, final Customer item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.MOBILE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.mobile</code> attribute.
	 * @return the mobile
	 */
	public String getMobile(final Customer item)
	{
		return getMobile( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.mobile</code> attribute. 
	 * @param value the mobile
	 */
	public void setMobile(final SessionContext ctx, final Customer item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.MOBILE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.mobile</code> attribute. 
	 * @param value the mobile
	 */
	public void setMobile(final Customer item, final String value)
	{
		setMobile( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.mobileAppPlatform</code> attribute.
	 * @return the mobileAppPlatform
	 */
	public EnumerationValue getMobileAppPlatform(final SessionContext ctx, final AbstractOrder item)
	{
		return (EnumerationValue)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrder.MOBILEAPPPLATFORM);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.mobileAppPlatform</code> attribute.
	 * @return the mobileAppPlatform
	 */
	public EnumerationValue getMobileAppPlatform(final AbstractOrder item)
	{
		return getMobileAppPlatform( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.mobileAppPlatform</code> attribute. 
	 * @param value the mobileAppPlatform
	 */
	public void setMobileAppPlatform(final SessionContext ctx, final AbstractOrder item, final EnumerationValue value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrder.MOBILEAPPPLATFORM,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.mobileAppPlatform</code> attribute. 
	 * @param value the mobileAppPlatform
	 */
	public void setMobileAppPlatform(final AbstractOrder item, final EnumerationValue value)
	{
		setMobileAppPlatform( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.mobileAppVersion</code> attribute.
	 * @return the mobileAppVersion - Field for getting app Version for sales application
	 */
	public String getMobileAppVersion(final SessionContext ctx, final AbstractOrder item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrder.MOBILEAPPVERSION);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.mobileAppVersion</code> attribute.
	 * @return the mobileAppVersion - Field for getting app Version for sales application
	 */
	public String getMobileAppVersion(final AbstractOrder item)
	{
		return getMobileAppVersion( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.mobileAppVersion</code> attribute. 
	 * @param value the mobileAppVersion - Field for getting app Version for sales application
	 */
	public void setMobileAppVersion(final SessionContext ctx, final AbstractOrder item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrder.MOBILEAPPVERSION,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.mobileAppVersion</code> attribute. 
	 * @param value the mobileAppVersion - Field for getting app Version for sales application
	 */
	public void setMobileAppVersion(final AbstractOrder item, final String value)
	{
		setMobileAppVersion( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.mobileNumberVerified</code> attribute.
	 * @return the mobileNumberVerified - Identify if Password Imported from Magento
	 */
	public Boolean isMobileNumberVerified(final SessionContext ctx, final Customer item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.MOBILENUMBERVERIFIED);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.mobileNumberVerified</code> attribute.
	 * @return the mobileNumberVerified - Identify if Password Imported from Magento
	 */
	public Boolean isMobileNumberVerified(final Customer item)
	{
		return isMobileNumberVerified( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.mobileNumberVerified</code> attribute. 
	 * @return the mobileNumberVerified - Identify if Password Imported from Magento
	 */
	public boolean isMobileNumberVerifiedAsPrimitive(final SessionContext ctx, final Customer item)
	{
		Boolean value = isMobileNumberVerified( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.mobileNumberVerified</code> attribute. 
	 * @return the mobileNumberVerified - Identify if Password Imported from Magento
	 */
	public boolean isMobileNumberVerifiedAsPrimitive(final Customer item)
	{
		return isMobileNumberVerifiedAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.mobileNumberVerified</code> attribute. 
	 * @param value the mobileNumberVerified - Identify if Password Imported from Magento
	 */
	public void setMobileNumberVerified(final SessionContext ctx, final Customer item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.MOBILENUMBERVERIFIED,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.mobileNumberVerified</code> attribute. 
	 * @param value the mobileNumberVerified - Identify if Password Imported from Magento
	 */
	public void setMobileNumberVerified(final Customer item, final Boolean value)
	{
		setMobileNumberVerified( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.mobileNumberVerified</code> attribute. 
	 * @param value the mobileNumberVerified - Identify if Password Imported from Magento
	 */
	public void setMobileNumberVerified(final SessionContext ctx, final Customer item, final boolean value)
	{
		setMobileNumberVerified( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.mobileNumberVerified</code> attribute. 
	 * @param value the mobileNumberVerified - Identify if Password Imported from Magento
	 */
	public void setMobileNumberVerified(final Customer item, final boolean value)
	{
		setMobileNumberVerified( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.multi360images</code> attribute.
	 * @return the multi360images - To add multiple images that constitute a 360 degree
	 *                             view
	 */
	public Set<Media> getMulti360images(final SessionContext ctx, final Product item)
	{
		Set<Media> coll = (Set<Media>)item.getProperty( ctx, SslCoreConstants.Attributes.Product.MULTI360IMAGES);
		return coll != null ? coll : Collections.EMPTY_SET;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.multi360images</code> attribute.
	 * @return the multi360images - To add multiple images that constitute a 360 degree
	 *                             view
	 */
	public Set<Media> getMulti360images(final Product item)
	{
		return getMulti360images( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.multi360images</code> attribute. 
	 * @param value the multi360images - To add multiple images that constitute a 360 degree
	 *                             view
	 */
	public void setMulti360images(final SessionContext ctx, final Product item, final Set<Media> value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.MULTI360IMAGES,value == null || !value.isEmpty() ? value : null );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.multi360images</code> attribute. 
	 * @param value the multi360images - To add multiple images that constitute a 360 degree
	 *                             view
	 */
	public void setMulti360images(final Product item, final Set<Media> value)
	{
		setMulti360images( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.nameoncard</code> attribute.
	 * @return the nameoncard - Name on Card
	 */
	public String getNameoncard(final SessionContext ctx, final Customer item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.NAMEONCARD);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.nameoncard</code> attribute.
	 * @return the nameoncard - Name on Card
	 */
	public String getNameoncard(final Customer item)
	{
		return getNameoncard( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.nameoncard</code> attribute. 
	 * @param value the nameoncard - Name on Card
	 */
	public void setNameoncard(final SessionContext ctx, final Customer item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.NAMEONCARD,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.nameoncard</code> attribute. 
	 * @param value the nameoncard - Name on Card
	 */
	public void setNameoncard(final Customer item, final String value)
	{
		setNameoncard( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.newArrival</code> attribute.
	 * @return the newArrival - To indicate new arrival product
	 */
	public Boolean isNewArrival(final SessionContext ctx, final Product item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Product.NEWARRIVAL);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.newArrival</code> attribute.
	 * @return the newArrival - To indicate new arrival product
	 */
	public Boolean isNewArrival(final Product item)
	{
		return isNewArrival( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.newArrival</code> attribute. 
	 * @return the newArrival - To indicate new arrival product
	 */
	public boolean isNewArrivalAsPrimitive(final SessionContext ctx, final Product item)
	{
		Boolean value = isNewArrival( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.newArrival</code> attribute. 
	 * @return the newArrival - To indicate new arrival product
	 */
	public boolean isNewArrivalAsPrimitive(final Product item)
	{
		return isNewArrivalAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.newArrival</code> attribute. 
	 * @param value the newArrival - To indicate new arrival product
	 */
	public void setNewArrival(final SessionContext ctx, final Product item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.NEWARRIVAL,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.newArrival</code> attribute. 
	 * @param value the newArrival - To indicate new arrival product
	 */
	public void setNewArrival(final Product item, final Boolean value)
	{
		setNewArrival( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.newArrival</code> attribute. 
	 * @param value the newArrival - To indicate new arrival product
	 */
	public void setNewArrival(final SessionContext ctx, final Product item, final boolean value)
	{
		setNewArrival( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.newArrival</code> attribute. 
	 * @param value the newArrival - To indicate new arrival product
	 */
	public void setNewArrival(final Product item, final boolean value)
	{
		setNewArrival( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.newInCategoryComponent</code> attribute.
	 * @return the newInCategoryComponent - List of Recommended Products for this Category
	 */
	public NewInCategoryComponent getNewInCategoryComponent(final SessionContext ctx, final Category item)
	{
		return (NewInCategoryComponent)item.getProperty( ctx, SslCoreConstants.Attributes.Category.NEWINCATEGORYCOMPONENT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.newInCategoryComponent</code> attribute.
	 * @return the newInCategoryComponent - List of Recommended Products for this Category
	 */
	public NewInCategoryComponent getNewInCategoryComponent(final Category item)
	{
		return getNewInCategoryComponent( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.newInCategoryComponent</code> attribute. 
	 * @param value the newInCategoryComponent - List of Recommended Products for this Category
	 */
	public void setNewInCategoryComponent(final SessionContext ctx, final Category item, final NewInCategoryComponent value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.NEWINCATEGORYCOMPONENT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.newInCategoryComponent</code> attribute. 
	 * @param value the newInCategoryComponent - List of Recommended Products for this Category
	 */
	public void setNewInCategoryComponent(final Category item, final NewInCategoryComponent value)
	{
		setNewInCategoryComponent( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.newInCategorymobileComponent</code> attribute.
	 * @return the newInCategorymobileComponent - List of Recommended Products for this Category
	 */
	public NewInCategoryComponent getNewInCategorymobileComponent(final SessionContext ctx, final Category item)
	{
		return (NewInCategoryComponent)item.getProperty( ctx, SslCoreConstants.Attributes.Category.NEWINCATEGORYMOBILECOMPONENT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.newInCategorymobileComponent</code> attribute.
	 * @return the newInCategorymobileComponent - List of Recommended Products for this Category
	 */
	public NewInCategoryComponent getNewInCategorymobileComponent(final Category item)
	{
		return getNewInCategorymobileComponent( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.newInCategorymobileComponent</code> attribute. 
	 * @param value the newInCategorymobileComponent - List of Recommended Products for this Category
	 */
	public void setNewInCategorymobileComponent(final SessionContext ctx, final Category item, final NewInCategoryComponent value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.NEWINCATEGORYMOBILECOMPONENT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.newInCategorymobileComponent</code> attribute. 
	 * @param value the newInCategorymobileComponent - List of Recommended Products for this Category
	 */
	public void setNewInCategorymobileComponent(final Category item, final NewInCategoryComponent value)
	{
		setNewInCategorymobileComponent( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.newShorterLengthComponent</code> attribute.
	 * @return the newShorterLengthComponent - List of Recommended Products for this Category
	 */
	public NewShorterLengthComponent getNewShorterLengthComponent(final SessionContext ctx, final Category item)
	{
		return (NewShorterLengthComponent)item.getProperty( ctx, SslCoreConstants.Attributes.Category.NEWSHORTERLENGTHCOMPONENT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.newShorterLengthComponent</code> attribute.
	 * @return the newShorterLengthComponent - List of Recommended Products for this Category
	 */
	public NewShorterLengthComponent getNewShorterLengthComponent(final Category item)
	{
		return getNewShorterLengthComponent( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.newShorterLengthComponent</code> attribute. 
	 * @param value the newShorterLengthComponent - List of Recommended Products for this Category
	 */
	public void setNewShorterLengthComponent(final SessionContext ctx, final Category item, final NewShorterLengthComponent value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.NEWSHORTERLENGTHCOMPONENT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.newShorterLengthComponent</code> attribute. 
	 * @param value the newShorterLengthComponent - List of Recommended Products for this Category
	 */
	public void setNewShorterLengthComponent(final Category item, final NewShorterLengthComponent value)
	{
		setNewShorterLengthComponent( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSSite.newTagDisplayOption</code> attribute.
	 * @return the newTagDisplayOption - Options to choose how the styling of the NEW Tag
	 *                             would be shown on the PLP pages
	 */
	public EnumerationValue getNewTagDisplayOption(final SessionContext ctx, final CMSSite item)
	{
		return (EnumerationValue)item.getProperty( ctx, SslCoreConstants.Attributes.CMSSite.NEWTAGDISPLAYOPTION);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSSite.newTagDisplayOption</code> attribute.
	 * @return the newTagDisplayOption - Options to choose how the styling of the NEW Tag
	 *                             would be shown on the PLP pages
	 */
	public EnumerationValue getNewTagDisplayOption(final CMSSite item)
	{
		return getNewTagDisplayOption( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSSite.newTagDisplayOption</code> attribute. 
	 * @param value the newTagDisplayOption - Options to choose how the styling of the NEW Tag
	 *                             would be shown on the PLP pages
	 */
	public void setNewTagDisplayOption(final SessionContext ctx, final CMSSite item, final EnumerationValue value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.CMSSite.NEWTAGDISPLAYOPTION,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSSite.newTagDisplayOption</code> attribute. 
	 * @param value the newTagDisplayOption - Options to choose how the styling of the NEW Tag
	 *                             would be shown on the PLP pages
	 */
	public void setNewTagDisplayOption(final CMSSite item, final EnumerationValue value)
	{
		setNewTagDisplayOption( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.nonSeamless</code> attribute.
	 * @return the nonSeamless - Boolean flag to indicate whether order placed through non-seamless payment gateway integration or not
	 */
	public Boolean isNonSeamless(final SessionContext ctx, final AbstractOrder item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrder.NONSEAMLESS);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.nonSeamless</code> attribute.
	 * @return the nonSeamless - Boolean flag to indicate whether order placed through non-seamless payment gateway integration or not
	 */
	public Boolean isNonSeamless(final AbstractOrder item)
	{
		return isNonSeamless( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.nonSeamless</code> attribute. 
	 * @return the nonSeamless - Boolean flag to indicate whether order placed through non-seamless payment gateway integration or not
	 */
	public boolean isNonSeamlessAsPrimitive(final SessionContext ctx, final AbstractOrder item)
	{
		Boolean value = isNonSeamless( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.nonSeamless</code> attribute. 
	 * @return the nonSeamless - Boolean flag to indicate whether order placed through non-seamless payment gateway integration or not
	 */
	public boolean isNonSeamlessAsPrimitive(final AbstractOrder item)
	{
		return isNonSeamlessAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.nonSeamless</code> attribute. 
	 * @param value the nonSeamless - Boolean flag to indicate whether order placed through non-seamless payment gateway integration or not
	 */
	public void setNonSeamless(final SessionContext ctx, final AbstractOrder item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrder.NONSEAMLESS,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.nonSeamless</code> attribute. 
	 * @param value the nonSeamless - Boolean flag to indicate whether order placed through non-seamless payment gateway integration or not
	 */
	public void setNonSeamless(final AbstractOrder item, final Boolean value)
	{
		setNonSeamless( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.nonSeamless</code> attribute. 
	 * @param value the nonSeamless - Boolean flag to indicate whether order placed through non-seamless payment gateway integration or not
	 */
	public void setNonSeamless(final SessionContext ctx, final AbstractOrder item, final boolean value)
	{
		setNonSeamless( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.nonSeamless</code> attribute. 
	 * @param value the nonSeamless - Boolean flag to indicate whether order placed through non-seamless payment gateway integration or not
	 */
	public void setNonSeamless(final AbstractOrder item, final boolean value)
	{
		setNonSeamless( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.nonSellableQuantity</code> attribute.
	 * @return the nonSellableQuantity - Non Sellable Quantity
	 */
	public Integer getNonSellableQuantity(final SessionContext ctx, final StockLevel item)
	{
		return (Integer)item.getProperty( ctx, SslCoreConstants.Attributes.StockLevel.NONSELLABLEQUANTITY);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.nonSellableQuantity</code> attribute.
	 * @return the nonSellableQuantity - Non Sellable Quantity
	 */
	public Integer getNonSellableQuantity(final StockLevel item)
	{
		return getNonSellableQuantity( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.nonSellableQuantity</code> attribute. 
	 * @return the nonSellableQuantity - Non Sellable Quantity
	 */
	public int getNonSellableQuantityAsPrimitive(final SessionContext ctx, final StockLevel item)
	{
		Integer value = getNonSellableQuantity( ctx,item );
		return value != null ? value.intValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.nonSellableQuantity</code> attribute. 
	 * @return the nonSellableQuantity - Non Sellable Quantity
	 */
	public int getNonSellableQuantityAsPrimitive(final StockLevel item)
	{
		return getNonSellableQuantityAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.nonSellableQuantity</code> attribute. 
	 * @param value the nonSellableQuantity - Non Sellable Quantity
	 */
	public void setNonSellableQuantity(final SessionContext ctx, final StockLevel item, final Integer value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.StockLevel.NONSELLABLEQUANTITY,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.nonSellableQuantity</code> attribute. 
	 * @param value the nonSellableQuantity - Non Sellable Quantity
	 */
	public void setNonSellableQuantity(final StockLevel item, final Integer value)
	{
		setNonSellableQuantity( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.nonSellableQuantity</code> attribute. 
	 * @param value the nonSellableQuantity - Non Sellable Quantity
	 */
	public void setNonSellableQuantity(final SessionContext ctx, final StockLevel item, final int value)
	{
		setNonSellableQuantity( ctx, item, Integer.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.nonSellableQuantity</code> attribute. 
	 * @param value the nonSellableQuantity - Non Sellable Quantity
	 */
	public void setNonSellableQuantity(final StockLevel item, final int value)
	{
		setNonSellableQuantity( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.occasion</code> attribute.
	 * @return the occasion
	 */
	public String getOccasion(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.OCCASION);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.occasion</code> attribute.
	 * @return the occasion
	 */
	public String getOccasion(final Product item)
	{
		return getOccasion( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.occasion</code> attribute. 
	 * @param value the occasion
	 */
	public void setOccasion(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.OCCASION,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.occasion</code> attribute. 
	 * @param value the occasion
	 */
	public void setOccasion(final Product item, final String value)
	{
		setOccasion( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.onhandSafetyFactorPercentage</code> attribute.
	 * @return the onhandSafetyFactorPercentage - This property holds the on hand safety factor percentage updated by merchant
	 */
	public String getOnhandSafetyFactorPercentage(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.ONHANDSAFETYFACTORPERCENTAGE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.onhandSafetyFactorPercentage</code> attribute.
	 * @return the onhandSafetyFactorPercentage - This property holds the on hand safety factor percentage updated by merchant
	 */
	public String getOnhandSafetyFactorPercentage(final Product item)
	{
		return getOnhandSafetyFactorPercentage( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.onhandSafetyFactorPercentage</code> attribute. 
	 * @param value the onhandSafetyFactorPercentage - This property holds the on hand safety factor percentage updated by merchant
	 */
	public void setOnhandSafetyFactorPercentage(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.ONHANDSAFETYFACTORPERCENTAGE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.onhandSafetyFactorPercentage</code> attribute. 
	 * @param value the onhandSafetyFactorPercentage - This property holds the on hand safety factor percentage updated by merchant
	 */
	public void setOnhandSafetyFactorPercentage(final Product item, final String value)
	{
		setOnhandSafetyFactorPercentage( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.onhandSafetyFactorQuantity</code> attribute.
	 * @return the onhandSafetyFactorQuantity - This property holds the on hand safety factor quantity updated by merchant
	 */
	public String getOnhandSafetyFactorQuantity(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.ONHANDSAFETYFACTORQUANTITY);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.onhandSafetyFactorQuantity</code> attribute.
	 * @return the onhandSafetyFactorQuantity - This property holds the on hand safety factor quantity updated by merchant
	 */
	public String getOnhandSafetyFactorQuantity(final Product item)
	{
		return getOnhandSafetyFactorQuantity( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.onhandSafetyFactorQuantity</code> attribute. 
	 * @param value the onhandSafetyFactorQuantity - This property holds the on hand safety factor quantity updated by merchant
	 */
	public void setOnhandSafetyFactorQuantity(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.ONHANDSAFETYFACTORQUANTITY,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.onhandSafetyFactorQuantity</code> attribute. 
	 * @param value the onhandSafetyFactorQuantity - This property holds the on hand safety factor quantity updated by merchant
	 */
	public void setOnhandSafetyFactorQuantity(final Product item, final String value)
	{
		setOnhandSafetyFactorQuantity( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.onlineDamaged</code> attribute.
	 * @return the onlineDamaged - Online Damaged
	 */
	public Integer getOnlineDamaged(final SessionContext ctx, final StockLevel item)
	{
		return (Integer)item.getProperty( ctx, SslCoreConstants.Attributes.StockLevel.ONLINEDAMAGED);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.onlineDamaged</code> attribute.
	 * @return the onlineDamaged - Online Damaged
	 */
	public Integer getOnlineDamaged(final StockLevel item)
	{
		return getOnlineDamaged( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.onlineDamaged</code> attribute. 
	 * @return the onlineDamaged - Online Damaged
	 */
	public int getOnlineDamagedAsPrimitive(final SessionContext ctx, final StockLevel item)
	{
		Integer value = getOnlineDamaged( ctx,item );
		return value != null ? value.intValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.onlineDamaged</code> attribute. 
	 * @return the onlineDamaged - Online Damaged
	 */
	public int getOnlineDamagedAsPrimitive(final StockLevel item)
	{
		return getOnlineDamagedAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.onlineDamaged</code> attribute. 
	 * @param value the onlineDamaged - Online Damaged
	 */
	public void setOnlineDamaged(final SessionContext ctx, final StockLevel item, final Integer value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.StockLevel.ONLINEDAMAGED,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.onlineDamaged</code> attribute. 
	 * @param value the onlineDamaged - Online Damaged
	 */
	public void setOnlineDamaged(final StockLevel item, final Integer value)
	{
		setOnlineDamaged( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.onlineDamaged</code> attribute. 
	 * @param value the onlineDamaged - Online Damaged
	 */
	public void setOnlineDamaged(final SessionContext ctx, final StockLevel item, final int value)
	{
		setOnlineDamaged( ctx, item, Integer.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.onlineDamaged</code> attribute. 
	 * @param value the onlineDamaged - Online Damaged
	 */
	public void setOnlineDamaged(final StockLevel item, final int value)
	{
		setOnlineDamaged( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.onlineExclusive</code> attribute.
	 * @return the onlineExclusive - To indicate the online exclusive product
	 */
	public Boolean isOnlineExclusive(final SessionContext ctx, final Product item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Product.ONLINEEXCLUSIVE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.onlineExclusive</code> attribute.
	 * @return the onlineExclusive - To indicate the online exclusive product
	 */
	public Boolean isOnlineExclusive(final Product item)
	{
		return isOnlineExclusive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.onlineExclusive</code> attribute. 
	 * @return the onlineExclusive - To indicate the online exclusive product
	 */
	public boolean isOnlineExclusiveAsPrimitive(final SessionContext ctx, final Product item)
	{
		Boolean value = isOnlineExclusive( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.onlineExclusive</code> attribute. 
	 * @return the onlineExclusive - To indicate the online exclusive product
	 */
	public boolean isOnlineExclusiveAsPrimitive(final Product item)
	{
		return isOnlineExclusiveAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.onlineExclusive</code> attribute. 
	 * @param value the onlineExclusive - To indicate the online exclusive product
	 */
	public void setOnlineExclusive(final SessionContext ctx, final Product item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.ONLINEEXCLUSIVE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.onlineExclusive</code> attribute. 
	 * @param value the onlineExclusive - To indicate the online exclusive product
	 */
	public void setOnlineExclusive(final Product item, final Boolean value)
	{
		setOnlineExclusive( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.onlineExclusive</code> attribute. 
	 * @param value the onlineExclusive - To indicate the online exclusive product
	 */
	public void setOnlineExclusive(final SessionContext ctx, final Product item, final boolean value)
	{
		setOnlineExclusive( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.onlineExclusive</code> attribute. 
	 * @param value the onlineExclusive - To indicate the online exclusive product
	 */
	public void setOnlineExclusive(final Product item, final boolean value)
	{
		setOnlineExclusive( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.onlineHold</code> attribute.
	 * @return the onlineHold - Temporary hold quantity for stock during wait for
	 * 							cancel period
	 */
	public Integer getOnlineHold(final SessionContext ctx, final StockLevel item)
	{
		return (Integer)item.getProperty( ctx, SslCoreConstants.Attributes.StockLevel.ONLINEHOLD);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.onlineHold</code> attribute.
	 * @return the onlineHold - Temporary hold quantity for stock during wait for
	 * 							cancel period
	 */
	public Integer getOnlineHold(final StockLevel item)
	{
		return getOnlineHold( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.onlineHold</code> attribute. 
	 * @return the onlineHold - Temporary hold quantity for stock during wait for
	 * 							cancel period
	 */
	public int getOnlineHoldAsPrimitive(final SessionContext ctx, final StockLevel item)
	{
		Integer value = getOnlineHold( ctx,item );
		return value != null ? value.intValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.onlineHold</code> attribute. 
	 * @return the onlineHold - Temporary hold quantity for stock during wait for
	 * 							cancel period
	 */
	public int getOnlineHoldAsPrimitive(final StockLevel item)
	{
		return getOnlineHoldAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.onlineHold</code> attribute. 
	 * @param value the onlineHold - Temporary hold quantity for stock during wait for
	 * 							cancel period
	 */
	public void setOnlineHold(final SessionContext ctx, final StockLevel item, final Integer value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.StockLevel.ONLINEHOLD,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.onlineHold</code> attribute. 
	 * @param value the onlineHold - Temporary hold quantity for stock during wait for
	 * 							cancel period
	 */
	public void setOnlineHold(final StockLevel item, final Integer value)
	{
		setOnlineHold( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.onlineHold</code> attribute. 
	 * @param value the onlineHold - Temporary hold quantity for stock during wait for
	 * 							cancel period
	 */
	public void setOnlineHold(final SessionContext ctx, final StockLevel item, final int value)
	{
		setOnlineHold( ctx, item, Integer.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.onlineHold</code> attribute. 
	 * @param value the onlineHold - Temporary hold quantity for stock during wait for
	 * 							cancel period
	 */
	public void setOnlineHold(final StockLevel item, final int value)
	{
		setOnlineHold( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.onlineReserved</code> attribute.
	 * @return the onlineReserved - Online Reserved
	 */
	public Integer getOnlineReserved(final SessionContext ctx, final StockLevel item)
	{
		return (Integer)item.getProperty( ctx, SslCoreConstants.Attributes.StockLevel.ONLINERESERVED);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.onlineReserved</code> attribute.
	 * @return the onlineReserved - Online Reserved
	 */
	public Integer getOnlineReserved(final StockLevel item)
	{
		return getOnlineReserved( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.onlineReserved</code> attribute. 
	 * @return the onlineReserved - Online Reserved
	 */
	public int getOnlineReservedAsPrimitive(final SessionContext ctx, final StockLevel item)
	{
		Integer value = getOnlineReserved( ctx,item );
		return value != null ? value.intValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.onlineReserved</code> attribute. 
	 * @return the onlineReserved - Online Reserved
	 */
	public int getOnlineReservedAsPrimitive(final StockLevel item)
	{
		return getOnlineReservedAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.onlineReserved</code> attribute. 
	 * @param value the onlineReserved - Online Reserved
	 */
	public void setOnlineReserved(final SessionContext ctx, final StockLevel item, final Integer value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.StockLevel.ONLINERESERVED,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.onlineReserved</code> attribute. 
	 * @param value the onlineReserved - Online Reserved
	 */
	public void setOnlineReserved(final StockLevel item, final Integer value)
	{
		setOnlineReserved( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.onlineReserved</code> attribute. 
	 * @param value the onlineReserved - Online Reserved
	 */
	public void setOnlineReserved(final SessionContext ctx, final StockLevel item, final int value)
	{
		setOnlineReserved( ctx, item, Integer.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.onlineReserved</code> attribute. 
	 * @param value the onlineReserved - Online Reserved
	 */
	public void setOnlineReserved(final StockLevel item, final int value)
	{
		setOnlineReserved( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.onlineSuspense</code> attribute.
	 * @return the onlineSuspense - Online Suspense
	 */
	public Integer getOnlineSuspense(final SessionContext ctx, final StockLevel item)
	{
		return (Integer)item.getProperty( ctx, SslCoreConstants.Attributes.StockLevel.ONLINESUSPENSE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.onlineSuspense</code> attribute.
	 * @return the onlineSuspense - Online Suspense
	 */
	public Integer getOnlineSuspense(final StockLevel item)
	{
		return getOnlineSuspense( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.onlineSuspense</code> attribute. 
	 * @return the onlineSuspense - Online Suspense
	 */
	public int getOnlineSuspenseAsPrimitive(final SessionContext ctx, final StockLevel item)
	{
		Integer value = getOnlineSuspense( ctx,item );
		return value != null ? value.intValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.onlineSuspense</code> attribute. 
	 * @return the onlineSuspense - Online Suspense
	 */
	public int getOnlineSuspenseAsPrimitive(final StockLevel item)
	{
		return getOnlineSuspenseAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.onlineSuspense</code> attribute. 
	 * @param value the onlineSuspense - Online Suspense
	 */
	public void setOnlineSuspense(final SessionContext ctx, final StockLevel item, final Integer value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.StockLevel.ONLINESUSPENSE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.onlineSuspense</code> attribute. 
	 * @param value the onlineSuspense - Online Suspense
	 */
	public void setOnlineSuspense(final StockLevel item, final Integer value)
	{
		setOnlineSuspense( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.onlineSuspense</code> attribute. 
	 * @param value the onlineSuspense - Online Suspense
	 */
	public void setOnlineSuspense(final SessionContext ctx, final StockLevel item, final int value)
	{
		setOnlineSuspense( ctx, item, Integer.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.onlineSuspense</code> attribute. 
	 * @param value the onlineSuspense - Online Suspense
	 */
	public void setOnlineSuspense(final StockLevel item, final int value)
	{
		setOnlineSuspense( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Order.orderCompleteMailsent</code> attribute.
	 * @return the orderCompleteMailsent - Value for, if feedback mail sent for order
	 *                             completion.
	 */
	public Boolean isOrderCompleteMailsent(final SessionContext ctx, final Order item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Order.ORDERCOMPLETEMAILSENT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Order.orderCompleteMailsent</code> attribute.
	 * @return the orderCompleteMailsent - Value for, if feedback mail sent for order
	 *                             completion.
	 */
	public Boolean isOrderCompleteMailsent(final Order item)
	{
		return isOrderCompleteMailsent( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Order.orderCompleteMailsent</code> attribute. 
	 * @return the orderCompleteMailsent - Value for, if feedback mail sent for order
	 *                             completion.
	 */
	public boolean isOrderCompleteMailsentAsPrimitive(final SessionContext ctx, final Order item)
	{
		Boolean value = isOrderCompleteMailsent( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Order.orderCompleteMailsent</code> attribute. 
	 * @return the orderCompleteMailsent - Value for, if feedback mail sent for order
	 *                             completion.
	 */
	public boolean isOrderCompleteMailsentAsPrimitive(final Order item)
	{
		return isOrderCompleteMailsentAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Order.orderCompleteMailsent</code> attribute. 
	 * @param value the orderCompleteMailsent - Value for, if feedback mail sent for order
	 *                             completion.
	 */
	public void setOrderCompleteMailsent(final SessionContext ctx, final Order item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Order.ORDERCOMPLETEMAILSENT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Order.orderCompleteMailsent</code> attribute. 
	 * @param value the orderCompleteMailsent - Value for, if feedback mail sent for order
	 *                             completion.
	 */
	public void setOrderCompleteMailsent(final Order item, final Boolean value)
	{
		setOrderCompleteMailsent( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Order.orderCompleteMailsent</code> attribute. 
	 * @param value the orderCompleteMailsent - Value for, if feedback mail sent for order
	 *                             completion.
	 */
	public void setOrderCompleteMailsent(final SessionContext ctx, final Order item, final boolean value)
	{
		setOrderCompleteMailsent( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Order.orderCompleteMailsent</code> attribute. 
	 * @param value the orderCompleteMailsent - Value for, if feedback mail sent for order
	 *                             completion.
	 */
	public void setOrderCompleteMailsent(final Order item, final boolean value)
	{
		setOrderCompleteMailsent( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.orderReturnRecordEntry</code> attribute.
	 * @return the orderReturnRecordEntry - Order return record entry for mapping between return request and order return record
	 */
	public OrderReturnRecordEntry getOrderReturnRecordEntry(final SessionContext ctx, final ReturnRequest item)
	{
		return (OrderReturnRecordEntry)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.ORDERRETURNRECORDENTRY);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.orderReturnRecordEntry</code> attribute.
	 * @return the orderReturnRecordEntry - Order return record entry for mapping between return request and order return record
	 */
	public OrderReturnRecordEntry getOrderReturnRecordEntry(final ReturnRequest item)
	{
		return getOrderReturnRecordEntry( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.orderReturnRecordEntry</code> attribute. 
	 * @param value the orderReturnRecordEntry - Order return record entry for mapping between return request and order return record
	 */
	public void setOrderReturnRecordEntry(final SessionContext ctx, final ReturnRequest item, final OrderReturnRecordEntry value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.ORDERRETURNRECORDENTRY,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.orderReturnRecordEntry</code> attribute. 
	 * @param value the orderReturnRecordEntry - Order return record entry for mapping between return request and order return record
	 */
	public void setOrderReturnRecordEntry(final ReturnRequest item, final OrderReturnRecordEntry value)
	{
		setOrderReturnRecordEntry( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.originalPaymentsBeforeReturn</code> attribute.
	 * @return the originalPaymentsBeforeReturn
	 */
	public Map getOriginalPaymentsBeforeReturn(final SessionContext ctx, final ReturnRequest item)
	{
		return (Map)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.ORIGINALPAYMENTSBEFORERETURN);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.originalPaymentsBeforeReturn</code> attribute.
	 * @return the originalPaymentsBeforeReturn
	 */
	public Map getOriginalPaymentsBeforeReturn(final ReturnRequest item)
	{
		return getOriginalPaymentsBeforeReturn( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.originalPaymentsBeforeReturn</code> attribute. 
	 * @param value the originalPaymentsBeforeReturn
	 */
	public void setOriginalPaymentsBeforeReturn(final SessionContext ctx, final ReturnRequest item, final Map value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.ORIGINALPAYMENTSBEFORERETURN,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.originalPaymentsBeforeReturn</code> attribute. 
	 * @param value the originalPaymentsBeforeReturn
	 */
	public void setOriginalPaymentsBeforeReturn(final ReturnRequest item, final Map value)
	{
		setOriginalPaymentsBeforeReturn( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.ourBrandComponent</code> attribute.
	 * @return the ourBrandComponent
	 */
	public OurBrandComponent getOurBrandComponent(final SessionContext ctx, final Category item)
	{
		return (OurBrandComponent)item.getProperty( ctx, SslCoreConstants.Attributes.Category.OURBRANDCOMPONENT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.ourBrandComponent</code> attribute.
	 * @return the ourBrandComponent
	 */
	public OurBrandComponent getOurBrandComponent(final Category item)
	{
		return getOurBrandComponent( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.ourBrandComponent</code> attribute. 
	 * @param value the ourBrandComponent
	 */
	public void setOurBrandComponent(final SessionContext ctx, final Category item, final OurBrandComponent value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.OURBRANDCOMPONENT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.ourBrandComponent</code> attribute. 
	 * @param value the ourBrandComponent
	 */
	public void setOurBrandComponent(final Category item, final OurBrandComponent value)
	{
		setOurBrandComponent( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.ourBrandDescription</code> attribute.
	 * @return the ourBrandDescription
	 */
	public OurBrandDescriptionComponent getOurBrandDescription(final SessionContext ctx, final Category item)
	{
		return (OurBrandDescriptionComponent)item.getProperty( ctx, SslCoreConstants.Attributes.Category.OURBRANDDESCRIPTION);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.ourBrandDescription</code> attribute.
	 * @return the ourBrandDescription
	 */
	public OurBrandDescriptionComponent getOurBrandDescription(final Category item)
	{
		return getOurBrandDescription( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.ourBrandDescription</code> attribute. 
	 * @param value the ourBrandDescription
	 */
	public void setOurBrandDescription(final SessionContext ctx, final Category item, final OurBrandDescriptionComponent value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.OURBRANDDESCRIPTION,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.ourBrandDescription</code> attribute. 
	 * @param value the ourBrandDescription
	 */
	public void setOurBrandDescription(final Category item, final OurBrandDescriptionComponent value)
	{
		setOurBrandDescription( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.ourBrandDescriptionComponent</code> attribute.
	 * @return the ourBrandDescriptionComponent
	 */
	public CMSParagraphComponent getOurBrandDescriptionComponent(final SessionContext ctx, final Category item)
	{
		return (CMSParagraphComponent)item.getProperty( ctx, SslCoreConstants.Attributes.Category.OURBRANDDESCRIPTIONCOMPONENT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.ourBrandDescriptionComponent</code> attribute.
	 * @return the ourBrandDescriptionComponent
	 */
	public CMSParagraphComponent getOurBrandDescriptionComponent(final Category item)
	{
		return getOurBrandDescriptionComponent( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.ourBrandDescriptionComponent</code> attribute. 
	 * @param value the ourBrandDescriptionComponent
	 */
	public void setOurBrandDescriptionComponent(final SessionContext ctx, final Category item, final CMSParagraphComponent value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.OURBRANDDESCRIPTIONCOMPONENT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.ourBrandDescriptionComponent</code> attribute. 
	 * @param value the ourBrandDescriptionComponent
	 */
	public void setOurBrandDescriptionComponent(final Category item, final CMSParagraphComponent value)
	{
		setOurBrandDescriptionComponent( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.outOfStockNotice</code> attribute.
	 * @return the outOfStockNotice - To indicate if an item is to be displayed
	 */
	public EnumerationValue getOutOfStockNotice(final SessionContext ctx, final Product item)
	{
		return (EnumerationValue)item.getProperty( ctx, SslCoreConstants.Attributes.Product.OUTOFSTOCKNOTICE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.outOfStockNotice</code> attribute.
	 * @return the outOfStockNotice - To indicate if an item is to be displayed
	 */
	public EnumerationValue getOutOfStockNotice(final Product item)
	{
		return getOutOfStockNotice( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.outOfStockNotice</code> attribute. 
	 * @param value the outOfStockNotice - To indicate if an item is to be displayed
	 */
	public void setOutOfStockNotice(final SessionContext ctx, final Product item, final EnumerationValue value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.OUTOFSTOCKNOTICE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.outOfStockNotice</code> attribute. 
	 * @param value the outOfStockNotice - To indicate if an item is to be displayed
	 */
	public void setOutOfStockNotice(final Product item, final EnumerationValue value)
	{
		setOutOfStockNotice( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.packingType</code> attribute.
	 * @return the packingType
	 */
	public String getPackingType(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.PACKINGTYPE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.packingType</code> attribute.
	 * @return the packingType
	 */
	public String getPackingType(final Product item)
	{
		return getPackingType( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.packingType</code> attribute. 
	 * @param value the packingType
	 */
	public void setPackingType(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.PACKINGTYPE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.packingType</code> attribute. 
	 * @param value the packingType
	 */
	public void setPackingType(final Product item, final String value)
	{
		setPackingType( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PointOfService.parking</code> attribute.
	 * @return the parking
	 */
	public String getParking(final SessionContext ctx, final PointOfService item)
	{
		if( ctx == null || ctx.getLanguage() == null )
		{
			throw new JaloInvalidParameterException("GeneratedPointOfService.getParking requires a session language", 0 );
		}
		return (String)item.getLocalizedProperty( ctx, SslCoreConstants.Attributes.PointOfService.PARKING);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PointOfService.parking</code> attribute.
	 * @return the parking
	 */
	public String getParking(final PointOfService item)
	{
		return getParking( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PointOfService.parking</code> attribute. 
	 * @return the localized parking
	 */
	public Map<Language,String> getAllParking(final SessionContext ctx, final PointOfService item)
	{
		return (Map<Language,String>)item.getAllLocalizedProperties(ctx,SslCoreConstants.Attributes.PointOfService.PARKING,C2LManager.getInstance().getAllLanguages());
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PointOfService.parking</code> attribute. 
	 * @return the localized parking
	 */
	public Map<Language,String> getAllParking(final PointOfService item)
	{
		return getAllParking( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PointOfService.parking</code> attribute. 
	 * @param value the parking
	 */
	public void setParking(final SessionContext ctx, final PointOfService item, final String value)
	{
		if( ctx == null || ctx.getLanguage() == null )
		{
			throw new JaloInvalidParameterException("GeneratedPointOfService.setParking requires a session language", 0 );
		}
		item.setLocalizedProperty(ctx, SslCoreConstants.Attributes.PointOfService.PARKING,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PointOfService.parking</code> attribute. 
	 * @param value the parking
	 */
	public void setParking(final PointOfService item, final String value)
	{
		setParking( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PointOfService.parking</code> attribute. 
	 * @param value the parking
	 */
	public void setAllParking(final SessionContext ctx, final PointOfService item, final Map<Language,String> value)
	{
		item.setAllLocalizedProperties(ctx,SslCoreConstants.Attributes.PointOfService.PARKING,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PointOfService.parking</code> attribute. 
	 * @param value the parking
	 */
	public void setAllParking(final PointOfService item, final Map<Language,String> value)
	{
		setAllParking( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.passwordImport</code> attribute.
	 * @return the passwordImport - Identify if Password Imported from Magento
	 */
	public Boolean isPasswordImport(final SessionContext ctx, final Customer item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.PASSWORDIMPORT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.passwordImport</code> attribute.
	 * @return the passwordImport - Identify if Password Imported from Magento
	 */
	public Boolean isPasswordImport(final Customer item)
	{
		return isPasswordImport( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.passwordImport</code> attribute. 
	 * @return the passwordImport - Identify if Password Imported from Magento
	 */
	public boolean isPasswordImportAsPrimitive(final SessionContext ctx, final Customer item)
	{
		Boolean value = isPasswordImport( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.passwordImport</code> attribute. 
	 * @return the passwordImport - Identify if Password Imported from Magento
	 */
	public boolean isPasswordImportAsPrimitive(final Customer item)
	{
		return isPasswordImportAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.passwordImport</code> attribute. 
	 * @param value the passwordImport - Identify if Password Imported from Magento
	 */
	public void setPasswordImport(final SessionContext ctx, final Customer item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.PASSWORDIMPORT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.passwordImport</code> attribute. 
	 * @param value the passwordImport - Identify if Password Imported from Magento
	 */
	public void setPasswordImport(final Customer item, final Boolean value)
	{
		setPasswordImport( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.passwordImport</code> attribute. 
	 * @param value the passwordImport - Identify if Password Imported from Magento
	 */
	public void setPasswordImport(final SessionContext ctx, final Customer item, final boolean value)
	{
		setPasswordImport( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.passwordImport</code> attribute. 
	 * @param value the passwordImport - Identify if Password Imported from Magento
	 */
	public void setPasswordImport(final Customer item, final boolean value)
	{
		setPasswordImport( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.payableRefundAmount</code> attribute.
	 * @return the payableRefundAmount - Actual amount to be refunded to the user for a RMA
	 */
	public Double getPayableRefundAmount(final SessionContext ctx, final ReturnRequest item)
	{
		return (Double)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.PAYABLEREFUNDAMOUNT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.payableRefundAmount</code> attribute.
	 * @return the payableRefundAmount - Actual amount to be refunded to the user for a RMA
	 */
	public Double getPayableRefundAmount(final ReturnRequest item)
	{
		return getPayableRefundAmount( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.payableRefundAmount</code> attribute. 
	 * @return the payableRefundAmount - Actual amount to be refunded to the user for a RMA
	 */
	public double getPayableRefundAmountAsPrimitive(final SessionContext ctx, final ReturnRequest item)
	{
		Double value = getPayableRefundAmount( ctx,item );
		return value != null ? value.doubleValue() : 0.0d;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.payableRefundAmount</code> attribute. 
	 * @return the payableRefundAmount - Actual amount to be refunded to the user for a RMA
	 */
	public double getPayableRefundAmountAsPrimitive(final ReturnRequest item)
	{
		return getPayableRefundAmountAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.payableRefundAmount</code> attribute. 
	 * @param value the payableRefundAmount - Actual amount to be refunded to the user for a RMA
	 */
	public void setPayableRefundAmount(final SessionContext ctx, final ReturnRequest item, final Double value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.PAYABLEREFUNDAMOUNT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.payableRefundAmount</code> attribute. 
	 * @param value the payableRefundAmount - Actual amount to be refunded to the user for a RMA
	 */
	public void setPayableRefundAmount(final ReturnRequest item, final Double value)
	{
		setPayableRefundAmount( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.payableRefundAmount</code> attribute. 
	 * @param value the payableRefundAmount - Actual amount to be refunded to the user for a RMA
	 */
	public void setPayableRefundAmount(final SessionContext ctx, final ReturnRequest item, final double value)
	{
		setPayableRefundAmount( ctx, item, Double.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.payableRefundAmount</code> attribute. 
	 * @param value the payableRefundAmount - Actual amount to be refunded to the user for a RMA
	 */
	public void setPayableRefundAmount(final ReturnRequest item, final double value)
	{
		setPayableRefundAmount( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Cart.paymentFailureMessages</code> attribute.
	 * @return the paymentFailureMessages
	 */
	public List<String> getPaymentFailureMessages(final SessionContext ctx, final Cart item)
	{
		List<String> coll = (List<String>)item.getProperty( ctx, SslCoreConstants.Attributes.Cart.PAYMENTFAILUREMESSAGES);
		return coll != null ? coll : Collections.EMPTY_LIST;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Cart.paymentFailureMessages</code> attribute.
	 * @return the paymentFailureMessages
	 */
	public List<String> getPaymentFailureMessages(final Cart item)
	{
		return getPaymentFailureMessages( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Cart.paymentFailureMessages</code> attribute. 
	 * @param value the paymentFailureMessages
	 */
	public void setPaymentFailureMessages(final SessionContext ctx, final Cart item, final List<String> value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Cart.PAYMENTFAILUREMESSAGES,value == null || !value.isEmpty() ? value : null );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Cart.paymentFailureMessages</code> attribute. 
	 * @param value the paymentFailureMessages
	 */
	public void setPaymentFailureMessages(final Cart item, final List<String> value)
	{
		setPaymentFailureMessages( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.paytmTransactionRequestId</code> attribute.
	 * @return the paytmTransactionRequestId - Field for Paytm Unique Order Reference Number
	 */
	public String getPaytmTransactionRequestId(final SessionContext ctx, final AbstractOrder item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrder.PAYTMTRANSACTIONREQUESTID);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.paytmTransactionRequestId</code> attribute.
	 * @return the paytmTransactionRequestId - Field for Paytm Unique Order Reference Number
	 */
	public String getPaytmTransactionRequestId(final AbstractOrder item)
	{
		return getPaytmTransactionRequestId( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.paytmTransactionRequestId</code> attribute. 
	 * @param value the paytmTransactionRequestId - Field for Paytm Unique Order Reference Number
	 */
	public void setPaytmTransactionRequestId(final SessionContext ctx, final AbstractOrder item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrder.PAYTMTRANSACTIONREQUESTID,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.paytmTransactionRequestId</code> attribute. 
	 * @param value the paytmTransactionRequestId - Field for Paytm Unique Order Reference Number
	 */
	public void setPaytmTransactionRequestId(final AbstractOrder item, final String value)
	{
		setPaytmTransactionRequestId( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PaymentTransaction.paytmTransactionResponseVal</code> attribute.
	 * @return the paytmTransactionResponseVal - This field is used for storing Transaction Id sent back by Paytm in response
	 */
	public String getPaytmTransactionResponseVal(final SessionContext ctx, final PaymentTransaction item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.PaymentTransaction.PAYTMTRANSACTIONRESPONSEVAL);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PaymentTransaction.paytmTransactionResponseVal</code> attribute.
	 * @return the paytmTransactionResponseVal - This field is used for storing Transaction Id sent back by Paytm in response
	 */
	public String getPaytmTransactionResponseVal(final PaymentTransaction item)
	{
		return getPaytmTransactionResponseVal( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PaymentTransaction.paytmTransactionResponseVal</code> attribute. 
	 * @param value the paytmTransactionResponseVal - This field is used for storing Transaction Id sent back by Paytm in response
	 */
	public void setPaytmTransactionResponseVal(final SessionContext ctx, final PaymentTransaction item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.PaymentTransaction.PAYTMTRANSACTIONRESPONSEVAL,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PaymentTransaction.paytmTransactionResponseVal</code> attribute. 
	 * @param value the paytmTransactionResponseVal - This field is used for storing Transaction Id sent back by Paytm in response
	 */
	public void setPaytmTransactionResponseVal(final PaymentTransaction item, final String value)
	{
		setPaytmTransactionResponseVal( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.payuCartPaymentRetryCount</code> attribute.
	 * @return the payuCartPaymentRetryCount - Retry count for number of times a user has retried paying using Payu for a cart in case of failure
	 */
	public Integer getPayuCartPaymentRetryCount(final SessionContext ctx, final AbstractOrder item)
	{
		return (Integer)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrder.PAYUCARTPAYMENTRETRYCOUNT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.payuCartPaymentRetryCount</code> attribute.
	 * @return the payuCartPaymentRetryCount - Retry count for number of times a user has retried paying using Payu for a cart in case of failure
	 */
	public Integer getPayuCartPaymentRetryCount(final AbstractOrder item)
	{
		return getPayuCartPaymentRetryCount( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.payuCartPaymentRetryCount</code> attribute. 
	 * @return the payuCartPaymentRetryCount - Retry count for number of times a user has retried paying using Payu for a cart in case of failure
	 */
	public int getPayuCartPaymentRetryCountAsPrimitive(final SessionContext ctx, final AbstractOrder item)
	{
		Integer value = getPayuCartPaymentRetryCount( ctx,item );
		return value != null ? value.intValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.payuCartPaymentRetryCount</code> attribute. 
	 * @return the payuCartPaymentRetryCount - Retry count for number of times a user has retried paying using Payu for a cart in case of failure
	 */
	public int getPayuCartPaymentRetryCountAsPrimitive(final AbstractOrder item)
	{
		return getPayuCartPaymentRetryCountAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.payuCartPaymentRetryCount</code> attribute. 
	 * @param value the payuCartPaymentRetryCount - Retry count for number of times a user has retried paying using Payu for a cart in case of failure
	 */
	public void setPayuCartPaymentRetryCount(final SessionContext ctx, final AbstractOrder item, final Integer value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrder.PAYUCARTPAYMENTRETRYCOUNT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.payuCartPaymentRetryCount</code> attribute. 
	 * @param value the payuCartPaymentRetryCount - Retry count for number of times a user has retried paying using Payu for a cart in case of failure
	 */
	public void setPayuCartPaymentRetryCount(final AbstractOrder item, final Integer value)
	{
		setPayuCartPaymentRetryCount( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.payuCartPaymentRetryCount</code> attribute. 
	 * @param value the payuCartPaymentRetryCount - Retry count for number of times a user has retried paying using Payu for a cart in case of failure
	 */
	public void setPayuCartPaymentRetryCount(final SessionContext ctx, final AbstractOrder item, final int value)
	{
		setPayuCartPaymentRetryCount( ctx, item, Integer.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.payuCartPaymentRetryCount</code> attribute. 
	 * @param value the payuCartPaymentRetryCount - Retry count for number of times a user has retried paying using Payu for a cart in case of failure
	 */
	public void setPayuCartPaymentRetryCount(final AbstractOrder item, final int value)
	{
		setPayuCartPaymentRetryCount( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.payuTransactionRequestId</code> attribute.
	 * @return the payuTransactionRequestId - Field for PayU Unique Order Reference Number
	 */
	public String getPayuTransactionRequestId(final SessionContext ctx, final AbstractOrder item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrder.PAYUTRANSACTIONREQUESTID);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.payuTransactionRequestId</code> attribute.
	 * @return the payuTransactionRequestId - Field for PayU Unique Order Reference Number
	 */
	public String getPayuTransactionRequestId(final AbstractOrder item)
	{
		return getPayuTransactionRequestId( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.payuTransactionRequestId</code> attribute. 
	 * @param value the payuTransactionRequestId - Field for PayU Unique Order Reference Number
	 */
	public void setPayuTransactionRequestId(final SessionContext ctx, final AbstractOrder item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrder.PAYUTRANSACTIONREQUESTID,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.payuTransactionRequestId</code> attribute. 
	 * @param value the payuTransactionRequestId - Field for PayU Unique Order Reference Number
	 */
	public void setPayuTransactionRequestId(final AbstractOrder item, final String value)
	{
		setPayuTransactionRequestId( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSSite.percentDiscountDisplayOption</code> attribute.
	 * @return the percentDiscountDisplayOption - Options to choose how the styling of the % discount
	 *                             would be shown on the PLP pages
	 */
	public EnumerationValue getPercentDiscountDisplayOption(final SessionContext ctx, final CMSSite item)
	{
		return (EnumerationValue)item.getProperty( ctx, SslCoreConstants.Attributes.CMSSite.PERCENTDISCOUNTDISPLAYOPTION);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSSite.percentDiscountDisplayOption</code> attribute.
	 * @return the percentDiscountDisplayOption - Options to choose how the styling of the % discount
	 *                             would be shown on the PLP pages
	 */
	public EnumerationValue getPercentDiscountDisplayOption(final CMSSite item)
	{
		return getPercentDiscountDisplayOption( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSSite.percentDiscountDisplayOption</code> attribute. 
	 * @param value the percentDiscountDisplayOption - Options to choose how the styling of the % discount
	 *                             would be shown on the PLP pages
	 */
	public void setPercentDiscountDisplayOption(final SessionContext ctx, final CMSSite item, final EnumerationValue value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.CMSSite.PERCENTDISCOUNTDISPLAYOPTION,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSSite.percentDiscountDisplayOption</code> attribute. 
	 * @param value the percentDiscountDisplayOption - Options to choose how the styling of the % discount
	 *                             would be shown on the PLP pages
	 */
	public void setPercentDiscountDisplayOption(final CMSSite item, final EnumerationValue value)
	{
		setPercentDiscountDisplayOption( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.pickup</code> attribute.
	 * @return the pickup - Pickup
	 */
	public EnumerationValue getPickup(final SessionContext ctx, final ReturnRequest item)
	{
		return (EnumerationValue)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.PICKUP);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.pickup</code> attribute.
	 * @return the pickup - Pickup
	 */
	public EnumerationValue getPickup(final ReturnRequest item)
	{
		return getPickup( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.pickup</code> attribute. 
	 * @param value the pickup - Pickup
	 */
	public void setPickup(final SessionContext ctx, final ReturnRequest item, final EnumerationValue value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.PICKUP,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.pickup</code> attribute. 
	 * @param value the pickup - Pickup
	 */
	public void setPickup(final ReturnRequest item, final EnumerationValue value)
	{
		setPickup( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.pickupDate</code> attribute.
	 * @return the pickupDate - Return Pickup Date
	 */
	public Date getPickupDate(final SessionContext ctx, final ReturnRequest item)
	{
		return (Date)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.PICKUPDATE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.pickupDate</code> attribute.
	 * @return the pickupDate - Return Pickup Date
	 */
	public Date getPickupDate(final ReturnRequest item)
	{
		return getPickupDate( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.pickupDate</code> attribute. 
	 * @param value the pickupDate - Return Pickup Date
	 */
	public void setPickupDate(final SessionContext ctx, final ReturnRequest item, final Date value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.PICKUPDATE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.pickupDate</code> attribute. 
	 * @param value the pickupDate - Return Pickup Date
	 */
	public void setPickupDate(final ReturnRequest item, final Date value)
	{
		setPickupDate( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Warehouse.pickupEndtime</code> attribute.
	 * @return the pickupEndtime - Pickup End Timings of the Warehouse
	 */
	public Date getPickupEndtime(final SessionContext ctx, final Warehouse item)
	{
		return (Date)item.getProperty( ctx, SslCoreConstants.Attributes.Warehouse.PICKUPENDTIME);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Warehouse.pickupEndtime</code> attribute.
	 * @return the pickupEndtime - Pickup End Timings of the Warehouse
	 */
	public Date getPickupEndtime(final Warehouse item)
	{
		return getPickupEndtime( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Warehouse.pickupEndtime</code> attribute. 
	 * @param value the pickupEndtime - Pickup End Timings of the Warehouse
	 */
	public void setPickupEndtime(final SessionContext ctx, final Warehouse item, final Date value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Warehouse.PICKUPENDTIME,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Warehouse.pickupEndtime</code> attribute. 
	 * @param value the pickupEndtime - Pickup End Timings of the Warehouse
	 */
	public void setPickupEndtime(final Warehouse item, final Date value)
	{
		setPickupEndtime( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.pickupODC</code> attribute.
	 * @return the pickupODC
	 */
	public String getPickupODC(final SessionContext ctx, final AbstractOrderEntry item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrderEntry.PICKUPODC);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.pickupODC</code> attribute.
	 * @return the pickupODC
	 */
	public String getPickupODC(final AbstractOrderEntry item)
	{
		return getPickupODC( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.pickupODC</code> attribute. 
	 * @param value the pickupODC
	 */
	public void setPickupODC(final SessionContext ctx, final AbstractOrderEntry item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrderEntry.PICKUPODC,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.pickupODC</code> attribute. 
	 * @param value the pickupODC
	 */
	public void setPickupODC(final AbstractOrderEntry item, final String value)
	{
		setPickupODC( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.pickupPersonName</code> attribute.
	 * @return the pickupPersonName
	 */
	public String getPickupPersonName(final SessionContext ctx, final AbstractOrder item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrder.PICKUPPERSONNAME);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.pickupPersonName</code> attribute.
	 * @return the pickupPersonName
	 */
	public String getPickupPersonName(final AbstractOrder item)
	{
		return getPickupPersonName( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.pickupPersonName</code> attribute. 
	 * @param value the pickupPersonName
	 */
	public void setPickupPersonName(final SessionContext ctx, final AbstractOrder item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrder.PICKUPPERSONNAME,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.pickupPersonName</code> attribute. 
	 * @param value the pickupPersonName
	 */
	public void setPickupPersonName(final AbstractOrder item, final String value)
	{
		setPickupPersonName( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.pickupPersonNumber</code> attribute.
	 * @return the pickupPersonNumber
	 */
	public String getPickupPersonNumber(final SessionContext ctx, final AbstractOrder item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrder.PICKUPPERSONNUMBER);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.pickupPersonNumber</code> attribute.
	 * @return the pickupPersonNumber
	 */
	public String getPickupPersonNumber(final AbstractOrder item)
	{
		return getPickupPersonNumber( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.pickupPersonNumber</code> attribute. 
	 * @param value the pickupPersonNumber
	 */
	public void setPickupPersonNumber(final SessionContext ctx, final AbstractOrder item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrder.PICKUPPERSONNUMBER,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.pickupPersonNumber</code> attribute. 
	 * @param value the pickupPersonNumber
	 */
	public void setPickupPersonNumber(final AbstractOrder item, final String value)
	{
		setPickupPersonNumber( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Warehouse.pickupStarttime</code> attribute.
	 * @return the pickupStarttime - Pickup Start Time of the Warehouse
	 */
	public Date getPickupStarttime(final SessionContext ctx, final Warehouse item)
	{
		return (Date)item.getProperty( ctx, SslCoreConstants.Attributes.Warehouse.PICKUPSTARTTIME);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Warehouse.pickupStarttime</code> attribute.
	 * @return the pickupStarttime - Pickup Start Time of the Warehouse
	 */
	public Date getPickupStarttime(final Warehouse item)
	{
		return getPickupStarttime( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Warehouse.pickupStarttime</code> attribute. 
	 * @param value the pickupStarttime - Pickup Start Time of the Warehouse
	 */
	public void setPickupStarttime(final SessionContext ctx, final Warehouse item, final Date value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Warehouse.PICKUPSTARTTIME,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Warehouse.pickupStarttime</code> attribute. 
	 * @param value the pickupStarttime - Pickup Start Time of the Warehouse
	 */
	public void setPickupStarttime(final Warehouse item, final Date value)
	{
		setPickupStarttime( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.pickupStore</code> attribute.
	 * @return the pickupStore
	 */
	public String getPickupStore(final SessionContext ctx, final AbstractOrderEntry item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrderEntry.PICKUPSTORE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.pickupStore</code> attribute.
	 * @return the pickupStore
	 */
	public String getPickupStore(final AbstractOrderEntry item)
	{
		return getPickupStore( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.pickupStore</code> attribute. 
	 * @param value the pickupStore
	 */
	public void setPickupStore(final SessionContext ctx, final AbstractOrderEntry item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrderEntry.PICKUPSTORE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.pickupStore</code> attribute. 
	 * @param value the pickupStore
	 */
	public void setPickupStore(final AbstractOrderEntry item, final String value)
	{
		setPickupStore( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.pieceDiscount</code> attribute.
	 * @return the pieceDiscount
	 */
	public Double getPieceDiscount(final SessionContext ctx, final AbstractOrderEntry item)
	{
		return (Double)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrderEntry.PIECEDISCOUNT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.pieceDiscount</code> attribute.
	 * @return the pieceDiscount
	 */
	public Double getPieceDiscount(final AbstractOrderEntry item)
	{
		return getPieceDiscount( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.pieceDiscount</code> attribute. 
	 * @return the pieceDiscount
	 */
	public double getPieceDiscountAsPrimitive(final SessionContext ctx, final AbstractOrderEntry item)
	{
		Double value = getPieceDiscount( ctx,item );
		return value != null ? value.doubleValue() : 0.0d;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.pieceDiscount</code> attribute. 
	 * @return the pieceDiscount
	 */
	public double getPieceDiscountAsPrimitive(final AbstractOrderEntry item)
	{
		return getPieceDiscountAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.pieceDiscount</code> attribute. 
	 * @param value the pieceDiscount
	 */
	public void setPieceDiscount(final SessionContext ctx, final AbstractOrderEntry item, final Double value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrderEntry.PIECEDISCOUNT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.pieceDiscount</code> attribute. 
	 * @param value the pieceDiscount
	 */
	public void setPieceDiscount(final AbstractOrderEntry item, final Double value)
	{
		setPieceDiscount( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.pieceDiscount</code> attribute. 
	 * @param value the pieceDiscount
	 */
	public void setPieceDiscount(final SessionContext ctx, final AbstractOrderEntry item, final double value)
	{
		setPieceDiscount( ctx, item, Double.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.pieceDiscount</code> attribute. 
	 * @param value the pieceDiscount
	 */
	public void setPieceDiscount(final AbstractOrderEntry item, final double value)
	{
		setPieceDiscount( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.pointOfService</code> attribute.
	 * @return the pointOfService - Point of Service Information
	 */
	public String getPointOfService(final SessionContext ctx, final PriceRow item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.PriceRow.POINTOFSERVICE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.pointOfService</code> attribute.
	 * @return the pointOfService - Point of Service Information
	 */
	public String getPointOfService(final PriceRow item)
	{
		return getPointOfService( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.pointOfService</code> attribute. 
	 * @param value the pointOfService - Point of Service Information
	 */
	public void setPointOfService(final SessionContext ctx, final PriceRow item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.PriceRow.POINTOFSERVICE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.pointOfService</code> attribute. 
	 * @param value the pointOfService - Point of Service Information
	 */
	public void setPointOfService(final PriceRow item, final String value)
	{
		setPointOfService( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.popularityRank</code> attribute.
	 * @return the popularityRank - Popularity Ranks
	 */
	public Map<String,Long> getAllPopularityRank(final SessionContext ctx, final Product item)
	{
		Map<String,Long> map = (Map<String,Long>)item.getProperty( ctx, SslCoreConstants.Attributes.Product.POPULARITYRANK);
		return map != null ? map : Collections.EMPTY_MAP;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.popularityRank</code> attribute.
	 * @return the popularityRank - Popularity Ranks
	 */
	public Map<String,Long> getAllPopularityRank(final Product item)
	{
		return getAllPopularityRank( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.popularityRank</code> attribute. 
	 * @param value the popularityRank - Popularity Ranks
	 */
	public void setAllPopularityRank(final SessionContext ctx, final Product item, final Map<String,Long> value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.POPULARITYRANK,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.popularityRank</code> attribute. 
	 * @param value the popularityRank - Popularity Ranks
	 */
	public void setAllPopularityRank(final Product item, final Map<String,Long> value)
	{
		setAllPopularityRank( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PointOfService.posDisclaimer</code> attribute.
	 * @return the posDisclaimer
	 */
	public String getPosDisclaimer(final SessionContext ctx, final PointOfService item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.PointOfService.POSDISCLAIMER);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PointOfService.posDisclaimer</code> attribute.
	 * @return the posDisclaimer
	 */
	public String getPosDisclaimer(final PointOfService item)
	{
		return getPosDisclaimer( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PointOfService.posDisclaimer</code> attribute. 
	 * @param value the posDisclaimer
	 */
	public void setPosDisclaimer(final SessionContext ctx, final PointOfService item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.PointOfService.POSDISCLAIMER,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PointOfService.posDisclaimer</code> attribute. 
	 * @param value the posDisclaimer
	 */
	public void setPosDisclaimer(final PointOfService item, final String value)
	{
		setPosDisclaimer( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.preOrder</code> attribute.
	 * @return the preOrder - Defines if the Product is available for pre order
	 */
	public Boolean isPreOrder(final SessionContext ctx, final Product item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Product.PREORDER);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.preOrder</code> attribute.
	 * @return the preOrder - Defines if the Product is available for pre order
	 */
	public Boolean isPreOrder(final Product item)
	{
		return isPreOrder( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.preOrder</code> attribute. 
	 * @return the preOrder - Defines if the Product is available for pre order
	 */
	public boolean isPreOrderAsPrimitive(final SessionContext ctx, final Product item)
	{
		Boolean value = isPreOrder( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.preOrder</code> attribute. 
	 * @return the preOrder - Defines if the Product is available for pre order
	 */
	public boolean isPreOrderAsPrimitive(final Product item)
	{
		return isPreOrderAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.preOrder</code> attribute. 
	 * @param value the preOrder - Defines if the Product is available for pre order
	 */
	public void setPreOrder(final SessionContext ctx, final Product item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.PREORDER,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.preOrder</code> attribute. 
	 * @param value the preOrder - Defines if the Product is available for pre order
	 */
	public void setPreOrder(final Product item, final Boolean value)
	{
		setPreOrder( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.preOrder</code> attribute. 
	 * @param value the preOrder - Defines if the Product is available for pre order
	 */
	public void setPreOrder(final SessionContext ctx, final Product item, final boolean value)
	{
		setPreOrder( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.preOrder</code> attribute. 
	 * @param value the preOrder - Defines if the Product is available for pre order
	 */
	public void setPreOrder(final Product item, final boolean value)
	{
		setPreOrder( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.preOrderQty</code> attribute.
	 * @return the preOrderQty - Defines the quantity of Product available for pre order
	 */
	public Long getPreOrderQty(final SessionContext ctx, final Product item)
	{
		return (Long)item.getProperty( ctx, SslCoreConstants.Attributes.Product.PREORDERQTY);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.preOrderQty</code> attribute.
	 * @return the preOrderQty - Defines the quantity of Product available for pre order
	 */
	public Long getPreOrderQty(final Product item)
	{
		return getPreOrderQty( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.preOrderQty</code> attribute. 
	 * @return the preOrderQty - Defines the quantity of Product available for pre order
	 */
	public long getPreOrderQtyAsPrimitive(final SessionContext ctx, final Product item)
	{
		Long value = getPreOrderQty( ctx,item );
		return value != null ? value.longValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.preOrderQty</code> attribute. 
	 * @return the preOrderQty - Defines the quantity of Product available for pre order
	 */
	public long getPreOrderQtyAsPrimitive(final Product item)
	{
		return getPreOrderQtyAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.preOrderQty</code> attribute. 
	 * @param value the preOrderQty - Defines the quantity of Product available for pre order
	 */
	public void setPreOrderQty(final SessionContext ctx, final Product item, final Long value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.PREORDERQTY,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.preOrderQty</code> attribute. 
	 * @param value the preOrderQty - Defines the quantity of Product available for pre order
	 */
	public void setPreOrderQty(final Product item, final Long value)
	{
		setPreOrderQty( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.preOrderQty</code> attribute. 
	 * @param value the preOrderQty - Defines the quantity of Product available for pre order
	 */
	public void setPreOrderQty(final SessionContext ctx, final Product item, final long value)
	{
		setPreOrderQty( ctx, item, Long.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.preOrderQty</code> attribute. 
	 * @param value the preOrderQty - Defines the quantity of Product available for pre order
	 */
	public void setPreOrderQty(final Product item, final long value)
	{
		setPreOrderQty( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.previousStatus</code> attribute.
	 * @return the previousStatus
	 */
	public EnumerationValue getPreviousStatus(final SessionContext ctx, final AbstractOrder item)
	{
		return (EnumerationValue)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrder.PREVIOUSSTATUS);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.previousStatus</code> attribute.
	 * @return the previousStatus
	 */
	public EnumerationValue getPreviousStatus(final AbstractOrder item)
	{
		return getPreviousStatus( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.previousStatus</code> attribute. 
	 * @param value the previousStatus
	 */
	public void setPreviousStatus(final SessionContext ctx, final AbstractOrder item, final EnumerationValue value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrder.PREVIOUSSTATUS,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.previousStatus</code> attribute. 
	 * @param value the previousStatus
	 */
	public void setPreviousStatus(final AbstractOrder item, final EnumerationValue value)
	{
		setPreviousStatus( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.priceConscious</code> attribute.
	 * @return the priceConscious
	 */
	public Boolean isPriceConscious(final SessionContext ctx, final Customer item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.PRICECONSCIOUS);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.priceConscious</code> attribute.
	 * @return the priceConscious
	 */
	public Boolean isPriceConscious(final Customer item)
	{
		return isPriceConscious( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.priceConscious</code> attribute. 
	 * @return the priceConscious
	 */
	public boolean isPriceConsciousAsPrimitive(final SessionContext ctx, final Customer item)
	{
		Boolean value = isPriceConscious( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.priceConscious</code> attribute. 
	 * @return the priceConscious
	 */
	public boolean isPriceConsciousAsPrimitive(final Customer item)
	{
		return isPriceConsciousAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.priceConscious</code> attribute. 
	 * @param value the priceConscious
	 */
	public void setPriceConscious(final SessionContext ctx, final Customer item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.PRICECONSCIOUS,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.priceConscious</code> attribute. 
	 * @param value the priceConscious
	 */
	public void setPriceConscious(final Customer item, final Boolean value)
	{
		setPriceConscious( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.priceConscious</code> attribute. 
	 * @param value the priceConscious
	 */
	public void setPriceConscious(final SessionContext ctx, final Customer item, final boolean value)
	{
		setPriceConscious( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.priceConscious</code> attribute. 
	 * @param value the priceConscious
	 */
	public void setPriceConscious(final Customer item, final boolean value)
	{
		setPriceConscious( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.priceDiff</code> attribute.
	 * @return the priceDiff - Price Difference
	 */
	public Double getPriceDiff(final SessionContext ctx, final ReturnRequest item)
	{
		return (Double)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.PRICEDIFF);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.priceDiff</code> attribute.
	 * @return the priceDiff - Price Difference
	 */
	public Double getPriceDiff(final ReturnRequest item)
	{
		return getPriceDiff( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.priceDiff</code> attribute. 
	 * @return the priceDiff - Price Difference
	 */
	public double getPriceDiffAsPrimitive(final SessionContext ctx, final ReturnRequest item)
	{
		Double value = getPriceDiff( ctx,item );
		return value != null ? value.doubleValue() : 0.0d;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.priceDiff</code> attribute. 
	 * @return the priceDiff - Price Difference
	 */
	public double getPriceDiffAsPrimitive(final ReturnRequest item)
	{
		return getPriceDiffAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.priceDiff</code> attribute. 
	 * @param value the priceDiff - Price Difference
	 */
	public void setPriceDiff(final SessionContext ctx, final ReturnRequest item, final Double value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.PRICEDIFF,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.priceDiff</code> attribute. 
	 * @param value the priceDiff - Price Difference
	 */
	public void setPriceDiff(final ReturnRequest item, final Double value)
	{
		setPriceDiff( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.priceDiff</code> attribute. 
	 * @param value the priceDiff - Price Difference
	 */
	public void setPriceDiff(final SessionContext ctx, final ReturnRequest item, final double value)
	{
		setPriceDiff( ctx, item, Double.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.priceDiff</code> attribute. 
	 * @param value the priceDiff - Price Difference
	 */
	public void setPriceDiff(final ReturnRequest item, final double value)
	{
		setPriceDiff( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReplacementEntry.priceDiff</code> attribute.
	 * @return the priceDiff - Price Difference
	 */
	public Double getPriceDiff(final SessionContext ctx, final ReplacementEntry item)
	{
		return (Double)item.getProperty( ctx, SslCoreConstants.Attributes.ReplacementEntry.PRICEDIFF);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReplacementEntry.priceDiff</code> attribute.
	 * @return the priceDiff - Price Difference
	 */
	public Double getPriceDiff(final ReplacementEntry item)
	{
		return getPriceDiff( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReplacementEntry.priceDiff</code> attribute. 
	 * @return the priceDiff - Price Difference
	 */
	public double getPriceDiffAsPrimitive(final SessionContext ctx, final ReplacementEntry item)
	{
		Double value = getPriceDiff( ctx,item );
		return value != null ? value.doubleValue() : 0.0d;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReplacementEntry.priceDiff</code> attribute. 
	 * @return the priceDiff - Price Difference
	 */
	public double getPriceDiffAsPrimitive(final ReplacementEntry item)
	{
		return getPriceDiffAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReplacementEntry.priceDiff</code> attribute. 
	 * @param value the priceDiff - Price Difference
	 */
	public void setPriceDiff(final SessionContext ctx, final ReplacementEntry item, final Double value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReplacementEntry.PRICEDIFF,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReplacementEntry.priceDiff</code> attribute. 
	 * @param value the priceDiff - Price Difference
	 */
	public void setPriceDiff(final ReplacementEntry item, final Double value)
	{
		setPriceDiff( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReplacementEntry.priceDiff</code> attribute. 
	 * @param value the priceDiff - Price Difference
	 */
	public void setPriceDiff(final SessionContext ctx, final ReplacementEntry item, final double value)
	{
		setPriceDiff( ctx, item, Double.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReplacementEntry.priceDiff</code> attribute. 
	 * @param value the priceDiff - Price Difference
	 */
	public void setPriceDiff(final ReplacementEntry item, final double value)
	{
		setPriceDiff( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.priceDiffBankDetails</code> attribute.
	 * @return the priceDiffBankDetails - Price Diff Bank Details
	 */
	public ReturnRequestBankDetails getPriceDiffBankDetails(final SessionContext ctx, final ReturnRequest item)
	{
		return (ReturnRequestBankDetails)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.PRICEDIFFBANKDETAILS);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.priceDiffBankDetails</code> attribute.
	 * @return the priceDiffBankDetails - Price Diff Bank Details
	 */
	public ReturnRequestBankDetails getPriceDiffBankDetails(final ReturnRequest item)
	{
		return getPriceDiffBankDetails( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.priceDiffBankDetails</code> attribute. 
	 * @param value the priceDiffBankDetails - Price Diff Bank Details
	 */
	public void setPriceDiffBankDetails(final SessionContext ctx, final ReturnRequest item, final ReturnRequestBankDetails value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.PRICEDIFFBANKDETAILS,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.priceDiffBankDetails</code> attribute. 
	 * @param value the priceDiffBankDetails - Price Diff Bank Details
	 */
	public void setPriceDiffBankDetails(final ReturnRequest item, final ReturnRequestBankDetails value)
	{
		setPriceDiffBankDetails( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.priceDiffCaptureMode</code> attribute.
	 * @return the priceDiffCaptureMode - Price Difference Capture Mode
	 */
	public Map getPriceDiffCaptureMode(final SessionContext ctx, final ReturnRequest item)
	{
		return (Map)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.PRICEDIFFCAPTUREMODE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.priceDiffCaptureMode</code> attribute.
	 * @return the priceDiffCaptureMode - Price Difference Capture Mode
	 */
	public Map getPriceDiffCaptureMode(final ReturnRequest item)
	{
		return getPriceDiffCaptureMode( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.priceDiffCaptureMode</code> attribute. 
	 * @param value the priceDiffCaptureMode - Price Difference Capture Mode
	 */
	public void setPriceDiffCaptureMode(final SessionContext ctx, final ReturnRequest item, final Map value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.PRICEDIFFCAPTUREMODE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.priceDiffCaptureMode</code> attribute. 
	 * @param value the priceDiffCaptureMode - Price Difference Capture Mode
	 */
	public void setPriceDiffCaptureMode(final ReturnRequest item, final Map value)
	{
		setPriceDiffCaptureMode( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.priceDiffRefundMode</code> attribute.
	 * @return the priceDiffRefundMode - Price Difference Refund Mode
	 */
	public EnumerationValue getPriceDiffRefundMode(final SessionContext ctx, final ReturnRequest item)
	{
		return (EnumerationValue)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.PRICEDIFFREFUNDMODE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.priceDiffRefundMode</code> attribute.
	 * @return the priceDiffRefundMode - Price Difference Refund Mode
	 */
	public EnumerationValue getPriceDiffRefundMode(final ReturnRequest item)
	{
		return getPriceDiffRefundMode( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.priceDiffRefundMode</code> attribute. 
	 * @param value the priceDiffRefundMode - Price Difference Refund Mode
	 */
	public void setPriceDiffRefundMode(final SessionContext ctx, final ReturnRequest item, final EnumerationValue value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.PRICEDIFFREFUNDMODE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.priceDiffRefundMode</code> attribute. 
	 * @param value the priceDiffRefundMode - Price Difference Refund Mode
	 */
	public void setPriceDiffRefundMode(final ReturnRequest item, final EnumerationValue value)
	{
		setPriceDiffRefundMode( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.priceType</code> attribute.
	 * @return the priceType - Price Type
	 */
	public Integer getPriceType(final SessionContext ctx, final PriceRow item)
	{
		return (Integer)item.getProperty( ctx, SslCoreConstants.Attributes.PriceRow.PRICETYPE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.priceType</code> attribute.
	 * @return the priceType - Price Type
	 */
	public Integer getPriceType(final PriceRow item)
	{
		return getPriceType( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.priceType</code> attribute. 
	 * @return the priceType - Price Type
	 */
	public int getPriceTypeAsPrimitive(final SessionContext ctx, final PriceRow item)
	{
		Integer value = getPriceType( ctx,item );
		return value != null ? value.intValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.priceType</code> attribute. 
	 * @return the priceType - Price Type
	 */
	public int getPriceTypeAsPrimitive(final PriceRow item)
	{
		return getPriceTypeAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.priceType</code> attribute. 
	 * @param value the priceType - Price Type
	 */
	public void setPriceType(final SessionContext ctx, final PriceRow item, final Integer value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.PriceRow.PRICETYPE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.priceType</code> attribute. 
	 * @param value the priceType - Price Type
	 */
	public void setPriceType(final PriceRow item, final Integer value)
	{
		setPriceType( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.priceType</code> attribute. 
	 * @param value the priceType - Price Type
	 */
	public void setPriceType(final SessionContext ctx, final PriceRow item, final int value)
	{
		setPriceType( ctx, item, Integer.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.priceType</code> attribute. 
	 * @param value the priceType - Price Type
	 */
	public void setPriceType(final PriceRow item, final int value)
	{
		setPriceType( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PointOfService.priority</code> attribute.
	 * @return the priority
	 */
	public Integer getPriority(final SessionContext ctx, final PointOfService item)
	{
		return (Integer)item.getProperty( ctx, SslCoreConstants.Attributes.PointOfService.PRIORITY);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PointOfService.priority</code> attribute.
	 * @return the priority
	 */
	public Integer getPriority(final PointOfService item)
	{
		return getPriority( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PointOfService.priority</code> attribute. 
	 * @return the priority
	 */
	public int getPriorityAsPrimitive(final SessionContext ctx, final PointOfService item)
	{
		Integer value = getPriority( ctx,item );
		return value != null ? value.intValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PointOfService.priority</code> attribute. 
	 * @return the priority
	 */
	public int getPriorityAsPrimitive(final PointOfService item)
	{
		return getPriorityAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PointOfService.priority</code> attribute. 
	 * @param value the priority
	 */
	public void setPriority(final SessionContext ctx, final PointOfService item, final Integer value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.PointOfService.PRIORITY,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PointOfService.priority</code> attribute. 
	 * @param value the priority
	 */
	public void setPriority(final PointOfService item, final Integer value)
	{
		setPriority( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PointOfService.priority</code> attribute. 
	 * @param value the priority
	 */
	public void setPriority(final SessionContext ctx, final PointOfService item, final int value)
	{
		setPriority( ctx, item, Integer.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PointOfService.priority</code> attribute. 
	 * @param value the priority
	 */
	public void setPriority(final PointOfService item, final int value)
	{
		setPriority( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Title.priority</code> attribute.
	 * @return the priority - Priority For Display
	 */
	public Integer getPriority(final SessionContext ctx, final Title item)
	{
		return (Integer)item.getProperty( ctx, SslCoreConstants.Attributes.Title.PRIORITY);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Title.priority</code> attribute.
	 * @return the priority - Priority For Display
	 */
	public Integer getPriority(final Title item)
	{
		return getPriority( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Title.priority</code> attribute. 
	 * @return the priority - Priority For Display
	 */
	public int getPriorityAsPrimitive(final SessionContext ctx, final Title item)
	{
		Integer value = getPriority( ctx,item );
		return value != null ? value.intValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Title.priority</code> attribute. 
	 * @return the priority - Priority For Display
	 */
	public int getPriorityAsPrimitive(final Title item)
	{
		return getPriorityAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Title.priority</code> attribute. 
	 * @param value the priority - Priority For Display
	 */
	public void setPriority(final SessionContext ctx, final Title item, final Integer value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Title.PRIORITY,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Title.priority</code> attribute. 
	 * @param value the priority - Priority For Display
	 */
	public void setPriority(final Title item, final Integer value)
	{
		setPriority( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Title.priority</code> attribute. 
	 * @param value the priority - Priority For Display
	 */
	public void setPriority(final SessionContext ctx, final Title item, final int value)
	{
		setPriority( ctx, item, Integer.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Title.priority</code> attribute. 
	 * @param value the priority - Priority For Display
	 */
	public void setPriority(final Title item, final int value)
	{
		setPriority( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.productHighlights</code> attribute.
	 * @return the productHighlights
	 */
	public List<String> getProductHighlights(final SessionContext ctx, final Product item)
	{
		List<String> coll = (List<String>)item.getProperty( ctx, SslCoreConstants.Attributes.Product.PRODUCTHIGHLIGHTS);
		return coll != null ? coll : Collections.EMPTY_LIST;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.productHighlights</code> attribute.
	 * @return the productHighlights
	 */
	public List<String> getProductHighlights(final Product item)
	{
		return getProductHighlights( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.productHighlights</code> attribute. 
	 * @param value the productHighlights
	 */
	public void setProductHighlights(final SessionContext ctx, final Product item, final List<String> value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.PRODUCTHIGHLIGHTS,value == null || !value.isEmpty() ? value : null );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.productHighlights</code> attribute. 
	 * @param value the productHighlights
	 */
	public void setProductHighlights(final Product item, final List<String> value)
	{
		setProductHighlights( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.productSpecificCategory</code> attribute.
	 * @return the productSpecificCategory
	 */
	public ProductSpecificCategoryComponent getProductSpecificCategory(final SessionContext ctx, final Category item)
	{
		return (ProductSpecificCategoryComponent)item.getProperty( ctx, SslCoreConstants.Attributes.Category.PRODUCTSPECIFICCATEGORY);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.productSpecificCategory</code> attribute.
	 * @return the productSpecificCategory
	 */
	public ProductSpecificCategoryComponent getProductSpecificCategory(final Category item)
	{
		return getProductSpecificCategory( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.productSpecificCategory</code> attribute. 
	 * @param value the productSpecificCategory
	 */
	public void setProductSpecificCategory(final SessionContext ctx, final Category item, final ProductSpecificCategoryComponent value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.PRODUCTSPECIFICCATEGORY,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.productSpecificCategory</code> attribute. 
	 * @param value the productSpecificCategory
	 */
	public void setProductSpecificCategory(final Category item, final ProductSpecificCategoryComponent value)
	{
		setProductSpecificCategory( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.profileEditOTP</code> attribute.
	 * @return the profileEditOTP - SSL Profile Edit OTP
	 */
	public String getProfileEditOTP(final SessionContext ctx, final Customer item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.PROFILEEDITOTP);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.profileEditOTP</code> attribute.
	 * @return the profileEditOTP - SSL Profile Edit OTP
	 */
	public String getProfileEditOTP(final Customer item)
	{
		return getProfileEditOTP( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.profileEditOTP</code> attribute. 
	 * @param value the profileEditOTP - SSL Profile Edit OTP
	 */
	public void setProfileEditOTP(final SessionContext ctx, final Customer item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.PROFILEEDITOTP,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.profileEditOTP</code> attribute. 
	 * @param value the profileEditOTP - SSL Profile Edit OTP
	 */
	public void setProfileEditOTP(final Customer item, final String value)
	{
		setProfileEditOTP( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.profileEditOTPSentTime</code> attribute.
	 * @return the profileEditOTPSentTime - SSL Profile Edit OTP sent time
	 */
	public Long getProfileEditOTPSentTime(final SessionContext ctx, final Customer item)
	{
		return (Long)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.PROFILEEDITOTPSENTTIME);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.profileEditOTPSentTime</code> attribute.
	 * @return the profileEditOTPSentTime - SSL Profile Edit OTP sent time
	 */
	public Long getProfileEditOTPSentTime(final Customer item)
	{
		return getProfileEditOTPSentTime( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.profileEditOTPSentTime</code> attribute. 
	 * @return the profileEditOTPSentTime - SSL Profile Edit OTP sent time
	 */
	public long getProfileEditOTPSentTimeAsPrimitive(final SessionContext ctx, final Customer item)
	{
		Long value = getProfileEditOTPSentTime( ctx,item );
		return value != null ? value.longValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.profileEditOTPSentTime</code> attribute. 
	 * @return the profileEditOTPSentTime - SSL Profile Edit OTP sent time
	 */
	public long getProfileEditOTPSentTimeAsPrimitive(final Customer item)
	{
		return getProfileEditOTPSentTimeAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.profileEditOTPSentTime</code> attribute. 
	 * @param value the profileEditOTPSentTime - SSL Profile Edit OTP sent time
	 */
	public void setProfileEditOTPSentTime(final SessionContext ctx, final Customer item, final Long value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.PROFILEEDITOTPSENTTIME,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.profileEditOTPSentTime</code> attribute. 
	 * @param value the profileEditOTPSentTime - SSL Profile Edit OTP sent time
	 */
	public void setProfileEditOTPSentTime(final Customer item, final Long value)
	{
		setProfileEditOTPSentTime( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.profileEditOTPSentTime</code> attribute. 
	 * @param value the profileEditOTPSentTime - SSL Profile Edit OTP sent time
	 */
	public void setProfileEditOTPSentTime(final SessionContext ctx, final Customer item, final long value)
	{
		setProfileEditOTPSentTime( ctx, item, Long.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.profileEditOTPSentTime</code> attribute. 
	 * @param value the profileEditOTPSentTime - SSL Profile Edit OTP sent time
	 */
	public void setProfileEditOTPSentTime(final Customer item, final long value)
	{
		setProfileEditOTPSentTime( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CustomerReview.quality</code> attribute.
	 * @return the quality - Quality of the product.
	 */
	public Double getQuality(final SessionContext ctx, final CustomerReview item)
	{
		return (Double)item.getProperty( ctx, SslCoreConstants.Attributes.CustomerReview.QUALITY);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CustomerReview.quality</code> attribute.
	 * @return the quality - Quality of the product.
	 */
	public Double getQuality(final CustomerReview item)
	{
		return getQuality( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CustomerReview.quality</code> attribute. 
	 * @return the quality - Quality of the product.
	 */
	public double getQualityAsPrimitive(final SessionContext ctx, final CustomerReview item)
	{
		Double value = getQuality( ctx,item );
		return value != null ? value.doubleValue() : 0.0d;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CustomerReview.quality</code> attribute. 
	 * @return the quality - Quality of the product.
	 */
	public double getQualityAsPrimitive(final CustomerReview item)
	{
		return getQualityAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CustomerReview.quality</code> attribute. 
	 * @param value the quality - Quality of the product.
	 */
	public void setQuality(final SessionContext ctx, final CustomerReview item, final Double value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.CustomerReview.QUALITY,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CustomerReview.quality</code> attribute. 
	 * @param value the quality - Quality of the product.
	 */
	public void setQuality(final CustomerReview item, final Double value)
	{
		setQuality( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CustomerReview.quality</code> attribute. 
	 * @param value the quality - Quality of the product.
	 */
	public void setQuality(final SessionContext ctx, final CustomerReview item, final double value)
	{
		setQuality( ctx, item, Double.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CustomerReview.quality</code> attribute. 
	 * @param value the quality - Quality of the product.
	 */
	public void setQuality(final CustomerReview item, final double value)
	{
		setQuality( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSLinkComponent.query</code> attribute.
	 * @return the query - Query url for search
	 */
	public String getQuery(final SessionContext ctx, final CMSLinkComponent item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.CMSLinkComponent.QUERY);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSLinkComponent.query</code> attribute.
	 * @return the query - Query url for search
	 */
	public String getQuery(final CMSLinkComponent item)
	{
		return getQuery( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSLinkComponent.query</code> attribute. 
	 * @param value the query - Query url for search
	 */
	public void setQuery(final SessionContext ctx, final CMSLinkComponent item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.CMSLinkComponent.QUERY,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSLinkComponent.query</code> attribute. 
	 * @param value the query - Query url for search
	 */
	public void setQuery(final CMSLinkComponent item, final String value)
	{
		setQuery( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>OrderEntryReturnRecordEntry.reason</code> attribute.
	 * @return the reason - Refund reason for return
	 */
	public EnumerationValue getReason(final SessionContext ctx, final OrderEntryReturnRecordEntry item)
	{
		return (EnumerationValue)item.getProperty( ctx, SslCoreConstants.Attributes.OrderEntryReturnRecordEntry.REASON);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>OrderEntryReturnRecordEntry.reason</code> attribute.
	 * @return the reason - Refund reason for return
	 */
	public EnumerationValue getReason(final OrderEntryReturnRecordEntry item)
	{
		return getReason( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>OrderEntryReturnRecordEntry.reason</code> attribute. 
	 * @param value the reason - Refund reason for return
	 */
	public void setReason(final SessionContext ctx, final OrderEntryReturnRecordEntry item, final EnumerationValue value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.OrderEntryReturnRecordEntry.REASON,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>OrderEntryReturnRecordEntry.reason</code> attribute. 
	 * @param value the reason - Refund reason for return
	 */
	public void setReason(final OrderEntryReturnRecordEntry item, final EnumerationValue value)
	{
		setReason( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.recommendedProducts</code> attribute.
	 * @return the recommendedProducts - List of Recommended Products for this Category
	 */
	public List<Product> getRecommendedProducts(final SessionContext ctx, final Category item)
	{
		List<Product> coll = (List<Product>)item.getProperty( ctx, SslCoreConstants.Attributes.Category.RECOMMENDEDPRODUCTS);
		return coll != null ? coll : Collections.EMPTY_LIST;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.recommendedProducts</code> attribute.
	 * @return the recommendedProducts - List of Recommended Products for this Category
	 */
	public List<Product> getRecommendedProducts(final Category item)
	{
		return getRecommendedProducts( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.recommendedProducts</code> attribute. 
	 * @param value the recommendedProducts - List of Recommended Products for this Category
	 */
	public void setRecommendedProducts(final SessionContext ctx, final Category item, final List<Product> value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.RECOMMENDEDPRODUCTS,value == null || !value.isEmpty() ? value : null );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.recommendedProducts</code> attribute. 
	 * @param value the recommendedProducts - List of Recommended Products for this Category
	 */
	public void setRecommendedProducts(final Category item, final List<Product> value)
	{
		setRecommendedProducts( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Media.redirectURL</code> attribute.
	 * @return the redirectURL
	 */
	public String getRedirectURL(final SessionContext ctx, final Media item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Media.REDIRECTURL);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Media.redirectURL</code> attribute.
	 * @return the redirectURL
	 */
	public String getRedirectURL(final Media item)
	{
		return getRedirectURL( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Media.redirectURL</code> attribute. 
	 * @param value the redirectURL
	 */
	public void setRedirectURL(final SessionContext ctx, final Media item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Media.REDIRECTURL,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Media.redirectURL</code> attribute. 
	 * @param value the redirectURL
	 */
	public void setRedirectURL(final Media item, final String value)
	{
		setRedirectURL( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>OrderModificationRecordEntry.refundAmount</code> attribute.
	 * @return the refundAmount
	 */
	public Double getRefundAmount(final SessionContext ctx, final OrderModificationRecordEntry item)
	{
		return (Double)item.getProperty( ctx, SslCoreConstants.Attributes.OrderModificationRecordEntry.REFUNDAMOUNT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>OrderModificationRecordEntry.refundAmount</code> attribute.
	 * @return the refundAmount
	 */
	public Double getRefundAmount(final OrderModificationRecordEntry item)
	{
		return getRefundAmount( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>OrderModificationRecordEntry.refundAmount</code> attribute. 
	 * @return the refundAmount
	 */
	public double getRefundAmountAsPrimitive(final SessionContext ctx, final OrderModificationRecordEntry item)
	{
		Double value = getRefundAmount( ctx,item );
		return value != null ? value.doubleValue() : 0.0d;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>OrderModificationRecordEntry.refundAmount</code> attribute. 
	 * @return the refundAmount
	 */
	public double getRefundAmountAsPrimitive(final OrderModificationRecordEntry item)
	{
		return getRefundAmountAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>OrderModificationRecordEntry.refundAmount</code> attribute. 
	 * @param value the refundAmount
	 */
	public void setRefundAmount(final SessionContext ctx, final OrderModificationRecordEntry item, final Double value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.OrderModificationRecordEntry.REFUNDAMOUNT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>OrderModificationRecordEntry.refundAmount</code> attribute. 
	 * @param value the refundAmount
	 */
	public void setRefundAmount(final OrderModificationRecordEntry item, final Double value)
	{
		setRefundAmount( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>OrderModificationRecordEntry.refundAmount</code> attribute. 
	 * @param value the refundAmount
	 */
	public void setRefundAmount(final SessionContext ctx, final OrderModificationRecordEntry item, final double value)
	{
		setRefundAmount( ctx, item, Double.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>OrderModificationRecordEntry.refundAmount</code> attribute. 
	 * @param value the refundAmount
	 */
	public void setRefundAmount(final OrderModificationRecordEntry item, final double value)
	{
		setRefundAmount( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PaymentTransactionEntry.refundCardAmounts</code> attribute.
	 * @return the refundCardAmounts
	 */
	public Map getRefundCardAmounts(final SessionContext ctx, final PaymentTransactionEntry item)
	{
		return (Map)item.getProperty( ctx, SslCoreConstants.Attributes.PaymentTransactionEntry.REFUNDCARDAMOUNTS);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PaymentTransactionEntry.refundCardAmounts</code> attribute.
	 * @return the refundCardAmounts
	 */
	public Map getRefundCardAmounts(final PaymentTransactionEntry item)
	{
		return getRefundCardAmounts( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PaymentTransactionEntry.refundCardAmounts</code> attribute. 
	 * @param value the refundCardAmounts
	 */
	public void setRefundCardAmounts(final SessionContext ctx, final PaymentTransactionEntry item, final Map value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.PaymentTransactionEntry.REFUNDCARDAMOUNTS,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PaymentTransactionEntry.refundCardAmounts</code> attribute. 
	 * @param value the refundCardAmounts
	 */
	public void setRefundCardAmounts(final PaymentTransactionEntry item, final Map value)
	{
		setRefundCardAmounts( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>OrderEntryModificationRecordEntry.refundedPerUnitAmount</code> attribute.
	 * @return the refundedPerUnitAmount
	 */
	public Double getRefundedPerUnitAmount(final SessionContext ctx, final OrderEntryModificationRecordEntry item)
	{
		return (Double)item.getProperty( ctx, SslCoreConstants.Attributes.OrderEntryModificationRecordEntry.REFUNDEDPERUNITAMOUNT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>OrderEntryModificationRecordEntry.refundedPerUnitAmount</code> attribute.
	 * @return the refundedPerUnitAmount
	 */
	public Double getRefundedPerUnitAmount(final OrderEntryModificationRecordEntry item)
	{
		return getRefundedPerUnitAmount( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>OrderEntryModificationRecordEntry.refundedPerUnitAmount</code> attribute. 
	 * @return the refundedPerUnitAmount
	 */
	public double getRefundedPerUnitAmountAsPrimitive(final SessionContext ctx, final OrderEntryModificationRecordEntry item)
	{
		Double value = getRefundedPerUnitAmount( ctx,item );
		return value != null ? value.doubleValue() : 0.0d;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>OrderEntryModificationRecordEntry.refundedPerUnitAmount</code> attribute. 
	 * @return the refundedPerUnitAmount
	 */
	public double getRefundedPerUnitAmountAsPrimitive(final OrderEntryModificationRecordEntry item)
	{
		return getRefundedPerUnitAmountAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>OrderEntryModificationRecordEntry.refundedPerUnitAmount</code> attribute. 
	 * @param value the refundedPerUnitAmount
	 */
	public void setRefundedPerUnitAmount(final SessionContext ctx, final OrderEntryModificationRecordEntry item, final Double value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.OrderEntryModificationRecordEntry.REFUNDEDPERUNITAMOUNT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>OrderEntryModificationRecordEntry.refundedPerUnitAmount</code> attribute. 
	 * @param value the refundedPerUnitAmount
	 */
	public void setRefundedPerUnitAmount(final OrderEntryModificationRecordEntry item, final Double value)
	{
		setRefundedPerUnitAmount( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>OrderEntryModificationRecordEntry.refundedPerUnitAmount</code> attribute. 
	 * @param value the refundedPerUnitAmount
	 */
	public void setRefundedPerUnitAmount(final SessionContext ctx, final OrderEntryModificationRecordEntry item, final double value)
	{
		setRefundedPerUnitAmount( ctx, item, Double.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>OrderEntryModificationRecordEntry.refundedPerUnitAmount</code> attribute. 
	 * @param value the refundedPerUnitAmount
	 */
	public void setRefundedPerUnitAmount(final OrderEntryModificationRecordEntry item, final double value)
	{
		setRefundedPerUnitAmount( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.refundMode</code> attribute.
	 * @return the refundMode - Refund Mode
	 */
	public EnumerationValue getRefundMode(final SessionContext ctx, final ReturnRequest item)
	{
		return (EnumerationValue)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.REFUNDMODE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.refundMode</code> attribute.
	 * @return the refundMode - Refund Mode
	 */
	public EnumerationValue getRefundMode(final ReturnRequest item)
	{
		return getRefundMode( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.refundMode</code> attribute. 
	 * @param value the refundMode - Refund Mode
	 */
	public void setRefundMode(final SessionContext ctx, final ReturnRequest item, final EnumerationValue value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.REFUNDMODE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.refundMode</code> attribute. 
	 * @param value the refundMode - Refund Mode
	 */
	public void setRefundMode(final ReturnRequest item, final EnumerationValue value)
	{
		setRefundMode( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Region.regionType</code> attribute.
	 * @return the regionType - Region Type
	 */
	public EnumerationValue getRegionType(final SessionContext ctx, final Region item)
	{
		return (EnumerationValue)item.getProperty( ctx, SslCoreConstants.Attributes.Region.REGIONTYPE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Region.regionType</code> attribute.
	 * @return the regionType - Region Type
	 */
	public EnumerationValue getRegionType(final Region item)
	{
		return getRegionType( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Region.regionType</code> attribute. 
	 * @param value the regionType - Region Type
	 */
	public void setRegionType(final SessionContext ctx, final Region item, final EnumerationValue value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Region.REGIONTYPE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Region.regionType</code> attribute. 
	 * @param value the regionType - Region Type
	 */
	public void setRegionType(final Region item, final EnumerationValue value)
	{
		setRegionType( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>NavigationBarCollectionComponent.registerOffer</code> attribute.
	 * @return the registerOffer - Describes the offer for new Customer
	 */
	public String getRegisterOffer(final SessionContext ctx, final NavigationBarCollectionComponent item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.NavigationBarCollectionComponent.REGISTEROFFER);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>NavigationBarCollectionComponent.registerOffer</code> attribute.
	 * @return the registerOffer - Describes the offer for new Customer
	 */
	public String getRegisterOffer(final NavigationBarCollectionComponent item)
	{
		return getRegisterOffer( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>NavigationBarCollectionComponent.registerOffer</code> attribute. 
	 * @param value the registerOffer - Describes the offer for new Customer
	 */
	public void setRegisterOffer(final SessionContext ctx, final NavigationBarCollectionComponent item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.NavigationBarCollectionComponent.REGISTEROFFER,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>NavigationBarCollectionComponent.registerOffer</code> attribute. 
	 * @param value the registerOffer - Describes the offer for new Customer
	 */
	public void setRegisterOffer(final NavigationBarCollectionComponent item, final String value)
	{
		setRegisterOffer( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.relationship</code> attribute.
	 * @return the relationship
	 */
	public String getRelationship(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.RELATIONSHIP);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.relationship</code> attribute.
	 * @return the relationship
	 */
	public String getRelationship(final Product item)
	{
		return getRelationship( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.relationship</code> attribute. 
	 * @param value the relationship
	 */
	public void setRelationship(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.RELATIONSHIP,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.relationship</code> attribute. 
	 * @param value the relationship
	 */
	public void setRelationship(final Product item, final String value)
	{
		setRelationship( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CustomerReview.reply</code> attribute.
	 * @return the reply - Reply for reviewed product by customer service.
	 */
	public String getReply(final SessionContext ctx, final CustomerReview item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.CustomerReview.REPLY);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CustomerReview.reply</code> attribute.
	 * @return the reply - Reply for reviewed product by customer service.
	 */
	public String getReply(final CustomerReview item)
	{
		return getReply( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CustomerReview.reply</code> attribute. 
	 * @param value the reply - Reply for reviewed product by customer service.
	 */
	public void setReply(final SessionContext ctx, final CustomerReview item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.CustomerReview.REPLY,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CustomerReview.reply</code> attribute. 
	 * @param value the reply - Reply for reviewed product by customer service.
	 */
	public void setReply(final CustomerReview item, final String value)
	{
		setReply( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.returnDays</code> attribute.
	 * @return the returnDays - Return Days Value
	 */
	public Integer getReturnDays(final SessionContext ctx, final Product item)
	{
		return (Integer)item.getProperty( ctx, SslCoreConstants.Attributes.Product.RETURNDAYS);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.returnDays</code> attribute.
	 * @return the returnDays - Return Days Value
	 */
	public Integer getReturnDays(final Product item)
	{
		return getReturnDays( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.returnDays</code> attribute. 
	 * @return the returnDays - Return Days Value
	 */
	public int getReturnDaysAsPrimitive(final SessionContext ctx, final Product item)
	{
		Integer value = getReturnDays( ctx,item );
		return value != null ? value.intValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.returnDays</code> attribute. 
	 * @return the returnDays - Return Days Value
	 */
	public int getReturnDaysAsPrimitive(final Product item)
	{
		return getReturnDaysAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.returnDays</code> attribute. 
	 * @param value the returnDays - Return Days Value
	 */
	public void setReturnDays(final SessionContext ctx, final Product item, final Integer value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.RETURNDAYS,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.returnDays</code> attribute. 
	 * @param value the returnDays - Return Days Value
	 */
	public void setReturnDays(final Product item, final Integer value)
	{
		setReturnDays( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.returnDays</code> attribute. 
	 * @param value the returnDays - Return Days Value
	 */
	public void setReturnDays(final SessionContext ctx, final Product item, final int value)
	{
		setReturnDays( ctx, item, Integer.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.returnDays</code> attribute. 
	 * @param value the returnDays - Return Days Value
	 */
	public void setReturnDays(final Product item, final int value)
	{
		setReturnDays( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PointOfService.returnNote</code> attribute.
	 * @return the returnNote
	 */
	public String getReturnNote(final SessionContext ctx, final PointOfService item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.PointOfService.RETURNNOTE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PointOfService.returnNote</code> attribute.
	 * @return the returnNote
	 */
	public String getReturnNote(final PointOfService item)
	{
		return getReturnNote( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PointOfService.returnNote</code> attribute. 
	 * @param value the returnNote
	 */
	public void setReturnNote(final SessionContext ctx, final PointOfService item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.PointOfService.RETURNNOTE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PointOfService.returnNote</code> attribute. 
	 * @param value the returnNote
	 */
	public void setReturnNote(final PointOfService item, final String value)
	{
		setReturnNote( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.returnPolicy</code> attribute.
	 * @return the returnPolicy
	 */
	public String getReturnPolicy(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.RETURNPOLICY);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.returnPolicy</code> attribute.
	 * @return the returnPolicy
	 */
	public String getReturnPolicy(final Product item)
	{
		return getReturnPolicy( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.returnPolicy</code> attribute. 
	 * @param value the returnPolicy
	 */
	public void setReturnPolicy(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.RETURNPOLICY,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.returnPolicy</code> attribute. 
	 * @param value the returnPolicy
	 */
	public void setReturnPolicy(final Product item, final String value)
	{
		setReturnPolicy( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.rmaBankDetails</code> attribute.
	 * @return the rmaBankDetails - RMA Bank Details
	 */
	public ReturnRequestBankDetails getRmaBankDetails(final SessionContext ctx, final ReturnRequest item)
	{
		return (ReturnRequestBankDetails)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.RMABANKDETAILS);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.rmaBankDetails</code> attribute.
	 * @return the rmaBankDetails - RMA Bank Details
	 */
	public ReturnRequestBankDetails getRmaBankDetails(final ReturnRequest item)
	{
		return getRmaBankDetails( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.rmaBankDetails</code> attribute. 
	 * @param value the rmaBankDetails - RMA Bank Details
	 */
	public void setRmaBankDetails(final SessionContext ctx, final ReturnRequest item, final ReturnRequestBankDetails value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.RMABANKDETAILS,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.rmaBankDetails</code> attribute. 
	 * @param value the rmaBankDetails - RMA Bank Details
	 */
	public void setRmaBankDetails(final ReturnRequest item, final ReturnRequestBankDetails value)
	{
		setRmaBankDetails( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.rmaCompletionDate</code> attribute.
	 * @return the rmaCompletionDate - Time RMA reached Complete status.
	 */
	public Date getRmaCompletionDate(final SessionContext ctx, final ReturnRequest item)
	{
		return (Date)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.RMACOMPLETIONDATE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.rmaCompletionDate</code> attribute.
	 * @return the rmaCompletionDate - Time RMA reached Complete status.
	 */
	public Date getRmaCompletionDate(final ReturnRequest item)
	{
		return getRmaCompletionDate( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.rmaCompletionDate</code> attribute. 
	 * @param value the rmaCompletionDate - Time RMA reached Complete status.
	 */
	public void setRmaCompletionDate(final SessionContext ctx, final ReturnRequest item, final Date value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.RMACOMPLETIONDATE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.rmaCompletionDate</code> attribute. 
	 * @param value the rmaCompletionDate - Time RMA reached Complete status.
	 */
	public void setRmaCompletionDate(final ReturnRequest item, final Date value)
	{
		setRmaCompletionDate( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.rmaGeneratedByRTO</code> attribute.
	 * @return the rmaGeneratedByRTO - Flag for marking RMA generated by RTO Panel
	 */
	public Boolean isRmaGeneratedByRTO(final SessionContext ctx, final ReturnRequest item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.RMAGENERATEDBYRTO);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.rmaGeneratedByRTO</code> attribute.
	 * @return the rmaGeneratedByRTO - Flag for marking RMA generated by RTO Panel
	 */
	public Boolean isRmaGeneratedByRTO(final ReturnRequest item)
	{
		return isRmaGeneratedByRTO( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.rmaGeneratedByRTO</code> attribute. 
	 * @return the rmaGeneratedByRTO - Flag for marking RMA generated by RTO Panel
	 */
	public boolean isRmaGeneratedByRTOAsPrimitive(final SessionContext ctx, final ReturnRequest item)
	{
		Boolean value = isRmaGeneratedByRTO( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.rmaGeneratedByRTO</code> attribute. 
	 * @return the rmaGeneratedByRTO - Flag for marking RMA generated by RTO Panel
	 */
	public boolean isRmaGeneratedByRTOAsPrimitive(final ReturnRequest item)
	{
		return isRmaGeneratedByRTOAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.rmaGeneratedByRTO</code> attribute. 
	 * @param value the rmaGeneratedByRTO - Flag for marking RMA generated by RTO Panel
	 */
	public void setRmaGeneratedByRTO(final SessionContext ctx, final ReturnRequest item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.RMAGENERATEDBYRTO,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.rmaGeneratedByRTO</code> attribute. 
	 * @param value the rmaGeneratedByRTO - Flag for marking RMA generated by RTO Panel
	 */
	public void setRmaGeneratedByRTO(final ReturnRequest item, final Boolean value)
	{
		setRmaGeneratedByRTO( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.rmaGeneratedByRTO</code> attribute. 
	 * @param value the rmaGeneratedByRTO - Flag for marking RMA generated by RTO Panel
	 */
	public void setRmaGeneratedByRTO(final SessionContext ctx, final ReturnRequest item, final boolean value)
	{
		setRmaGeneratedByRTO( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.rmaGeneratedByRTO</code> attribute. 
	 * @param value the rmaGeneratedByRTO - Flag for marking RMA generated by RTO Panel
	 */
	public void setRmaGeneratedByRTO(final ReturnRequest item, final boolean value)
	{
		setRmaGeneratedByRTO( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.rmaRejectionReason</code> attribute.
	 * @return the rmaRejectionReason - RMA Rejection Reason
	 */
	public EnumerationValue getRmaRejectionReason(final SessionContext ctx, final ReturnRequest item)
	{
		return (EnumerationValue)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.RMAREJECTIONREASON);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.rmaRejectionReason</code> attribute.
	 * @return the rmaRejectionReason - RMA Rejection Reason
	 */
	public EnumerationValue getRmaRejectionReason(final ReturnRequest item)
	{
		return getRmaRejectionReason( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.rmaRejectionReason</code> attribute. 
	 * @param value the rmaRejectionReason - RMA Rejection Reason
	 */
	public void setRmaRejectionReason(final SessionContext ctx, final ReturnRequest item, final EnumerationValue value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.RMAREJECTIONREASON,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.rmaRejectionReason</code> attribute. 
	 * @param value the rmaRejectionReason - RMA Rejection Reason
	 */
	public void setRmaRejectionReason(final ReturnRequest item, final EnumerationValue value)
	{
		setRmaRejectionReason( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.rmaShippingCost</code> attribute.
	 * @return the rmaShippingCost - RMA Shipping Cost borne by Customer
	 */
	public Double getRmaShippingCost(final SessionContext ctx, final ReturnRequest item)
	{
		return (Double)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.RMASHIPPINGCOST);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.rmaShippingCost</code> attribute.
	 * @return the rmaShippingCost - RMA Shipping Cost borne by Customer
	 */
	public Double getRmaShippingCost(final ReturnRequest item)
	{
		return getRmaShippingCost( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.rmaShippingCost</code> attribute. 
	 * @return the rmaShippingCost - RMA Shipping Cost borne by Customer
	 */
	public double getRmaShippingCostAsPrimitive(final SessionContext ctx, final ReturnRequest item)
	{
		Double value = getRmaShippingCost( ctx,item );
		return value != null ? value.doubleValue() : 0.0d;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.rmaShippingCost</code> attribute. 
	 * @return the rmaShippingCost - RMA Shipping Cost borne by Customer
	 */
	public double getRmaShippingCostAsPrimitive(final ReturnRequest item)
	{
		return getRmaShippingCostAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.rmaShippingCost</code> attribute. 
	 * @param value the rmaShippingCost - RMA Shipping Cost borne by Customer
	 */
	public void setRmaShippingCost(final SessionContext ctx, final ReturnRequest item, final Double value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.RMASHIPPINGCOST,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.rmaShippingCost</code> attribute. 
	 * @param value the rmaShippingCost - RMA Shipping Cost borne by Customer
	 */
	public void setRmaShippingCost(final ReturnRequest item, final Double value)
	{
		setRmaShippingCost( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.rmaShippingCost</code> attribute. 
	 * @param value the rmaShippingCost - RMA Shipping Cost borne by Customer
	 */
	public void setRmaShippingCost(final SessionContext ctx, final ReturnRequest item, final double value)
	{
		setRmaShippingCost( ctx, item, Double.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.rmaShippingCost</code> attribute. 
	 * @param value the rmaShippingCost - RMA Shipping Cost borne by Customer
	 */
	public void setRmaShippingCost(final ReturnRequest item, final double value)
	{
		setRmaShippingCost( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.rmaShippingCostReturnMode</code> attribute.
	 * @return the rmaShippingCostReturnMode - RMA Shipping cost return mode
	 */
	public EnumerationValue getRmaShippingCostReturnMode(final SessionContext ctx, final ReturnRequest item)
	{
		return (EnumerationValue)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.RMASHIPPINGCOSTRETURNMODE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.rmaShippingCostReturnMode</code> attribute.
	 * @return the rmaShippingCostReturnMode - RMA Shipping cost return mode
	 */
	public EnumerationValue getRmaShippingCostReturnMode(final ReturnRequest item)
	{
		return getRmaShippingCostReturnMode( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.rmaShippingCostReturnMode</code> attribute. 
	 * @param value the rmaShippingCostReturnMode - RMA Shipping cost return mode
	 */
	public void setRmaShippingCostReturnMode(final SessionContext ctx, final ReturnRequest item, final EnumerationValue value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.RMASHIPPINGCOSTRETURNMODE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.rmaShippingCostReturnMode</code> attribute. 
	 * @param value the rmaShippingCostReturnMode - RMA Shipping cost return mode
	 */
	public void setRmaShippingCostReturnMode(final ReturnRequest item, final EnumerationValue value)
	{
		setRmaShippingCostReturnMode( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.sameDayDelivery</code> attribute.
	 * @return the sameDayDelivery
	 */
	public Boolean isSameDayDelivery(final SessionContext ctx, final Product item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Product.SAMEDAYDELIVERY);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.sameDayDelivery</code> attribute.
	 * @return the sameDayDelivery
	 */
	public Boolean isSameDayDelivery(final Product item)
	{
		return isSameDayDelivery( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.sameDayDelivery</code> attribute. 
	 * @return the sameDayDelivery
	 */
	public boolean isSameDayDeliveryAsPrimitive(final SessionContext ctx, final Product item)
	{
		Boolean value = isSameDayDelivery( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.sameDayDelivery</code> attribute. 
	 * @return the sameDayDelivery
	 */
	public boolean isSameDayDeliveryAsPrimitive(final Product item)
	{
		return isSameDayDeliveryAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.sameDayDelivery</code> attribute. 
	 * @param value the sameDayDelivery
	 */
	public void setSameDayDelivery(final SessionContext ctx, final Product item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.SAMEDAYDELIVERY,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.sameDayDelivery</code> attribute. 
	 * @param value the sameDayDelivery
	 */
	public void setSameDayDelivery(final Product item, final Boolean value)
	{
		setSameDayDelivery( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.sameDayDelivery</code> attribute. 
	 * @param value the sameDayDelivery
	 */
	public void setSameDayDelivery(final SessionContext ctx, final Product item, final boolean value)
	{
		setSameDayDelivery( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.sameDayDelivery</code> attribute. 
	 * @param value the sameDayDelivery
	 */
	public void setSameDayDelivery(final Product item, final boolean value)
	{
		setSameDayDelivery( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.savedCards</code> attribute.
	 * @return the savedCards - List of saved CCAvenue customer cards.
	 */
	public List<SslCCAvenueCustomerCardDetail> getSavedCards(final SessionContext ctx, final Customer item)
	{
		List<SslCCAvenueCustomerCardDetail> coll = (List<SslCCAvenueCustomerCardDetail>)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.SAVEDCARDS);
		return coll != null ? coll : Collections.EMPTY_LIST;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.savedCards</code> attribute.
	 * @return the savedCards - List of saved CCAvenue customer cards.
	 */
	public List<SslCCAvenueCustomerCardDetail> getSavedCards(final Customer item)
	{
		return getSavedCards( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.savedCards</code> attribute. 
	 * @param value the savedCards - List of saved CCAvenue customer cards.
	 */
	public void setSavedCards(final SessionContext ctx, final Customer item, final List<SslCCAvenueCustomerCardDetail> value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.SAVEDCARDS,value == null || !value.isEmpty() ? value : null );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.savedCards</code> attribute. 
	 * @param value the savedCards - List of saved CCAvenue customer cards.
	 */
	public void setSavedCards(final Customer item, final List<SslCCAvenueCustomerCardDetail> value)
	{
		setSavedCards( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Voucher.schemeCode</code> attribute.
	 * @return the schemeCode - Scheme Code
	 */
	public String getSchemeCode(final SessionContext ctx, final Voucher item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Voucher.SCHEMECODE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Voucher.schemeCode</code> attribute.
	 * @return the schemeCode - Scheme Code
	 */
	public String getSchemeCode(final Voucher item)
	{
		return getSchemeCode( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Voucher.schemeCode</code> attribute. 
	 * @param value the schemeCode - Scheme Code
	 */
	public void setSchemeCode(final SessionContext ctx, final Voucher item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Voucher.SCHEMECODE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Voucher.schemeCode</code> attribute. 
	 * @param value the schemeCode - Scheme Code
	 */
	public void setSchemeCode(final Voucher item, final String value)
	{
		setSchemeCode( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractPromotion.schemeCode</code> attribute.
	 * @return the schemeCode - Scheme Code
	 */
	public String getSchemeCode(final SessionContext ctx, final AbstractPromotion item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractPromotion.SCHEMECODE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractPromotion.schemeCode</code> attribute.
	 * @return the schemeCode - Scheme Code
	 */
	public String getSchemeCode(final AbstractPromotion item)
	{
		return getSchemeCode( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractPromotion.schemeCode</code> attribute. 
	 * @param value the schemeCode - Scheme Code
	 */
	public void setSchemeCode(final SessionContext ctx, final AbstractPromotion item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractPromotion.SCHEMECODE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractPromotion.schemeCode</code> attribute. 
	 * @param value the schemeCode - Scheme Code
	 */
	public void setSchemeCode(final AbstractPromotion item, final String value)
	{
		setSchemeCode( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CronJob.sdiLastRunTime</code> attribute.
	 * @return the sdiLastRunTime - SDI Last Run Time
	 */
	public Date getSdiLastRunTime(final SessionContext ctx, final CronJob item)
	{
		return (Date)item.getProperty( ctx, SslCoreConstants.Attributes.CronJob.SDILASTRUNTIME);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CronJob.sdiLastRunTime</code> attribute.
	 * @return the sdiLastRunTime - SDI Last Run Time
	 */
	public Date getSdiLastRunTime(final CronJob item)
	{
		return getSdiLastRunTime( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CronJob.sdiLastRunTime</code> attribute. 
	 * @param value the sdiLastRunTime - SDI Last Run Time
	 */
	public void setSdiLastRunTime(final SessionContext ctx, final CronJob item, final Date value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.CronJob.SDILASTRUNTIME,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CronJob.sdiLastRunTime</code> attribute. 
	 * @param value the sdiLastRunTime - SDI Last Run Time
	 */
	public void setSdiLastRunTime(final CronJob item, final Date value)
	{
		setSdiLastRunTime( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.searchKeywords</code> attribute.
	 * @return the searchKeywords
	 */
	public String getSearchKeywords(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.SEARCHKEYWORDS);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.searchKeywords</code> attribute.
	 * @return the searchKeywords
	 */
	public String getSearchKeywords(final Product item)
	{
		return getSearchKeywords( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.searchKeywords</code> attribute. 
	 * @param value the searchKeywords
	 */
	public void setSearchKeywords(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.SEARCHKEYWORDS,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.searchKeywords</code> attribute. 
	 * @param value the searchKeywords
	 */
	public void setSearchKeywords(final Product item, final String value)
	{
		setSearchKeywords( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.searchKeyWords</code> attribute.
	 * @return the searchKeyWords
	 */
	public String getSearchKeyWords(final SessionContext ctx, final Customer item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.SEARCHKEYWORDS);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.searchKeyWords</code> attribute.
	 * @return the searchKeyWords
	 */
	public String getSearchKeyWords(final Customer item)
	{
		return getSearchKeyWords( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.searchKeyWords</code> attribute. 
	 * @param value the searchKeyWords
	 */
	public void setSearchKeyWords(final SessionContext ctx, final Customer item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.SEARCHKEYWORDS,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.searchKeyWords</code> attribute. 
	 * @param value the searchKeyWords
	 */
	public void setSearchKeyWords(final Customer item, final String value)
	{
		setSearchKeyWords( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>SolrFacetSearchConfig.searchPageDefaultSortValue</code> attribute.
	 * @return the searchPageDefaultSortValue
	 */
	public SolrSort getSearchPageDefaultSortValue(final SessionContext ctx, final SolrFacetSearchConfig item)
	{
		return (SolrSort)item.getProperty( ctx, SslCoreConstants.Attributes.SolrFacetSearchConfig.SEARCHPAGEDEFAULTSORTVALUE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>SolrFacetSearchConfig.searchPageDefaultSortValue</code> attribute.
	 * @return the searchPageDefaultSortValue
	 */
	public SolrSort getSearchPageDefaultSortValue(final SolrFacetSearchConfig item)
	{
		return getSearchPageDefaultSortValue( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>SolrFacetSearchConfig.searchPageDefaultSortValue</code> attribute. 
	 * @param value the searchPageDefaultSortValue
	 */
	public void setSearchPageDefaultSortValue(final SessionContext ctx, final SolrFacetSearchConfig item, final SolrSort value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.SolrFacetSearchConfig.SEARCHPAGEDEFAULTSORTVALUE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>SolrFacetSearchConfig.searchPageDefaultSortValue</code> attribute. 
	 * @param value the searchPageDefaultSortValue
	 */
	public void setSearchPageDefaultSortValue(final SolrFacetSearchConfig item, final SolrSort value)
	{
		setSearchPageDefaultSortValue( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.seasonCode</code> attribute.
	 * @return the seasonCode - To indicate SEASON_CD
	 */
	public String getSeasonCode(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.SEASONCODE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.seasonCode</code> attribute.
	 * @return the seasonCode - To indicate SEASON_CD
	 */
	public String getSeasonCode(final Product item)
	{
		return getSeasonCode( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.seasonCode</code> attribute. 
	 * @param value the seasonCode - To indicate SEASON_CD
	 */
	public void setSeasonCode(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.SEASONCODE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.seasonCode</code> attribute. 
	 * @param value the seasonCode - To indicate SEASON_CD
	 */
	public void setSeasonCode(final Product item, final String value)
	{
		setSeasonCode( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.sellableMarketPlaces</code> attribute.
	 * @return the sellableMarketPlaces - Identify a product on whether it can be sold at
	 *                             different marketplaces
	 */
	public Collection<String> getSellableMarketPlaces(final SessionContext ctx, final Product item)
	{
		Collection<String> coll = (Collection<String>)item.getProperty( ctx, SslCoreConstants.Attributes.Product.SELLABLEMARKETPLACES);
		return coll != null ? coll : Collections.EMPTY_LIST;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.sellableMarketPlaces</code> attribute.
	 * @return the sellableMarketPlaces - Identify a product on whether it can be sold at
	 *                             different marketplaces
	 */
	public Collection<String> getSellableMarketPlaces(final Product item)
	{
		return getSellableMarketPlaces( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.sellableMarketPlaces</code> attribute. 
	 * @param value the sellableMarketPlaces - Identify a product on whether it can be sold at
	 *                             different marketplaces
	 */
	public void setSellableMarketPlaces(final SessionContext ctx, final Product item, final Collection<String> value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.SELLABLEMARKETPLACES,value == null || !value.isEmpty() ? value : null );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.sellableMarketPlaces</code> attribute. 
	 * @param value the sellableMarketPlaces - Identify a product on whether it can be sold at
	 *                             different marketplaces
	 */
	public void setSellableMarketPlaces(final Product item, final Collection<String> value)
	{
		setSellableMarketPlaces( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.sellingInDesktop</code> attribute.
	 * @return the sellingInDesktop - Identify a product can sold in desktop channel
	 */
	public Boolean isSellingInDesktop(final SessionContext ctx, final Product item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Product.SELLINGINDESKTOP);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.sellingInDesktop</code> attribute.
	 * @return the sellingInDesktop - Identify a product can sold in desktop channel
	 */
	public Boolean isSellingInDesktop(final Product item)
	{
		return isSellingInDesktop( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.sellingInDesktop</code> attribute. 
	 * @return the sellingInDesktop - Identify a product can sold in desktop channel
	 */
	public boolean isSellingInDesktopAsPrimitive(final SessionContext ctx, final Product item)
	{
		Boolean value = isSellingInDesktop( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.sellingInDesktop</code> attribute. 
	 * @return the sellingInDesktop - Identify a product can sold in desktop channel
	 */
	public boolean isSellingInDesktopAsPrimitive(final Product item)
	{
		return isSellingInDesktopAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.sellingInDesktop</code> attribute. 
	 * @param value the sellingInDesktop - Identify a product can sold in desktop channel
	 */
	public void setSellingInDesktop(final SessionContext ctx, final Product item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.SELLINGINDESKTOP,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.sellingInDesktop</code> attribute. 
	 * @param value the sellingInDesktop - Identify a product can sold in desktop channel
	 */
	public void setSellingInDesktop(final Product item, final Boolean value)
	{
		setSellingInDesktop( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.sellingInDesktop</code> attribute. 
	 * @param value the sellingInDesktop - Identify a product can sold in desktop channel
	 */
	public void setSellingInDesktop(final SessionContext ctx, final Product item, final boolean value)
	{
		setSellingInDesktop( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.sellingInDesktop</code> attribute. 
	 * @param value the sellingInDesktop - Identify a product can sold in desktop channel
	 */
	public void setSellingInDesktop(final Product item, final boolean value)
	{
		setSellingInDesktop( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.sellingInMobile</code> attribute.
	 * @return the sellingInMobile - Identify a product can sold in mobile channel
	 */
	public Boolean isSellingInMobile(final SessionContext ctx, final Product item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Product.SELLINGINMOBILE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.sellingInMobile</code> attribute.
	 * @return the sellingInMobile - Identify a product can sold in mobile channel
	 */
	public Boolean isSellingInMobile(final Product item)
	{
		return isSellingInMobile( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.sellingInMobile</code> attribute. 
	 * @return the sellingInMobile - Identify a product can sold in mobile channel
	 */
	public boolean isSellingInMobileAsPrimitive(final SessionContext ctx, final Product item)
	{
		Boolean value = isSellingInMobile( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.sellingInMobile</code> attribute. 
	 * @return the sellingInMobile - Identify a product can sold in mobile channel
	 */
	public boolean isSellingInMobileAsPrimitive(final Product item)
	{
		return isSellingInMobileAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.sellingInMobile</code> attribute. 
	 * @param value the sellingInMobile - Identify a product can sold in mobile channel
	 */
	public void setSellingInMobile(final SessionContext ctx, final Product item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.SELLINGINMOBILE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.sellingInMobile</code> attribute. 
	 * @param value the sellingInMobile - Identify a product can sold in mobile channel
	 */
	public void setSellingInMobile(final Product item, final Boolean value)
	{
		setSellingInMobile( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.sellingInMobile</code> attribute. 
	 * @param value the sellingInMobile - Identify a product can sold in mobile channel
	 */
	public void setSellingInMobile(final SessionContext ctx, final Product item, final boolean value)
	{
		setSellingInMobile( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.sellingInMobile</code> attribute. 
	 * @param value the sellingInMobile - Identify a product can sold in mobile channel
	 */
	public void setSellingInMobile(final Product item, final boolean value)
	{
		setSellingInMobile( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.seoKeywords</code> attribute.
	 * @return the seoKeywords
	 */
	public String getSeoKeywords(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.SEOKEYWORDS);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.seoKeywords</code> attribute.
	 * @return the seoKeywords
	 */
	public String getSeoKeywords(final Product item)
	{
		return getSeoKeywords( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.seoKeywords</code> attribute. 
	 * @param value the seoKeywords
	 */
	public void setSeoKeywords(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.SEOKEYWORDS,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.seoKeywords</code> attribute. 
	 * @param value the seoKeywords
	 */
	public void setSeoKeywords(final Product item, final String value)
	{
		setSeoKeywords( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.shipAlone</code> attribute.
	 * @return the shipAlone
	 */
	public Boolean isShipAlone(final SessionContext ctx, final Product item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Product.SHIPALONE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.shipAlone</code> attribute.
	 * @return the shipAlone
	 */
	public Boolean isShipAlone(final Product item)
	{
		return isShipAlone( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.shipAlone</code> attribute. 
	 * @return the shipAlone
	 */
	public boolean isShipAloneAsPrimitive(final SessionContext ctx, final Product item)
	{
		Boolean value = isShipAlone( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.shipAlone</code> attribute. 
	 * @return the shipAlone
	 */
	public boolean isShipAloneAsPrimitive(final Product item)
	{
		return isShipAloneAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.shipAlone</code> attribute. 
	 * @param value the shipAlone
	 */
	public void setShipAlone(final SessionContext ctx, final Product item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.SHIPALONE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.shipAlone</code> attribute. 
	 * @param value the shipAlone
	 */
	public void setShipAlone(final Product item, final Boolean value)
	{
		setShipAlone( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.shipAlone</code> attribute. 
	 * @param value the shipAlone
	 */
	public void setShipAlone(final SessionContext ctx, final Product item, final boolean value)
	{
		setShipAlone( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.shipAlone</code> attribute. 
	 * @param value the shipAlone
	 */
	public void setShipAlone(final Product item, final boolean value)
	{
		setShipAlone( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.shippingAmount</code> attribute.
	 * @return the shippingAmount
	 */
	public Double getShippingAmount(final SessionContext ctx, final ReturnEntry item)
	{
		return (Double)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnEntry.SHIPPINGAMOUNT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.shippingAmount</code> attribute.
	 * @return the shippingAmount
	 */
	public Double getShippingAmount(final ReturnEntry item)
	{
		return getShippingAmount( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.shippingAmount</code> attribute. 
	 * @return the shippingAmount
	 */
	public double getShippingAmountAsPrimitive(final SessionContext ctx, final ReturnEntry item)
	{
		Double value = getShippingAmount( ctx,item );
		return value != null ? value.doubleValue() : 0.0d;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.shippingAmount</code> attribute. 
	 * @return the shippingAmount
	 */
	public double getShippingAmountAsPrimitive(final ReturnEntry item)
	{
		return getShippingAmountAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.shippingAmount</code> attribute. 
	 * @param value the shippingAmount
	 */
	public void setShippingAmount(final SessionContext ctx, final ReturnEntry item, final Double value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnEntry.SHIPPINGAMOUNT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.shippingAmount</code> attribute. 
	 * @param value the shippingAmount
	 */
	public void setShippingAmount(final ReturnEntry item, final Double value)
	{
		setShippingAmount( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.shippingAmount</code> attribute. 
	 * @param value the shippingAmount
	 */
	public void setShippingAmount(final SessionContext ctx, final ReturnEntry item, final double value)
	{
		setShippingAmount( ctx, item, Double.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.shippingAmount</code> attribute. 
	 * @param value the shippingAmount
	 */
	public void setShippingAmount(final ReturnEntry item, final double value)
	{
		setShippingAmount( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.shippingCost</code> attribute.
	 * @return the shippingCost - Returned Shipping Cost
	 */
	public Double getShippingCost(final SessionContext ctx, final ReturnRequest item)
	{
		return (Double)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.SHIPPINGCOST);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.shippingCost</code> attribute.
	 * @return the shippingCost - Returned Shipping Cost
	 */
	public Double getShippingCost(final ReturnRequest item)
	{
		return getShippingCost( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.shippingCost</code> attribute. 
	 * @return the shippingCost - Returned Shipping Cost
	 */
	public double getShippingCostAsPrimitive(final SessionContext ctx, final ReturnRequest item)
	{
		Double value = getShippingCost( ctx,item );
		return value != null ? value.doubleValue() : 0.0d;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.shippingCost</code> attribute. 
	 * @return the shippingCost - Returned Shipping Cost
	 */
	public double getShippingCostAsPrimitive(final ReturnRequest item)
	{
		return getShippingCostAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.shippingCost</code> attribute. 
	 * @param value the shippingCost - Returned Shipping Cost
	 */
	public void setShippingCost(final SessionContext ctx, final ReturnRequest item, final Double value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.SHIPPINGCOST,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.shippingCost</code> attribute. 
	 * @param value the shippingCost - Returned Shipping Cost
	 */
	public void setShippingCost(final ReturnRequest item, final Double value)
	{
		setShippingCost( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.shippingCost</code> attribute. 
	 * @param value the shippingCost - Returned Shipping Cost
	 */
	public void setShippingCost(final SessionContext ctx, final ReturnRequest item, final double value)
	{
		setShippingCost( ctx, item, Double.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.shippingCost</code> attribute. 
	 * @param value the shippingCost - Returned Shipping Cost
	 */
	public void setShippingCost(final ReturnRequest item, final double value)
	{
		setShippingCost( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.shippingInfo</code> attribute.
	 * @return the shippingInfo
	 */
	public String getShippingInfo(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.SHIPPINGINFO);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.shippingInfo</code> attribute.
	 * @return the shippingInfo
	 */
	public String getShippingInfo(final Product item)
	{
		return getShippingInfo( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.shippingInfo</code> attribute. 
	 * @param value the shippingInfo
	 */
	public void setShippingInfo(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.SHIPPINGINFO,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.shippingInfo</code> attribute. 
	 * @param value the shippingInfo
	 */
	public void setShippingInfo(final Product item, final String value)
	{
		setShippingInfo( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.shippingWeight</code> attribute.
	 * @return the shippingWeight - Shipping weight (may default to a value per
	 *                             category)
	 */
	public Double getShippingWeight(final SessionContext ctx, final Product item)
	{
		return (Double)item.getProperty( ctx, SslCoreConstants.Attributes.Product.SHIPPINGWEIGHT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.shippingWeight</code> attribute.
	 * @return the shippingWeight - Shipping weight (may default to a value per
	 *                             category)
	 */
	public Double getShippingWeight(final Product item)
	{
		return getShippingWeight( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.shippingWeight</code> attribute. 
	 * @return the shippingWeight - Shipping weight (may default to a value per
	 *                             category)
	 */
	public double getShippingWeightAsPrimitive(final SessionContext ctx, final Product item)
	{
		Double value = getShippingWeight( ctx,item );
		return value != null ? value.doubleValue() : 0.0d;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.shippingWeight</code> attribute. 
	 * @return the shippingWeight - Shipping weight (may default to a value per
	 *                             category)
	 */
	public double getShippingWeightAsPrimitive(final Product item)
	{
		return getShippingWeightAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.shippingWeight</code> attribute. 
	 * @param value the shippingWeight - Shipping weight (may default to a value per
	 *                             category)
	 */
	public void setShippingWeight(final SessionContext ctx, final Product item, final Double value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.SHIPPINGWEIGHT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.shippingWeight</code> attribute. 
	 * @param value the shippingWeight - Shipping weight (may default to a value per
	 *                             category)
	 */
	public void setShippingWeight(final Product item, final Double value)
	{
		setShippingWeight( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.shippingWeight</code> attribute. 
	 * @param value the shippingWeight - Shipping weight (may default to a value per
	 *                             category)
	 */
	public void setShippingWeight(final SessionContext ctx, final Product item, final double value)
	{
		setShippingWeight( ctx, item, Double.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.shippingWeight</code> attribute. 
	 * @param value the shippingWeight - Shipping weight (may default to a value per
	 *                             category)
	 */
	public void setShippingWeight(final Product item, final double value)
	{
		setShippingWeight( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.shipType</code> attribute.
	 * @return the shipType
	 */
	public String getShipType(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.SHIPTYPE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.shipType</code> attribute.
	 * @return the shipType
	 */
	public String getShipType(final Product item)
	{
		return getShipType( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.shipType</code> attribute. 
	 * @param value the shipType
	 */
	public void setShipType(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.SHIPTYPE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.shipType</code> attribute. 
	 * @param value the shipType
	 */
	public void setShipType(final Product item, final String value)
	{
		setShipType( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.shopByComponent</code> attribute.
	 * @return the shopByComponent
	 */
	public ShopByComponent getShopByComponent(final SessionContext ctx, final Category item)
	{
		return (ShopByComponent)item.getProperty( ctx, SslCoreConstants.Attributes.Category.SHOPBYCOMPONENT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.shopByComponent</code> attribute.
	 * @return the shopByComponent
	 */
	public ShopByComponent getShopByComponent(final Category item)
	{
		return getShopByComponent( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.shopByComponent</code> attribute. 
	 * @param value the shopByComponent
	 */
	public void setShopByComponent(final SessionContext ctx, final Category item, final ShopByComponent value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.SHOPBYCOMPONENT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.shopByComponent</code> attribute. 
	 * @param value the shopByComponent
	 */
	public void setShopByComponent(final Category item, final ShopByComponent value)
	{
		setShopByComponent( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.shopByTrend</code> attribute.
	 * @return the shopByTrend
	 */
	public ShopByTrendComponent getShopByTrend(final SessionContext ctx, final Category item)
	{
		return (ShopByTrendComponent)item.getProperty( ctx, SslCoreConstants.Attributes.Category.SHOPBYTREND);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.shopByTrend</code> attribute.
	 * @return the shopByTrend
	 */
	public ShopByTrendComponent getShopByTrend(final Category item)
	{
		return getShopByTrend( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.shopByTrend</code> attribute. 
	 * @param value the shopByTrend
	 */
	public void setShopByTrend(final SessionContext ctx, final Category item, final ShopByTrendComponent value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.SHOPBYTREND,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.shopByTrend</code> attribute. 
	 * @param value the shopByTrend
	 */
	public void setShopByTrend(final Category item, final ShopByTrendComponent value)
	{
		setShopByTrend( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.shortName</code> attribute.
	 * @return the shortName
	 */
	public String getShortName(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.SHORTNAME);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.shortName</code> attribute.
	 * @return the shortName
	 */
	public String getShortName(final Product item)
	{
		return getShortName( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.shortName</code> attribute. 
	 * @param value the shortName
	 */
	public void setShortName(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.SHORTNAME,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.shortName</code> attribute. 
	 * @param value the shortName
	 */
	public void setShortName(final Product item, final String value)
	{
		setShortName( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.showGiftProductLabel</code> attribute.
	 * @return the showGiftProductLabel - To indicate if gift product label is to be shown on
	 *                             product
	 */
	public Boolean isShowGiftProductLabel(final SessionContext ctx, final Product item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Product.SHOWGIFTPRODUCTLABEL);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.showGiftProductLabel</code> attribute.
	 * @return the showGiftProductLabel - To indicate if gift product label is to be shown on
	 *                             product
	 */
	public Boolean isShowGiftProductLabel(final Product item)
	{
		return isShowGiftProductLabel( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.showGiftProductLabel</code> attribute. 
	 * @return the showGiftProductLabel - To indicate if gift product label is to be shown on
	 *                             product
	 */
	public boolean isShowGiftProductLabelAsPrimitive(final SessionContext ctx, final Product item)
	{
		Boolean value = isShowGiftProductLabel( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.showGiftProductLabel</code> attribute. 
	 * @return the showGiftProductLabel - To indicate if gift product label is to be shown on
	 *                             product
	 */
	public boolean isShowGiftProductLabelAsPrimitive(final Product item)
	{
		return isShowGiftProductLabelAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.showGiftProductLabel</code> attribute. 
	 * @param value the showGiftProductLabel - To indicate if gift product label is to be shown on
	 *                             product
	 */
	public void setShowGiftProductLabel(final SessionContext ctx, final Product item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.SHOWGIFTPRODUCTLABEL,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.showGiftProductLabel</code> attribute. 
	 * @param value the showGiftProductLabel - To indicate if gift product label is to be shown on
	 *                             product
	 */
	public void setShowGiftProductLabel(final Product item, final Boolean value)
	{
		setShowGiftProductLabel( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.showGiftProductLabel</code> attribute. 
	 * @param value the showGiftProductLabel - To indicate if gift product label is to be shown on
	 *                             product
	 */
	public void setShowGiftProductLabel(final SessionContext ctx, final Product item, final boolean value)
	{
		setShowGiftProductLabel( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.showGiftProductLabel</code> attribute. 
	 * @param value the showGiftProductLabel - To indicate if gift product label is to be shown on
	 *                             product
	 */
	public void setShowGiftProductLabel(final Product item, final boolean value)
	{
		setShowGiftProductLabel( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Voucher.showOnNav</code> attribute.
	 * @return the showOnNav - To show voucher on facet
	 */
	public Boolean isShowOnNav(final SessionContext ctx, final Voucher item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Voucher.SHOWONNAV);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Voucher.showOnNav</code> attribute.
	 * @return the showOnNav - To show voucher on facet
	 */
	public Boolean isShowOnNav(final Voucher item)
	{
		return isShowOnNav( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Voucher.showOnNav</code> attribute. 
	 * @return the showOnNav - To show voucher on facet
	 */
	public boolean isShowOnNavAsPrimitive(final SessionContext ctx, final Voucher item)
	{
		Boolean value = isShowOnNav( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Voucher.showOnNav</code> attribute. 
	 * @return the showOnNav - To show voucher on facet
	 */
	public boolean isShowOnNavAsPrimitive(final Voucher item)
	{
		return isShowOnNavAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Voucher.showOnNav</code> attribute. 
	 * @param value the showOnNav - To show voucher on facet
	 */
	public void setShowOnNav(final SessionContext ctx, final Voucher item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Voucher.SHOWONNAV,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Voucher.showOnNav</code> attribute. 
	 * @param value the showOnNav - To show voucher on facet
	 */
	public void setShowOnNav(final Voucher item, final Boolean value)
	{
		setShowOnNav( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Voucher.showOnNav</code> attribute. 
	 * @param value the showOnNav - To show voucher on facet
	 */
	public void setShowOnNav(final SessionContext ctx, final Voucher item, final boolean value)
	{
		setShowOnNav( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Voucher.showOnNav</code> attribute. 
	 * @param value the showOnNav - To show voucher on facet
	 */
	public void setShowOnNav(final Voucher item, final boolean value)
	{
		setShowOnNav( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractPromotion.showOnNav</code> attribute.
	 * @return the showOnNav - To show promotion on facet
	 */
	public Boolean isShowOnNav(final SessionContext ctx, final AbstractPromotion item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractPromotion.SHOWONNAV);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractPromotion.showOnNav</code> attribute.
	 * @return the showOnNav - To show promotion on facet
	 */
	public Boolean isShowOnNav(final AbstractPromotion item)
	{
		return isShowOnNav( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractPromotion.showOnNav</code> attribute. 
	 * @return the showOnNav - To show promotion on facet
	 */
	public boolean isShowOnNavAsPrimitive(final SessionContext ctx, final AbstractPromotion item)
	{
		Boolean value = isShowOnNav( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractPromotion.showOnNav</code> attribute. 
	 * @return the showOnNav - To show promotion on facet
	 */
	public boolean isShowOnNavAsPrimitive(final AbstractPromotion item)
	{
		return isShowOnNavAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractPromotion.showOnNav</code> attribute. 
	 * @param value the showOnNav - To show promotion on facet
	 */
	public void setShowOnNav(final SessionContext ctx, final AbstractPromotion item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractPromotion.SHOWONNAV,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractPromotion.showOnNav</code> attribute. 
	 * @param value the showOnNav - To show promotion on facet
	 */
	public void setShowOnNav(final AbstractPromotion item, final Boolean value)
	{
		setShowOnNav( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractPromotion.showOnNav</code> attribute. 
	 * @param value the showOnNav - To show promotion on facet
	 */
	public void setShowOnNav(final SessionContext ctx, final AbstractPromotion item, final boolean value)
	{
		setShowOnNav( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractPromotion.showOnNav</code> attribute. 
	 * @param value the showOnNav - To show promotion on facet
	 */
	public void setShowOnNav(final AbstractPromotion item, final boolean value)
	{
		setShowOnNav( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PromotionVoucher.ShowOnStorefront</code> attribute.
	 * @return the ShowOnStorefront - Show on storefront or not
	 */
	public Boolean isShowOnStorefront(final SessionContext ctx, final PromotionVoucher item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.PromotionVoucher.SHOWONSTOREFRONT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PromotionVoucher.ShowOnStorefront</code> attribute.
	 * @return the ShowOnStorefront - Show on storefront or not
	 */
	public Boolean isShowOnStorefront(final PromotionVoucher item)
	{
		return isShowOnStorefront( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PromotionVoucher.ShowOnStorefront</code> attribute. 
	 * @return the ShowOnStorefront - Show on storefront or not
	 */
	public boolean isShowOnStorefrontAsPrimitive(final SessionContext ctx, final PromotionVoucher item)
	{
		Boolean value = isShowOnStorefront( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PromotionVoucher.ShowOnStorefront</code> attribute. 
	 * @return the ShowOnStorefront - Show on storefront or not
	 */
	public boolean isShowOnStorefrontAsPrimitive(final PromotionVoucher item)
	{
		return isShowOnStorefrontAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PromotionVoucher.ShowOnStorefront</code> attribute. 
	 * @param value the ShowOnStorefront - Show on storefront or not
	 */
	public void setShowOnStorefront(final SessionContext ctx, final PromotionVoucher item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.PromotionVoucher.SHOWONSTOREFRONT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PromotionVoucher.ShowOnStorefront</code> attribute. 
	 * @param value the ShowOnStorefront - Show on storefront or not
	 */
	public void setShowOnStorefront(final PromotionVoucher item, final Boolean value)
	{
		setShowOnStorefront( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PromotionVoucher.ShowOnStorefront</code> attribute. 
	 * @param value the ShowOnStorefront - Show on storefront or not
	 */
	public void setShowOnStorefront(final SessionContext ctx, final PromotionVoucher item, final boolean value)
	{
		setShowOnStorefront( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PromotionVoucher.ShowOnStorefront</code> attribute. 
	 * @param value the ShowOnStorefront - Show on storefront or not
	 */
	public void setShowOnStorefront(final PromotionVoucher item, final boolean value)
	{
		setShowOnStorefront( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.simulatedWarehouseStockMap</code> attribute.
	 * @return the simulatedWarehouseStockMap - Holds the list of warehouses which were used for
	 *                             allocating the stock.
	 *                             This is for the wait for cancel period to
	 *                             remove the hold stock.
	 */
	public Map getSimulatedWarehouseStockMap(final SessionContext ctx, final AbstractOrderEntry item)
	{
		return (Map)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrderEntry.SIMULATEDWAREHOUSESTOCKMAP);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.simulatedWarehouseStockMap</code> attribute.
	 * @return the simulatedWarehouseStockMap - Holds the list of warehouses which were used for
	 *                             allocating the stock.
	 *                             This is for the wait for cancel period to
	 *                             remove the hold stock.
	 */
	public Map getSimulatedWarehouseStockMap(final AbstractOrderEntry item)
	{
		return getSimulatedWarehouseStockMap( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.simulatedWarehouseStockMap</code> attribute. 
	 * @param value the simulatedWarehouseStockMap - Holds the list of warehouses which were used for
	 *                             allocating the stock.
	 *                             This is for the wait for cancel period to
	 *                             remove the hold stock.
	 */
	public void setSimulatedWarehouseStockMap(final SessionContext ctx, final AbstractOrderEntry item, final Map value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrderEntry.SIMULATEDWAREHOUSESTOCKMAP,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.simulatedWarehouseStockMap</code> attribute. 
	 * @param value the simulatedWarehouseStockMap - Holds the list of warehouses which were used for
	 *                             allocating the stock.
	 *                             This is for the wait for cancel period to
	 *                             remove the hold stock.
	 */
	public void setSimulatedWarehouseStockMap(final AbstractOrderEntry item, final Map value)
	{
		setSimulatedWarehouseStockMap( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.sizeGuide</code> attribute.
	 * @return the sizeGuide
	 */
	public String getSizeGuide(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.SIZEGUIDE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.sizeGuide</code> attribute.
	 * @return the sizeGuide
	 */
	public String getSizeGuide(final Product item)
	{
		return getSizeGuide( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.sizeGuide</code> attribute. 
	 * @param value the sizeGuide
	 */
	public void setSizeGuide(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.SIZEGUIDE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.sizeGuide</code> attribute. 
	 * @param value the sizeGuide
	 */
	public void setSizeGuide(final Product item, final String value)
	{
		setSizeGuide( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.sizeGuideHTML</code> attribute.
	 * @return the sizeGuideHTML
	 */
	public String getSizeGuideHTML(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.SIZEGUIDEHTML);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.sizeGuideHTML</code> attribute.
	 * @return the sizeGuideHTML
	 */
	public String getSizeGuideHTML(final Product item)
	{
		return getSizeGuideHTML( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.sizeGuideHTML</code> attribute. 
	 * @param value the sizeGuideHTML
	 */
	public void setSizeGuideHTML(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.SIZEGUIDEHTML,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.sizeGuideHTML</code> attribute. 
	 * @param value the sizeGuideHTML
	 */
	public void setSizeGuideHTML(final Product item, final String value)
	{
		setSizeGuideHTML( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Tax.SKUCode</code> attribute.
	 * @return the SKUCode - SKU code
	 */
	public String getSKUCode(final SessionContext ctx, final Tax item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Tax.SKUCODE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Tax.SKUCode</code> attribute.
	 * @return the SKUCode - SKU code
	 */
	public String getSKUCode(final Tax item)
	{
		return getSKUCode( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Tax.SKUCode</code> attribute. 
	 * @param value the SKUCode - SKU code
	 */
	public void setSKUCode(final SessionContext ctx, final Tax item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Tax.SKUCODE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Tax.SKUCode</code> attribute. 
	 * @param value the SKUCode - SKU code
	 */
	public void setSKUCode(final Tax item, final String value)
	{
		setSKUCode( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.socialAccounts</code> attribute.
	 * @return the socialAccounts
	 */
	public Collection<CustomerSocialAccount> getSocialAccounts(final SessionContext ctx, final Customer item)
	{
		return CUSTOMERSOCIALACCOUNTRELATIONSOCIALACCOUNTSHANDLER.getValues( ctx, item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.socialAccounts</code> attribute.
	 * @return the socialAccounts
	 */
	public Collection<CustomerSocialAccount> getSocialAccounts(final Customer item)
	{
		return getSocialAccounts( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.socialAccounts</code> attribute. 
	 * @param value the socialAccounts
	 */
	public void setSocialAccounts(final SessionContext ctx, final Customer item, final Collection<CustomerSocialAccount> value)
	{
		CUSTOMERSOCIALACCOUNTRELATIONSOCIALACCOUNTSHANDLER.setValues( ctx, item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.socialAccounts</code> attribute. 
	 * @param value the socialAccounts
	 */
	public void setSocialAccounts(final Customer item, final Collection<CustomerSocialAccount> value)
	{
		setSocialAccounts( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Adds <code>value</code> to socialAccounts. 
	 * @param value the item to add to socialAccounts
	 */
	public void addToSocialAccounts(final SessionContext ctx, final Customer item, final CustomerSocialAccount value)
	{
		CUSTOMERSOCIALACCOUNTRELATIONSOCIALACCOUNTSHANDLER.addValue( ctx, item, value );
	}
	
	/**
	 * <i>Generated method</i> - Adds <code>value</code> to socialAccounts. 
	 * @param value the item to add to socialAccounts
	 */
	public void addToSocialAccounts(final Customer item, final CustomerSocialAccount value)
	{
		addToSocialAccounts( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Removes <code>value</code> from socialAccounts. 
	 * @param value the item to remove from socialAccounts
	 */
	public void removeFromSocialAccounts(final SessionContext ctx, final Customer item, final CustomerSocialAccount value)
	{
		CUSTOMERSOCIALACCOUNTRELATIONSOCIALACCOUNTSHANDLER.removeValue( ctx, item, value );
	}
	
	/**
	 * <i>Generated method</i> - Removes <code>value</code> from socialAccounts. 
	 * @param value the item to remove from socialAccounts
	 */
	public void removeFromSocialAccounts(final Customer item, final CustomerSocialAccount value)
	{
		removeFromSocialAccounts( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSLinkComponent.sort</code> attribute.
	 * @return the sort - Type of sort
	 */
	public String getSort(final SessionContext ctx, final CMSLinkComponent item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.CMSLinkComponent.SORT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSLinkComponent.sort</code> attribute.
	 * @return the sort - Type of sort
	 */
	public String getSort(final CMSLinkComponent item)
	{
		return getSort( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSLinkComponent.sort</code> attribute. 
	 * @param value the sort - Type of sort
	 */
	public void setSort(final SessionContext ctx, final CMSLinkComponent item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.CMSLinkComponent.SORT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSLinkComponent.sort</code> attribute. 
	 * @param value the sort - Type of sort
	 */
	public void setSort(final CMSLinkComponent item, final String value)
	{
		setSort( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Media.sslClCron</code> attribute.
	 * @return the sslClCron
	 */
	public SSLClassificationAttrTemplateCronJob getSslClCron(final SessionContext ctx, final Media item)
	{
		return (SSLClassificationAttrTemplateCronJob)item.getProperty( ctx, SslCoreConstants.Attributes.Media.SSLCLCRON);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Media.sslClCron</code> attribute.
	 * @return the sslClCron
	 */
	public SSLClassificationAttrTemplateCronJob getSslClCron(final Media item)
	{
		return getSslClCron( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Media.sslClCron</code> attribute. 
	 * @param value the sslClCron
	 */
	public void setSslClCron(final SessionContext ctx, final Media item, final SSLClassificationAttrTemplateCronJob value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Media.SSLCLCRON,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Media.sslClCron</code> attribute. 
	 * @param value the sslClCron
	 */
	public void setSslClCron(final Media item, final SSLClassificationAttrTemplateCronJob value)
	{
		setSslClCron( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.sslLoyaltyEmail</code> attribute.
	 * @return the sslLoyaltyEmail - Email Address of the customer used to link FCC.
	 */
	public String getSslLoyaltyEmail(final SessionContext ctx, final Customer item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.SSLLOYALTYEMAIL);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.sslLoyaltyEmail</code> attribute.
	 * @return the sslLoyaltyEmail - Email Address of the customer used to link FCC.
	 */
	public String getSslLoyaltyEmail(final Customer item)
	{
		return getSslLoyaltyEmail( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.sslLoyaltyEmail</code> attribute. 
	 * @param value the sslLoyaltyEmail - Email Address of the customer used to link FCC.
	 */
	public void setSslLoyaltyEmail(final SessionContext ctx, final Customer item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.SSLLOYALTYEMAIL,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.sslLoyaltyEmail</code> attribute. 
	 * @param value the sslLoyaltyEmail - Email Address of the customer used to link FCC.
	 */
	public void setSslLoyaltyEmail(final Customer item, final String value)
	{
		setSslLoyaltyEmail( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.sslWalletOTP</code> attribute.
	 * @return the sslWalletOTP - SSL Wallet OTP
	 */
	public String getSslWalletOTP(final SessionContext ctx, final Customer item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.SSLWALLETOTP);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.sslWalletOTP</code> attribute.
	 * @return the sslWalletOTP - SSL Wallet OTP
	 */
	public String getSslWalletOTP(final Customer item)
	{
		return getSslWalletOTP( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.sslWalletOTP</code> attribute. 
	 * @param value the sslWalletOTP - SSL Wallet OTP
	 */
	public void setSslWalletOTP(final SessionContext ctx, final Customer item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.SSLWALLETOTP,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.sslWalletOTP</code> attribute. 
	 * @param value the sslWalletOTP - SSL Wallet OTP
	 */
	public void setSslWalletOTP(final Customer item, final String value)
	{
		setSslWalletOTP( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Region.stateCode</code> attribute.
	 * @return the stateCode - State code added for new GST specifications
	 */
	public String getStateCode(final SessionContext ctx, final Region item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Region.STATECODE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Region.stateCode</code> attribute.
	 * @return the stateCode - State code added for new GST specifications
	 */
	public String getStateCode(final Region item)
	{
		return getStateCode( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Region.stateCode</code> attribute. 
	 * @param value the stateCode - State code added for new GST specifications
	 */
	public void setStateCode(final SessionContext ctx, final Region item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Region.STATECODE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Region.stateCode</code> attribute. 
	 * @param value the stateCode - State code added for new GST specifications
	 */
	public void setStateCode(final Region item, final String value)
	{
		setStateCode( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.status</code> attribute.
	 * @return the status - Return Request Status
	 */
	public EnumerationValue getStatus(final SessionContext ctx, final ReturnRequest item)
	{
		return (EnumerationValue)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.STATUS);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.status</code> attribute.
	 * @return the status - Return Request Status
	 */
	public EnumerationValue getStatus(final ReturnRequest item)
	{
		return getStatus( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.status</code> attribute. 
	 * @param value the status - Return Request Status
	 */
	public void setStatus(final SessionContext ctx, final ReturnRequest item, final EnumerationValue value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.STATUS,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.status</code> attribute. 
	 * @param value the status - Return Request Status
	 */
	public void setStatus(final ReturnRequest item, final EnumerationValue value)
	{
		setStatus( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Order.SterlingCustomerNotificationProcess</code> attribute.
	 * @return the SterlingCustomerNotificationProcess
	 */
	public Collection<SterlingCustomerNotificationProcess> getSterlingCustomerNotificationProcess(final SessionContext ctx, final Order item)
	{
		return ORDER2STERLINGCUSTOMERNOTIFICATIONPROCESSSTERLINGCUSTOMERNOTIFICATIONPROCESSHANDLER.getValues( ctx, item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Order.SterlingCustomerNotificationProcess</code> attribute.
	 * @return the SterlingCustomerNotificationProcess
	 */
	public Collection<SterlingCustomerNotificationProcess> getSterlingCustomerNotificationProcess(final Order item)
	{
		return getSterlingCustomerNotificationProcess( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Order.SterlingCustomerNotificationProcess</code> attribute. 
	 * @param value the SterlingCustomerNotificationProcess
	 */
	public void setSterlingCustomerNotificationProcess(final SessionContext ctx, final Order item, final Collection<SterlingCustomerNotificationProcess> value)
	{
		ORDER2STERLINGCUSTOMERNOTIFICATIONPROCESSSTERLINGCUSTOMERNOTIFICATIONPROCESSHANDLER.setValues( ctx, item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Order.SterlingCustomerNotificationProcess</code> attribute. 
	 * @param value the SterlingCustomerNotificationProcess
	 */
	public void setSterlingCustomerNotificationProcess(final Order item, final Collection<SterlingCustomerNotificationProcess> value)
	{
		setSterlingCustomerNotificationProcess( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Adds <code>value</code> to SterlingCustomerNotificationProcess. 
	 * @param value the item to add to SterlingCustomerNotificationProcess
	 */
	public void addToSterlingCustomerNotificationProcess(final SessionContext ctx, final Order item, final SterlingCustomerNotificationProcess value)
	{
		ORDER2STERLINGCUSTOMERNOTIFICATIONPROCESSSTERLINGCUSTOMERNOTIFICATIONPROCESSHANDLER.addValue( ctx, item, value );
	}
	
	/**
	 * <i>Generated method</i> - Adds <code>value</code> to SterlingCustomerNotificationProcess. 
	 * @param value the item to add to SterlingCustomerNotificationProcess
	 */
	public void addToSterlingCustomerNotificationProcess(final Order item, final SterlingCustomerNotificationProcess value)
	{
		addToSterlingCustomerNotificationProcess( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Removes <code>value</code> from SterlingCustomerNotificationProcess. 
	 * @param value the item to remove from SterlingCustomerNotificationProcess
	 */
	public void removeFromSterlingCustomerNotificationProcess(final SessionContext ctx, final Order item, final SterlingCustomerNotificationProcess value)
	{
		ORDER2STERLINGCUSTOMERNOTIFICATIONPROCESSSTERLINGCUSTOMERNOTIFICATIONPROCESSHANDLER.removeValue( ctx, item, value );
	}
	
	/**
	 * <i>Generated method</i> - Removes <code>value</code> from SterlingCustomerNotificationProcess. 
	 * @param value the item to remove from SterlingCustomerNotificationProcess
	 */
	public void removeFromSterlingCustomerNotificationProcess(final Order item, final SterlingCustomerNotificationProcess value)
	{
		removeFromSterlingCustomerNotificationProcess( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Order.storeFrontReturnList</code> attribute.
	 * @return the storeFrontReturnList - List of StoreFront Return Request List
	 */
	public List<ReturnExchangeEntries> getStoreFrontReturnList(final SessionContext ctx, final Order item)
	{
		List<ReturnExchangeEntries> coll = (List<ReturnExchangeEntries>)item.getProperty( ctx, SslCoreConstants.Attributes.Order.STOREFRONTRETURNLIST);
		return coll != null ? coll : Collections.EMPTY_LIST;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Order.storeFrontReturnList</code> attribute.
	 * @return the storeFrontReturnList - List of StoreFront Return Request List
	 */
	public List<ReturnExchangeEntries> getStoreFrontReturnList(final Order item)
	{
		return getStoreFrontReturnList( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Order.storeFrontReturnList</code> attribute. 
	 * @param value the storeFrontReturnList - List of StoreFront Return Request List
	 */
	public void setStoreFrontReturnList(final SessionContext ctx, final Order item, final List<ReturnExchangeEntries> value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Order.STOREFRONTRETURNLIST,value == null || !value.isEmpty() ? value : null );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Order.storeFrontReturnList</code> attribute. 
	 * @param value the storeFrontReturnList - List of StoreFront Return Request List
	 */
	public void setStoreFrontReturnList(final Order item, final List<ReturnExchangeEntries> value)
	{
		setStoreFrontReturnList( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PointOfService.storeManager</code> attribute.
	 * @return the storeManager
	 */
	public User getStoreManager(final SessionContext ctx, final PointOfService item)
	{
		return (User)item.getProperty( ctx, SslCoreConstants.Attributes.PointOfService.STOREMANAGER);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PointOfService.storeManager</code> attribute.
	 * @return the storeManager
	 */
	public User getStoreManager(final PointOfService item)
	{
		return getStoreManager( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PointOfService.storeManager</code> attribute. 
	 * @param value the storeManager
	 */
	public void setStoreManager(final SessionContext ctx, final PointOfService item, final User value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.PointOfService.STOREMANAGER,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PointOfService.storeManager</code> attribute. 
	 * @param value the storeManager
	 */
	public void setStoreManager(final PointOfService item, final User value)
	{
		setStoreManager( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.styleCode</code> attribute.
	 * @return the styleCode - To indicate STYLE_CD
	 */
	public String getStyleCode(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.STYLECODE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.styleCode</code> attribute.
	 * @return the styleCode - To indicate STYLE_CD
	 */
	public String getStyleCode(final Product item)
	{
		return getStyleCode( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.styleCode</code> attribute. 
	 * @param value the styleCode - To indicate STYLE_CD
	 */
	public void setStyleCode(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.STYLECODE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.styleCode</code> attribute. 
	 * @param value the styleCode - To indicate STYLE_CD
	 */
	public void setStyleCode(final Product item, final String value)
	{
		setStyleCode( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Tax.StyleCode</code> attribute.
	 * @return the StyleCode - Style code
	 */
	public String getStyleCode(final SessionContext ctx, final Tax item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Tax.STYLECODE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Tax.StyleCode</code> attribute.
	 * @return the StyleCode - Style code
	 */
	public String getStyleCode(final Tax item)
	{
		return getStyleCode( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Tax.StyleCode</code> attribute. 
	 * @param value the StyleCode - Style code
	 */
	public void setStyleCode(final SessionContext ctx, final Tax item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Tax.STYLECODE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Tax.StyleCode</code> attribute. 
	 * @param value the StyleCode - Style code
	 */
	public void setStyleCode(final Tax item, final String value)
	{
		setStyleCode( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.styleDesc</code> attribute.
	 * @return the styleDesc - To indicate STYLE_DESC
	 */
	public String getStyleDesc(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.STYLEDESC);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.styleDesc</code> attribute.
	 * @return the styleDesc - To indicate STYLE_DESC
	 */
	public String getStyleDesc(final Product item)
	{
		return getStyleDesc( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.styleDesc</code> attribute. 
	 * @param value the styleDesc - To indicate STYLE_DESC
	 */
	public void setStyleDesc(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.STYLEDESC,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.styleDesc</code> attribute. 
	 * @param value the styleDesc - To indicate STYLE_DESC
	 */
	public void setStyleDesc(final Product item, final String value)
	{
		setStyleDesc( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.stylePreference</code> attribute.
	 * @return the stylePreference
	 */
	public String getStylePreference(final SessionContext ctx, final Customer item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.STYLEPREFERENCE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.stylePreference</code> attribute.
	 * @return the stylePreference
	 */
	public String getStylePreference(final Customer item)
	{
		return getStylePreference( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.stylePreference</code> attribute. 
	 * @param value the stylePreference
	 */
	public void setStylePreference(final SessionContext ctx, final Customer item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.STYLEPREFERENCE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.stylePreference</code> attribute. 
	 * @param value the stylePreference
	 */
	public void setStylePreference(final Customer item, final String value)
	{
		setStylePreference( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.subClassCode</code> attribute.
	 * @return the subClassCode - To indicate SUB_CLASS
	 */
	public String getSubClassCode(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.SUBCLASSCODE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.subClassCode</code> attribute.
	 * @return the subClassCode - To indicate SUB_CLASS
	 */
	public String getSubClassCode(final Product item)
	{
		return getSubClassCode( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.subClassCode</code> attribute. 
	 * @param value the subClassCode - To indicate SUB_CLASS
	 */
	public void setSubClassCode(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.SUBCLASSCODE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.subClassCode</code> attribute. 
	 * @param value the subClassCode - To indicate SUB_CLASS
	 */
	public void setSubClassCode(final Product item, final String value)
	{
		setSubClassCode( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.subClassName</code> attribute.
	 * @return the subClassName - To indicate SUB_CLASS_NAME
	 */
	public String getSubClassName(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.SUBCLASSNAME);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.subClassName</code> attribute.
	 * @return the subClassName - To indicate SUB_CLASS_NAME
	 */
	public String getSubClassName(final Product item)
	{
		return getSubClassName( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.subClassName</code> attribute. 
	 * @param value the subClassName - To indicate SUB_CLASS_NAME
	 */
	public void setSubClassName(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.SUBCLASSNAME,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.subClassName</code> attribute. 
	 * @param value the subClassName - To indicate SUB_CLASS_NAME
	 */
	public void setSubClassName(final Product item, final String value)
	{
		setSubClassName( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.subDepartmentCode</code> attribute.
	 * @return the subDepartmentCode - To indicate SUBDEPT
	 */
	public String getSubDepartmentCode(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.SUBDEPARTMENTCODE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.subDepartmentCode</code> attribute.
	 * @return the subDepartmentCode - To indicate SUBDEPT
	 */
	public String getSubDepartmentCode(final Product item)
	{
		return getSubDepartmentCode( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.subDepartmentCode</code> attribute. 
	 * @param value the subDepartmentCode - To indicate SUBDEPT
	 */
	public void setSubDepartmentCode(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.SUBDEPARTMENTCODE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.subDepartmentCode</code> attribute. 
	 * @param value the subDepartmentCode - To indicate SUBDEPT
	 */
	public void setSubDepartmentCode(final Product item, final String value)
	{
		setSubDepartmentCode( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.subdepartmentName</code> attribute.
	 * @return the subdepartmentName - To indicate SUB_DEPT_NAME
	 */
	public String getSubdepartmentName(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.SUBDEPARTMENTNAME);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.subdepartmentName</code> attribute.
	 * @return the subdepartmentName - To indicate SUB_DEPT_NAME
	 */
	public String getSubdepartmentName(final Product item)
	{
		return getSubdepartmentName( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.subdepartmentName</code> attribute. 
	 * @param value the subdepartmentName - To indicate SUB_DEPT_NAME
	 */
	public void setSubdepartmentName(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.SUBDEPARTMENTNAME,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.subdepartmentName</code> attribute. 
	 * @param value the subdepartmentName - To indicate SUB_DEPT_NAME
	 */
	public void setSubdepartmentName(final Product item, final String value)
	{
		setSubdepartmentName( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.tags</code> attribute.
	 * @return the tags
	 */
	public String getTags(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.TAGS);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.tags</code> attribute.
	 * @return the tags
	 */
	public String getTags(final Product item)
	{
		return getTags( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.tags</code> attribute. 
	 * @param value the tags
	 */
	public void setTags(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.TAGS,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.tags</code> attribute. 
	 * @param value the tags
	 */
	public void setTags(final Product item, final String value)
	{
		setTags( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSLinkComponent.tags</code> attribute.
	 * @return the tags - Product tag for plp
	 */
	public String getTags(final SessionContext ctx, final CMSLinkComponent item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.CMSLinkComponent.TAGS);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSLinkComponent.tags</code> attribute.
	 * @return the tags - Product tag for plp
	 */
	public String getTags(final CMSLinkComponent item)
	{
		return getTags( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSLinkComponent.tags</code> attribute. 
	 * @param value the tags - Product tag for plp
	 */
	public void setTags(final SessionContext ctx, final CMSLinkComponent item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.CMSLinkComponent.TAGS,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSLinkComponent.tags</code> attribute. 
	 * @param value the tags - Product tag for plp
	 */
	public void setTags(final CMSLinkComponent item, final String value)
	{
		setTags( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSNavigationNode.tagType</code> attribute.
	 * @return the tagType
	 */
	public EnumerationValue getTagType(final SessionContext ctx, final CMSNavigationNode item)
	{
		return (EnumerationValue)item.getProperty( ctx, SslCoreConstants.Attributes.CMSNavigationNode.TAGTYPE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSNavigationNode.tagType</code> attribute.
	 * @return the tagType
	 */
	public EnumerationValue getTagType(final CMSNavigationNode item)
	{
		return getTagType( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSNavigationNode.tagType</code> attribute. 
	 * @param value the tagType
	 */
	public void setTagType(final SessionContext ctx, final CMSNavigationNode item, final EnumerationValue value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.CMSNavigationNode.TAGTYPE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSNavigationNode.tagType</code> attribute. 
	 * @param value the tagType
	 */
	public void setTagType(final CMSNavigationNode item, final EnumerationValue value)
	{
		setTagType( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSLinkComponent.tagType</code> attribute.
	 * @return the tagType
	 */
	public EnumerationValue getTagType(final SessionContext ctx, final CMSLinkComponent item)
	{
		return (EnumerationValue)item.getProperty( ctx, SslCoreConstants.Attributes.CMSLinkComponent.TAGTYPE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSLinkComponent.tagType</code> attribute.
	 * @return the tagType
	 */
	public EnumerationValue getTagType(final CMSLinkComponent item)
	{
		return getTagType( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSLinkComponent.tagType</code> attribute. 
	 * @param value the tagType
	 */
	public void setTagType(final SessionContext ctx, final CMSLinkComponent item, final EnumerationValue value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.CMSLinkComponent.TAGTYPE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSLinkComponent.tagType</code> attribute. 
	 * @param value the tagType
	 */
	public void setTagType(final CMSLinkComponent item, final EnumerationValue value)
	{
		setTagType( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSNavigationNode.tagValue</code> attribute.
	 * @return the tagValue
	 */
	public String getTagValue(final SessionContext ctx, final CMSNavigationNode item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.CMSNavigationNode.TAGVALUE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSNavigationNode.tagValue</code> attribute.
	 * @return the tagValue
	 */
	public String getTagValue(final CMSNavigationNode item)
	{
		return getTagValue( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSNavigationNode.tagValue</code> attribute. 
	 * @param value the tagValue
	 */
	public void setTagValue(final SessionContext ctx, final CMSNavigationNode item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.CMSNavigationNode.TAGVALUE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSNavigationNode.tagValue</code> attribute. 
	 * @param value the tagValue
	 */
	public void setTagValue(final CMSNavigationNode item, final String value)
	{
		setTagValue( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSLinkComponent.tagValue</code> attribute.
	 * @return the tagValue
	 */
	public String getTagValue(final SessionContext ctx, final CMSLinkComponent item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.CMSLinkComponent.TAGVALUE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CMSLinkComponent.tagValue</code> attribute.
	 * @return the tagValue
	 */
	public String getTagValue(final CMSLinkComponent item)
	{
		return getTagValue( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSLinkComponent.tagValue</code> attribute. 
	 * @param value the tagValue
	 */
	public void setTagValue(final SessionContext ctx, final CMSLinkComponent item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.CMSLinkComponent.TAGVALUE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CMSLinkComponent.tagValue</code> attribute. 
	 * @param value the tagValue
	 */
	public void setTagValue(final CMSLinkComponent item, final String value)
	{
		setTagValue( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.taxableItemVal</code> attribute.
	 * @return the taxableItemVal
	 */
	public Double getTaxableItemVal(final SessionContext ctx, final AbstractOrderEntry item)
	{
		return (Double)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrderEntry.TAXABLEITEMVAL);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.taxableItemVal</code> attribute.
	 * @return the taxableItemVal
	 */
	public Double getTaxableItemVal(final AbstractOrderEntry item)
	{
		return getTaxableItemVal( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.taxableItemVal</code> attribute. 
	 * @return the taxableItemVal
	 */
	public double getTaxableItemValAsPrimitive(final SessionContext ctx, final AbstractOrderEntry item)
	{
		Double value = getTaxableItemVal( ctx,item );
		return value != null ? value.doubleValue() : 0.0d;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.taxableItemVal</code> attribute. 
	 * @return the taxableItemVal
	 */
	public double getTaxableItemValAsPrimitive(final AbstractOrderEntry item)
	{
		return getTaxableItemValAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.taxableItemVal</code> attribute. 
	 * @param value the taxableItemVal
	 */
	public void setTaxableItemVal(final SessionContext ctx, final AbstractOrderEntry item, final Double value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrderEntry.TAXABLEITEMVAL,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.taxableItemVal</code> attribute. 
	 * @param value the taxableItemVal
	 */
	public void setTaxableItemVal(final AbstractOrderEntry item, final Double value)
	{
		setTaxableItemVal( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.taxableItemVal</code> attribute. 
	 * @param value the taxableItemVal
	 */
	public void setTaxableItemVal(final SessionContext ctx, final AbstractOrderEntry item, final double value)
	{
		setTaxableItemVal( ctx, item, Double.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.taxableItemVal</code> attribute. 
	 * @param value the taxableItemVal
	 */
	public void setTaxableItemVal(final AbstractOrderEntry item, final double value)
	{
		setTaxableItemVal( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.taxableShippingVal</code> attribute.
	 * @return the taxableShippingVal
	 */
	public Double getTaxableShippingVal(final SessionContext ctx, final AbstractOrderEntry item)
	{
		return (Double)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrderEntry.TAXABLESHIPPINGVAL);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.taxableShippingVal</code> attribute.
	 * @return the taxableShippingVal
	 */
	public Double getTaxableShippingVal(final AbstractOrderEntry item)
	{
		return getTaxableShippingVal( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.taxableShippingVal</code> attribute. 
	 * @return the taxableShippingVal
	 */
	public double getTaxableShippingValAsPrimitive(final SessionContext ctx, final AbstractOrderEntry item)
	{
		Double value = getTaxableShippingVal( ctx,item );
		return value != null ? value.doubleValue() : 0.0d;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.taxableShippingVal</code> attribute. 
	 * @return the taxableShippingVal
	 */
	public double getTaxableShippingValAsPrimitive(final AbstractOrderEntry item)
	{
		return getTaxableShippingValAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.taxableShippingVal</code> attribute. 
	 * @param value the taxableShippingVal
	 */
	public void setTaxableShippingVal(final SessionContext ctx, final AbstractOrderEntry item, final Double value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrderEntry.TAXABLESHIPPINGVAL,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.taxableShippingVal</code> attribute. 
	 * @param value the taxableShippingVal
	 */
	public void setTaxableShippingVal(final AbstractOrderEntry item, final Double value)
	{
		setTaxableShippingVal( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.taxableShippingVal</code> attribute. 
	 * @param value the taxableShippingVal
	 */
	public void setTaxableShippingVal(final SessionContext ctx, final AbstractOrderEntry item, final double value)
	{
		setTaxableShippingVal( ctx, item, Double.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.taxableShippingVal</code> attribute. 
	 * @param value the taxableShippingVal
	 */
	public void setTaxableShippingVal(final AbstractOrderEntry item, final double value)
	{
		setTaxableShippingVal( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.taxCategoryCode</code> attribute.
	 * @return the taxCategoryCode - To indicate tax category code
	 */
	public String getTaxCategoryCode(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.TAXCATEGORYCODE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.taxCategoryCode</code> attribute.
	 * @return the taxCategoryCode - To indicate tax category code
	 */
	public String getTaxCategoryCode(final Product item)
	{
		return getTaxCategoryCode( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.taxCategoryCode</code> attribute. 
	 * @param value the taxCategoryCode - To indicate tax category code
	 */
	public void setTaxCategoryCode(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.TAXCATEGORYCODE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.taxCategoryCode</code> attribute. 
	 * @param value the taxCategoryCode - To indicate tax category code
	 */
	public void setTaxCategoryCode(final Product item, final String value)
	{
		setTaxCategoryCode( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.taxCode</code> attribute.
	 * @return the taxCode - Tax identifier
	 */
	public String getTaxCode(final SessionContext ctx, final AbstractOrderEntry item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrderEntry.TAXCODE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.taxCode</code> attribute.
	 * @return the taxCode - Tax identifier
	 */
	public String getTaxCode(final AbstractOrderEntry item)
	{
		return getTaxCode( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.taxCode</code> attribute. 
	 * @param value the taxCode - Tax identifier
	 */
	public void setTaxCode(final SessionContext ctx, final AbstractOrderEntry item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrderEntry.TAXCODE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.taxCode</code> attribute. 
	 * @param value the taxCode - Tax identifier
	 */
	public void setTaxCode(final AbstractOrderEntry item, final String value)
	{
		setTaxCode( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.taxComponents</code> attribute.
	 * @return the taxComponents - Applied tax components
	 */
	public Map<EnumerationValue,String> getAllTaxComponents(final SessionContext ctx, final AbstractOrderEntry item)
	{
		Map<EnumerationValue,String> map = (Map<EnumerationValue,String>)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrderEntry.TAXCOMPONENTS);
		return map != null ? map : Collections.EMPTY_MAP;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.taxComponents</code> attribute.
	 * @return the taxComponents - Applied tax components
	 */
	public Map<EnumerationValue,String> getAllTaxComponents(final AbstractOrderEntry item)
	{
		return getAllTaxComponents( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.taxComponents</code> attribute. 
	 * @param value the taxComponents - Applied tax components
	 */
	public void setAllTaxComponents(final SessionContext ctx, final AbstractOrderEntry item, final Map<EnumerationValue,String> value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrderEntry.TAXCOMPONENTS,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.taxComponents</code> attribute. 
	 * @param value the taxComponents - Applied tax components
	 */
	public void setAllTaxComponents(final AbstractOrderEntry item, final Map<EnumerationValue,String> value)
	{
		setAllTaxComponents( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Tax.TaxIdentifier</code> attribute.
	 * @return the TaxIdentifier - Tax identifier required for tax update
	 */
	public String getTaxIdentifier(final SessionContext ctx, final Tax item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Tax.TAXIDENTIFIER);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Tax.TaxIdentifier</code> attribute.
	 * @return the TaxIdentifier - Tax identifier required for tax update
	 */
	public String getTaxIdentifier(final Tax item)
	{
		return getTaxIdentifier( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Tax.TaxIdentifier</code> attribute. 
	 * @param value the TaxIdentifier - Tax identifier required for tax update
	 */
	public void setTaxIdentifier(final SessionContext ctx, final Tax item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Tax.TAXIDENTIFIER,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Tax.TaxIdentifier</code> attribute. 
	 * @param value the TaxIdentifier - Tax identifier required for tax update
	 */
	public void setTaxIdentifier(final Tax item, final String value)
	{
		setTaxIdentifier( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Tax.TaxType</code> attribute.
	 * @return the TaxType - GST Tax Types
	 */
	public EnumerationValue getTaxType(final SessionContext ctx, final Tax item)
	{
		return (EnumerationValue)item.getProperty( ctx, SslCoreConstants.Attributes.Tax.TAXTYPE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Tax.TaxType</code> attribute.
	 * @return the TaxType - GST Tax Types
	 */
	public EnumerationValue getTaxType(final Tax item)
	{
		return getTaxType( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Tax.TaxType</code> attribute. 
	 * @param value the TaxType - GST Tax Types
	 */
	public void setTaxType(final SessionContext ctx, final Tax item, final EnumerationValue value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Tax.TAXTYPE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Tax.TaxType</code> attribute. 
	 * @param value the TaxType - GST Tax Types
	 */
	public void setTaxType(final Tax item, final EnumerationValue value)
	{
		setTaxType( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PromotionVoucher.termAndConditionURL</code> attribute.
	 * @return the termAndConditionURL - Term And Condition URL
	 */
	public String getTermAndConditionURL(final SessionContext ctx, final PromotionVoucher item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.PromotionVoucher.TERMANDCONDITIONURL);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PromotionVoucher.termAndConditionURL</code> attribute.
	 * @return the termAndConditionURL - Term And Condition URL
	 */
	public String getTermAndConditionURL(final PromotionVoucher item)
	{
		return getTermAndConditionURL( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PromotionVoucher.termAndConditionURL</code> attribute. 
	 * @param value the termAndConditionURL - Term And Condition URL
	 */
	public void setTermAndConditionURL(final SessionContext ctx, final PromotionVoucher item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.PromotionVoucher.TERMANDCONDITIONURL,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PromotionVoucher.termAndConditionURL</code> attribute. 
	 * @param value the termAndConditionURL - Term And Condition URL
	 */
	public void setTermAndConditionURL(final PromotionVoucher item, final String value)
	{
		setTermAndConditionURL( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>OrderModificationRecordEntry.ticket</code> attribute.
	 * @return the ticket
	 */
	public CsTicket getTicket(final SessionContext ctx, final OrderModificationRecordEntry item)
	{
		return (CsTicket)item.getProperty( ctx, SslCoreConstants.Attributes.OrderModificationRecordEntry.TICKET);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>OrderModificationRecordEntry.ticket</code> attribute.
	 * @return the ticket
	 */
	public CsTicket getTicket(final OrderModificationRecordEntry item)
	{
		return getTicket( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>OrderModificationRecordEntry.ticket</code> attribute. 
	 * @param value the ticket
	 */
	public void setTicket(final SessionContext ctx, final OrderModificationRecordEntry item, final CsTicket value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.OrderModificationRecordEntry.TICKET,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>OrderModificationRecordEntry.ticket</code> attribute. 
	 * @param value the ticket
	 */
	public void setTicket(final OrderModificationRecordEntry item, final CsTicket value)
	{
		setTicket( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Tax.ToArea</code> attribute.
	 * @return the ToArea - To Area
	 */
	public String getToArea(final SessionContext ctx, final Tax item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Tax.TOAREA);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Tax.ToArea</code> attribute.
	 * @return the ToArea - To Area
	 */
	public String getToArea(final Tax item)
	{
		return getToArea( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Tax.ToArea</code> attribute. 
	 * @param value the ToArea - To Area
	 */
	public void setToArea(final SessionContext ctx, final Tax item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Tax.TOAREA,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Tax.ToArea</code> attribute. 
	 * @param value the ToArea - To Area
	 */
	public void setToArea(final Tax item, final String value)
	{
		setToArea( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.totalDamaged</code> attribute.
	 * @return the totalDamaged - This field will hold total damaged count through
	 * 							picker panel.
	 */
	public Integer getTotalDamaged(final SessionContext ctx, final StockLevel item)
	{
		return (Integer)item.getProperty( ctx, SslCoreConstants.Attributes.StockLevel.TOTALDAMAGED);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.totalDamaged</code> attribute.
	 * @return the totalDamaged - This field will hold total damaged count through
	 * 							picker panel.
	 */
	public Integer getTotalDamaged(final StockLevel item)
	{
		return getTotalDamaged( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.totalDamaged</code> attribute. 
	 * @return the totalDamaged - This field will hold total damaged count through
	 * 							picker panel.
	 */
	public int getTotalDamagedAsPrimitive(final SessionContext ctx, final StockLevel item)
	{
		Integer value = getTotalDamaged( ctx,item );
		return value != null ? value.intValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.totalDamaged</code> attribute. 
	 * @return the totalDamaged - This field will hold total damaged count through
	 * 							picker panel.
	 */
	public int getTotalDamagedAsPrimitive(final StockLevel item)
	{
		return getTotalDamagedAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.totalDamaged</code> attribute. 
	 * @param value the totalDamaged - This field will hold total damaged count through
	 * 							picker panel.
	 */
	public void setTotalDamaged(final SessionContext ctx, final StockLevel item, final Integer value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.StockLevel.TOTALDAMAGED,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.totalDamaged</code> attribute. 
	 * @param value the totalDamaged - This field will hold total damaged count through
	 * 							picker panel.
	 */
	public void setTotalDamaged(final StockLevel item, final Integer value)
	{
		setTotalDamaged( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.totalDamaged</code> attribute. 
	 * @param value the totalDamaged - This field will hold total damaged count through
	 * 							picker panel.
	 */
	public void setTotalDamaged(final SessionContext ctx, final StockLevel item, final int value)
	{
		setTotalDamaged( ctx, item, Integer.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.totalDamaged</code> attribute. 
	 * @param value the totalDamaged - This field will hold total damaged count through
	 * 							picker panel.
	 */
	public void setTotalDamaged(final StockLevel item, final int value)
	{
		setTotalDamaged( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.totalRefundAmount</code> attribute.
	 * @return the totalRefundAmount - Total Refund Issued to customer
	 */
	public Double getTotalRefundAmount(final SessionContext ctx, final ReturnRequest item)
	{
		return (Double)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.TOTALREFUNDAMOUNT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.totalRefundAmount</code> attribute.
	 * @return the totalRefundAmount - Total Refund Issued to customer
	 */
	public Double getTotalRefundAmount(final ReturnRequest item)
	{
		return getTotalRefundAmount( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.totalRefundAmount</code> attribute. 
	 * @return the totalRefundAmount - Total Refund Issued to customer
	 */
	public double getTotalRefundAmountAsPrimitive(final SessionContext ctx, final ReturnRequest item)
	{
		Double value = getTotalRefundAmount( ctx,item );
		return value != null ? value.doubleValue() : 0.0d;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.totalRefundAmount</code> attribute. 
	 * @return the totalRefundAmount - Total Refund Issued to customer
	 */
	public double getTotalRefundAmountAsPrimitive(final ReturnRequest item)
	{
		return getTotalRefundAmountAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.totalRefundAmount</code> attribute. 
	 * @param value the totalRefundAmount - Total Refund Issued to customer
	 */
	public void setTotalRefundAmount(final SessionContext ctx, final ReturnRequest item, final Double value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.TOTALREFUNDAMOUNT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.totalRefundAmount</code> attribute. 
	 * @param value the totalRefundAmount - Total Refund Issued to customer
	 */
	public void setTotalRefundAmount(final ReturnRequest item, final Double value)
	{
		setTotalRefundAmount( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.totalRefundAmount</code> attribute. 
	 * @param value the totalRefundAmount - Total Refund Issued to customer
	 */
	public void setTotalRefundAmount(final SessionContext ctx, final ReturnRequest item, final double value)
	{
		setTotalRefundAmount( ctx, item, Double.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.totalRefundAmount</code> attribute. 
	 * @param value the totalRefundAmount - Total Refund Issued to customer
	 */
	public void setTotalRefundAmount(final ReturnRequest item, final double value)
	{
		setTotalRefundAmount( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.totalUnavailable</code> attribute.
	 * @return the totalUnavailable - This field will hold total unavailable count after
	 * 							two failed attempts through picker panel.
	 */
	public Integer getTotalUnavailable(final SessionContext ctx, final StockLevel item)
	{
		return (Integer)item.getProperty( ctx, SslCoreConstants.Attributes.StockLevel.TOTALUNAVAILABLE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.totalUnavailable</code> attribute.
	 * @return the totalUnavailable - This field will hold total unavailable count after
	 * 							two failed attempts through picker panel.
	 */
	public Integer getTotalUnavailable(final StockLevel item)
	{
		return getTotalUnavailable( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.totalUnavailable</code> attribute. 
	 * @return the totalUnavailable - This field will hold total unavailable count after
	 * 							two failed attempts through picker panel.
	 */
	public int getTotalUnavailableAsPrimitive(final SessionContext ctx, final StockLevel item)
	{
		Integer value = getTotalUnavailable( ctx,item );
		return value != null ? value.intValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>StockLevel.totalUnavailable</code> attribute. 
	 * @return the totalUnavailable - This field will hold total unavailable count after
	 * 							two failed attempts through picker panel.
	 */
	public int getTotalUnavailableAsPrimitive(final StockLevel item)
	{
		return getTotalUnavailableAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.totalUnavailable</code> attribute. 
	 * @param value the totalUnavailable - This field will hold total unavailable count after
	 * 							two failed attempts through picker panel.
	 */
	public void setTotalUnavailable(final SessionContext ctx, final StockLevel item, final Integer value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.StockLevel.TOTALUNAVAILABLE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.totalUnavailable</code> attribute. 
	 * @param value the totalUnavailable - This field will hold total unavailable count after
	 * 							two failed attempts through picker panel.
	 */
	public void setTotalUnavailable(final StockLevel item, final Integer value)
	{
		setTotalUnavailable( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.totalUnavailable</code> attribute. 
	 * @param value the totalUnavailable - This field will hold total unavailable count after
	 * 							two failed attempts through picker panel.
	 */
	public void setTotalUnavailable(final SessionContext ctx, final StockLevel item, final int value)
	{
		setTotalUnavailable( ctx, item, Integer.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>StockLevel.totalUnavailable</code> attribute. 
	 * @param value the totalUnavailable - This field will hold total unavailable count after
	 * 							two failed attempts through picker panel.
	 */
	public void setTotalUnavailable(final StockLevel item, final int value)
	{
		setTotalUnavailable( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.transferNumber</code> attribute.
	 * @return the transferNumber - The transfer number when a transfer is initiated to ODC
	 */
	public Long getTransferNumber(final SessionContext ctx, final ReturnEntry item)
	{
		return (Long)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnEntry.TRANSFERNUMBER);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.transferNumber</code> attribute.
	 * @return the transferNumber - The transfer number when a transfer is initiated to ODC
	 */
	public Long getTransferNumber(final ReturnEntry item)
	{
		return getTransferNumber( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.transferNumber</code> attribute. 
	 * @return the transferNumber - The transfer number when a transfer is initiated to ODC
	 */
	public long getTransferNumberAsPrimitive(final SessionContext ctx, final ReturnEntry item)
	{
		Long value = getTransferNumber( ctx,item );
		return value != null ? value.longValue() : 0;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnEntry.transferNumber</code> attribute. 
	 * @return the transferNumber - The transfer number when a transfer is initiated to ODC
	 */
	public long getTransferNumberAsPrimitive(final ReturnEntry item)
	{
		return getTransferNumberAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.transferNumber</code> attribute. 
	 * @param value the transferNumber - The transfer number when a transfer is initiated to ODC
	 */
	public void setTransferNumber(final SessionContext ctx, final ReturnEntry item, final Long value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnEntry.TRANSFERNUMBER,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.transferNumber</code> attribute. 
	 * @param value the transferNumber - The transfer number when a transfer is initiated to ODC
	 */
	public void setTransferNumber(final ReturnEntry item, final Long value)
	{
		setTransferNumber( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.transferNumber</code> attribute. 
	 * @param value the transferNumber - The transfer number when a transfer is initiated to ODC
	 */
	public void setTransferNumber(final SessionContext ctx, final ReturnEntry item, final long value)
	{
		setTransferNumber( ctx, item, Long.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnEntry.transferNumber</code> attribute. 
	 * @param value the transferNumber - The transfer number when a transfer is initiated to ODC
	 */
	public void setTransferNumber(final ReturnEntry item, final long value)
	{
		setTransferNumber( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PaymentTransactionEntry.transferRef</code> attribute.
	 * @return the transferRef
	 */
	public String getTransferRef(final SessionContext ctx, final PaymentTransactionEntry item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.PaymentTransactionEntry.TRANSFERREF);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PaymentTransactionEntry.transferRef</code> attribute.
	 * @return the transferRef
	 */
	public String getTransferRef(final PaymentTransactionEntry item)
	{
		return getTransferRef( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PaymentTransactionEntry.transferRef</code> attribute. 
	 * @param value the transferRef
	 */
	public void setTransferRef(final SessionContext ctx, final PaymentTransactionEntry item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.PaymentTransactionEntry.TRANSFERREF,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PaymentTransactionEntry.transferRef</code> attribute. 
	 * @param value the transferRef
	 */
	public void setTransferRef(final PaymentTransactionEntry item, final String value)
	{
		setTransferRef( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.type</code> attribute.
	 * @return the type - Return Request Type
	 */
	public EnumerationValue getType(final SessionContext ctx, final ReturnRequest item)
	{
		return (EnumerationValue)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.TYPE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.type</code> attribute.
	 * @return the type - Return Request Type
	 */
	public EnumerationValue getType(final ReturnRequest item)
	{
		return getType( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.type</code> attribute. 
	 * @param value the type - Return Request Type
	 */
	public void setType(final SessionContext ctx, final ReturnRequest item, final EnumerationValue value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.TYPE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.type</code> attribute. 
	 * @param value the type - Return Request Type
	 */
	public void setType(final ReturnRequest item, final EnumerationValue value)
	{
		setType( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PaymentInfo.typeOfPayment</code> attribute.
	 * @return the typeOfPayment - Represents the type of payment
	 */
	public String getTypeOfPayment(final SessionContext ctx, final PaymentInfo item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.PaymentInfo.TYPEOFPAYMENT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PaymentInfo.typeOfPayment</code> attribute.
	 * @return the typeOfPayment - Represents the type of payment
	 */
	public String getTypeOfPayment(final PaymentInfo item)
	{
		return getTypeOfPayment( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PaymentInfo.typeOfPayment</code> attribute. 
	 * @param value the typeOfPayment - Represents the type of payment
	 */
	public void setTypeOfPayment(final SessionContext ctx, final PaymentInfo item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.PaymentInfo.TYPEOFPAYMENT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PaymentInfo.typeOfPayment</code> attribute. 
	 * @param value the typeOfPayment - Represents the type of payment
	 */
	public void setTypeOfPayment(final PaymentInfo item, final String value)
	{
		setTypeOfPayment( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.uqc</code> attribute.
	 * @return the uqc - To indicate UQC
	 */
	public String getUqc(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.UQC);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.uqc</code> attribute.
	 * @return the uqc - To indicate UQC
	 */
	public String getUqc(final Product item)
	{
		return getUqc( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.uqc</code> attribute. 
	 * @param value the uqc - To indicate UQC
	 */
	public void setUqc(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.UQC,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.uqc</code> attribute. 
	 * @param value the uqc - To indicate UQC
	 */
	public void setUqc(final Product item, final String value)
	{
		setUqc( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CategoryPage.usableForBrand</code> attribute.
	 * @return the usableForBrand
	 */
	public Boolean isUsableForBrand(final SessionContext ctx, final CategoryPage item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.CategoryPage.USABLEFORBRAND);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CategoryPage.usableForBrand</code> attribute.
	 * @return the usableForBrand
	 */
	public Boolean isUsableForBrand(final CategoryPage item)
	{
		return isUsableForBrand( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CategoryPage.usableForBrand</code> attribute. 
	 * @return the usableForBrand
	 */
	public boolean isUsableForBrandAsPrimitive(final SessionContext ctx, final CategoryPage item)
	{
		Boolean value = isUsableForBrand( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>CategoryPage.usableForBrand</code> attribute. 
	 * @return the usableForBrand
	 */
	public boolean isUsableForBrandAsPrimitive(final CategoryPage item)
	{
		return isUsableForBrandAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CategoryPage.usableForBrand</code> attribute. 
	 * @param value the usableForBrand
	 */
	public void setUsableForBrand(final SessionContext ctx, final CategoryPage item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.CategoryPage.USABLEFORBRAND,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CategoryPage.usableForBrand</code> attribute. 
	 * @param value the usableForBrand
	 */
	public void setUsableForBrand(final CategoryPage item, final Boolean value)
	{
		setUsableForBrand( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CategoryPage.usableForBrand</code> attribute. 
	 * @param value the usableForBrand
	 */
	public void setUsableForBrand(final SessionContext ctx, final CategoryPage item, final boolean value)
	{
		setUsableForBrand( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>CategoryPage.usableForBrand</code> attribute. 
	 * @param value the usableForBrand
	 */
	public void setUsableForBrand(final CategoryPage item, final boolean value)
	{
		setUsableForBrand( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Cart.userCart</code> attribute.
	 * @return the userCart
	 */
	public Boolean isUserCart(final SessionContext ctx, final Cart item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Cart.USERCART);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Cart.userCart</code> attribute.
	 * @return the userCart
	 */
	public Boolean isUserCart(final Cart item)
	{
		return isUserCart( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Cart.userCart</code> attribute. 
	 * @return the userCart
	 */
	public boolean isUserCartAsPrimitive(final SessionContext ctx, final Cart item)
	{
		Boolean value = isUserCart( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Cart.userCart</code> attribute. 
	 * @return the userCart
	 */
	public boolean isUserCartAsPrimitive(final Cart item)
	{
		return isUserCartAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Cart.userCart</code> attribute. 
	 * @param value the userCart
	 */
	public void setUserCart(final SessionContext ctx, final Cart item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Cart.USERCART,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Cart.userCart</code> attribute. 
	 * @param value the userCart
	 */
	public void setUserCart(final Cart item, final Boolean value)
	{
		setUserCart( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Cart.userCart</code> attribute. 
	 * @param value the userCart
	 */
	public void setUserCart(final SessionContext ctx, final Cart item, final boolean value)
	{
		setUserCart( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Cart.userCart</code> attribute. 
	 * @param value the userCart
	 */
	public void setUserCart(final Cart item, final boolean value)
	{
		setUserCart( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.userEnteredPincode</code> attribute.
	 * @return the userEnteredPincode - Field used to store user entered pincode which is managed for user session
	 */
	public String getUserEnteredPincode(final SessionContext ctx, final AbstractOrder item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrder.USERENTEREDPINCODE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrder.userEnteredPincode</code> attribute.
	 * @return the userEnteredPincode - Field used to store user entered pincode which is managed for user session
	 */
	public String getUserEnteredPincode(final AbstractOrder item)
	{
		return getUserEnteredPincode( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.userEnteredPincode</code> attribute. 
	 * @param value the userEnteredPincode - Field used to store user entered pincode which is managed for user session
	 */
	public void setUserEnteredPincode(final SessionContext ctx, final AbstractOrder item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrder.USERENTEREDPINCODE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrder.userEnteredPincode</code> attribute. 
	 * @param value the userEnteredPincode - Field used to store user entered pincode which is managed for user session
	 */
	public void setUserEnteredPincode(final AbstractOrder item, final String value)
	{
		setUserEnteredPincode( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.useThisPriceRow</code> attribute.
	 * @return the useThisPriceRow - Identify a price to be Used. To differentiate
	 * 							between Old and New PriceRows
	 */
	public Boolean isUseThisPriceRow(final SessionContext ctx, final PriceRow item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.PriceRow.USETHISPRICEROW);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.useThisPriceRow</code> attribute.
	 * @return the useThisPriceRow - Identify a price to be Used. To differentiate
	 * 							between Old and New PriceRows
	 */
	public Boolean isUseThisPriceRow(final PriceRow item)
	{
		return isUseThisPriceRow( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.useThisPriceRow</code> attribute. 
	 * @return the useThisPriceRow - Identify a price to be Used. To differentiate
	 * 							between Old and New PriceRows
	 */
	public boolean isUseThisPriceRowAsPrimitive(final SessionContext ctx, final PriceRow item)
	{
		Boolean value = isUseThisPriceRow( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.useThisPriceRow</code> attribute. 
	 * @return the useThisPriceRow - Identify a price to be Used. To differentiate
	 * 							between Old and New PriceRows
	 */
	public boolean isUseThisPriceRowAsPrimitive(final PriceRow item)
	{
		return isUseThisPriceRowAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.useThisPriceRow</code> attribute. 
	 * @param value the useThisPriceRow - Identify a price to be Used. To differentiate
	 * 							between Old and New PriceRows
	 */
	public void setUseThisPriceRow(final SessionContext ctx, final PriceRow item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.PriceRow.USETHISPRICEROW,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.useThisPriceRow</code> attribute. 
	 * @param value the useThisPriceRow - Identify a price to be Used. To differentiate
	 * 							between Old and New PriceRows
	 */
	public void setUseThisPriceRow(final PriceRow item, final Boolean value)
	{
		setUseThisPriceRow( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.useThisPriceRow</code> attribute. 
	 * @param value the useThisPriceRow - Identify a price to be Used. To differentiate
	 * 							between Old and New PriceRows
	 */
	public void setUseThisPriceRow(final SessionContext ctx, final PriceRow item, final boolean value)
	{
		setUseThisPriceRow( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.useThisPriceRow</code> attribute. 
	 * @param value the useThisPriceRow - Identify a price to be Used. To differentiate
	 * 							between Old and New PriceRows
	 */
	public void setUseThisPriceRow(final PriceRow item, final boolean value)
	{
		setUseThisPriceRow( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.useUnplannedInventory</code> attribute.
	 * @return the useUnplannedInventory - This property holds the use unplanned inventory updated by merchant
	 */
	public String getUseUnplannedInventory(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.USEUNPLANNEDINVENTORY);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.useUnplannedInventory</code> attribute.
	 * @return the useUnplannedInventory - This property holds the use unplanned inventory updated by merchant
	 */
	public String getUseUnplannedInventory(final Product item)
	{
		return getUseUnplannedInventory( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.useUnplannedInventory</code> attribute. 
	 * @param value the useUnplannedInventory - This property holds the use unplanned inventory updated by merchant
	 */
	public void setUseUnplannedInventory(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.USEUNPLANNEDINVENTORY,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.useUnplannedInventory</code> attribute. 
	 * @param value the useUnplannedInventory - This property holds the use unplanned inventory updated by merchant
	 */
	public void setUseUnplannedInventory(final Product item, final String value)
	{
		setUseUnplannedInventory( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.variantSkuList</code> attribute.
	 * @return the variantSkuList
	 */
	public String getVariantSkuList(final SessionContext ctx, final Product item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Product.VARIANTSKULIST);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.variantSkuList</code> attribute.
	 * @return the variantSkuList
	 */
	public String getVariantSkuList(final Product item)
	{
		return getVariantSkuList( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.variantSkuList</code> attribute. 
	 * @param value the variantSkuList
	 */
	public void setVariantSkuList(final SessionContext ctx, final Product item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.VARIANTSKULIST,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.variantSkuList</code> attribute. 
	 * @param value the variantSkuList
	 */
	public void setVariantSkuList(final Product item, final String value)
	{
		setVariantSkuList( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.verificationDate</code> attribute.
	 * @return the verificationDate - Date customer was verified on.
	 */
	public Date getVerificationDate(final SessionContext ctx, final Customer item)
	{
		return (Date)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.VERIFICATIONDATE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.verificationDate</code> attribute.
	 * @return the verificationDate - Date customer was verified on.
	 */
	public Date getVerificationDate(final Customer item)
	{
		return getVerificationDate( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.verificationDate</code> attribute. 
	 * @param value the verificationDate - Date customer was verified on.
	 */
	public void setVerificationDate(final SessionContext ctx, final Customer item, final Date value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.VERIFICATIONDATE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.verificationDate</code> attribute. 
	 * @param value the verificationDate - Date customer was verified on.
	 */
	public void setVerificationDate(final Customer item, final Date value)
	{
		setVerificationDate( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.verifiedEmail</code> attribute.
	 * @return the verifiedEmail
	 */
	public Boolean isVerifiedEmail(final SessionContext ctx, final Customer item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.VERIFIEDEMAIL);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.verifiedEmail</code> attribute.
	 * @return the verifiedEmail
	 */
	public Boolean isVerifiedEmail(final Customer item)
	{
		return isVerifiedEmail( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.verifiedEmail</code> attribute. 
	 * @return the verifiedEmail
	 */
	public boolean isVerifiedEmailAsPrimitive(final SessionContext ctx, final Customer item)
	{
		Boolean value = isVerifiedEmail( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.verifiedEmail</code> attribute. 
	 * @return the verifiedEmail
	 */
	public boolean isVerifiedEmailAsPrimitive(final Customer item)
	{
		return isVerifiedEmailAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.verifiedEmail</code> attribute. 
	 * @param value the verifiedEmail
	 */
	public void setVerifiedEmail(final SessionContext ctx, final Customer item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.VERIFIEDEMAIL,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.verifiedEmail</code> attribute. 
	 * @param value the verifiedEmail
	 */
	public void setVerifiedEmail(final Customer item, final Boolean value)
	{
		setVerifiedEmail( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.verifiedEmail</code> attribute. 
	 * @param value the verifiedEmail
	 */
	public void setVerifiedEmail(final SessionContext ctx, final Customer item, final boolean value)
	{
		setVerifiedEmail( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.verifiedEmail</code> attribute. 
	 * @param value the verifiedEmail
	 */
	public void setVerifiedEmail(final Customer item, final boolean value)
	{
		setVerifiedEmail( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.verifiedForCOD</code> attribute.
	 * @return the verifiedForCOD - Identifies if customer has completed atleast one order (without RMA).
	 */
	public Boolean isVerifiedForCOD(final SessionContext ctx, final Customer item)
	{
		return (Boolean)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.VERIFIEDFORCOD);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.verifiedForCOD</code> attribute.
	 * @return the verifiedForCOD - Identifies if customer has completed atleast one order (without RMA).
	 */
	public Boolean isVerifiedForCOD(final Customer item)
	{
		return isVerifiedForCOD( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.verifiedForCOD</code> attribute. 
	 * @return the verifiedForCOD - Identifies if customer has completed atleast one order (without RMA).
	 */
	public boolean isVerifiedForCODAsPrimitive(final SessionContext ctx, final Customer item)
	{
		Boolean value = isVerifiedForCOD( ctx,item );
		return value != null ? value.booleanValue() : false;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.verifiedForCOD</code> attribute. 
	 * @return the verifiedForCOD - Identifies if customer has completed atleast one order (without RMA).
	 */
	public boolean isVerifiedForCODAsPrimitive(final Customer item)
	{
		return isVerifiedForCODAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.verifiedForCOD</code> attribute. 
	 * @param value the verifiedForCOD - Identifies if customer has completed atleast one order (without RMA).
	 */
	public void setVerifiedForCOD(final SessionContext ctx, final Customer item, final Boolean value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.VERIFIEDFORCOD,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.verifiedForCOD</code> attribute. 
	 * @param value the verifiedForCOD - Identifies if customer has completed atleast one order (without RMA).
	 */
	public void setVerifiedForCOD(final Customer item, final Boolean value)
	{
		setVerifiedForCOD( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.verifiedForCOD</code> attribute. 
	 * @param value the verifiedForCOD - Identifies if customer has completed atleast one order (without RMA).
	 */
	public void setVerifiedForCOD(final SessionContext ctx, final Customer item, final boolean value)
	{
		setVerifiedForCOD( ctx, item, Boolean.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.verifiedForCOD</code> attribute. 
	 * @param value the verifiedForCOD - Identifies if customer has completed atleast one order (without RMA).
	 */
	public void setVerifiedForCOD(final Customer item, final boolean value)
	{
		setVerifiedForCOD( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.videos</code> attribute.
	 * @return the videos
	 */
	public List<Media> getVideos(final SessionContext ctx, final Product item)
	{
		List<Media> coll = (List<Media>)item.getProperty( ctx, SslCoreConstants.Attributes.Product.VIDEOS);
		return coll != null ? coll : Collections.EMPTY_LIST;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.videos</code> attribute.
	 * @return the videos
	 */
	public List<Media> getVideos(final Product item)
	{
		return getVideos( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.videos</code> attribute. 
	 * @param value the videos
	 */
	public void setVideos(final SessionContext ctx, final Product item, final List<Media> value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.VIDEOS,value == null || !value.isEmpty() ? value : null );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.videos</code> attribute. 
	 * @param value the videos
	 */
	public void setVideos(final Product item, final List<Media> value)
	{
		setVideos( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.videosLinks</code> attribute.
	 * @return the videosLinks
	 */
	public Collection<String> getVideosLinks(final SessionContext ctx, final Product item)
	{
		Collection<String> coll = (Collection<String>)item.getProperty( ctx, SslCoreConstants.Attributes.Product.VIDEOSLINKS);
		return coll != null ? coll : Collections.EMPTY_LIST;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.videosLinks</code> attribute.
	 * @return the videosLinks
	 */
	public Collection<String> getVideosLinks(final Product item)
	{
		return getVideosLinks( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.videosLinks</code> attribute. 
	 * @param value the videosLinks
	 */
	public void setVideosLinks(final SessionContext ctx, final Product item, final Collection<String> value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.VIDEOSLINKS,value == null || !value.isEmpty() ? value : null );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.videosLinks</code> attribute. 
	 * @param value the videosLinks
	 */
	public void setVideosLinks(final Product item, final Collection<String> value)
	{
		setVideosLinks( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.virtualCategoryEntries</code> attribute.
	 * @return the virtualCategoryEntries - Virtual Categories Entries
	 */
	public List<VirtualCategoryEntry> getVirtualCategoryEntries(final SessionContext ctx, final Category item)
	{
		List<VirtualCategoryEntry> coll = (List<VirtualCategoryEntry>)item.getProperty( ctx, SslCoreConstants.Attributes.Category.VIRTUALCATEGORYENTRIES);
		return coll != null ? coll : Collections.EMPTY_LIST;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.virtualCategoryEntries</code> attribute.
	 * @return the virtualCategoryEntries - Virtual Categories Entries
	 */
	public List<VirtualCategoryEntry> getVirtualCategoryEntries(final Category item)
	{
		return getVirtualCategoryEntries( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.virtualCategoryEntries</code> attribute. 
	 * @param value the virtualCategoryEntries - Virtual Categories Entries
	 */
	public void setVirtualCategoryEntries(final SessionContext ctx, final Category item, final List<VirtualCategoryEntry> value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.VIRTUALCATEGORYENTRIES,value == null || !value.isEmpty() ? value : null );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.virtualCategoryEntries</code> attribute. 
	 * @param value the virtualCategoryEntries - Virtual Categories Entries
	 */
	public void setVirtualCategoryEntries(final Category item, final List<VirtualCategoryEntry> value)
	{
		setVirtualCategoryEntries( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.walletNumber</code> attribute.
	 * @return the walletNumber - Wallet number of customer.
	 */
	public String getWalletNumber(final SessionContext ctx, final Customer item)
	{
		return (String)item.getProperty( ctx, SslCoreConstants.Attributes.Customer.WALLETNUMBER);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Customer.walletNumber</code> attribute.
	 * @return the walletNumber - Wallet number of customer.
	 */
	public String getWalletNumber(final Customer item)
	{
		return getWalletNumber( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.walletNumber</code> attribute. 
	 * @param value the walletNumber - Wallet number of customer.
	 */
	public void setWalletNumber(final SessionContext ctx, final Customer item, final String value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Customer.WALLETNUMBER,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Customer.walletNumber</code> attribute. 
	 * @param value the walletNumber - Wallet number of customer.
	 */
	public void setWalletNumber(final Customer item, final String value)
	{
		setWalletNumber( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.warehouse</code> attribute.
	 * @return the warehouse - Return Request warehouse
	 */
	public Warehouse getWarehouse(final SessionContext ctx, final ReturnRequest item)
	{
		return (Warehouse)item.getProperty( ctx, SslCoreConstants.Attributes.ReturnRequest.WAREHOUSE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>ReturnRequest.warehouse</code> attribute.
	 * @return the warehouse - Return Request warehouse
	 */
	public Warehouse getWarehouse(final ReturnRequest item)
	{
		return getWarehouse( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.warehouse</code> attribute. 
	 * @param value the warehouse - Return Request warehouse
	 */
	public void setWarehouse(final SessionContext ctx, final ReturnRequest item, final Warehouse value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.ReturnRequest.WAREHOUSE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>ReturnRequest.warehouse</code> attribute. 
	 * @param value the warehouse - Return Request warehouse
	 */
	public void setWarehouse(final ReturnRequest item, final Warehouse value)
	{
		setWarehouse( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>SolrFacetSearchConfig.warehouses</code> attribute.
	 * @return the warehouses
	 */
	public List<Warehouse> getWarehouses(final SessionContext ctx, final SolrFacetSearchConfig item)
	{
		List<Warehouse> coll = (List<Warehouse>)item.getProperty( ctx, SslCoreConstants.Attributes.SolrFacetSearchConfig.WAREHOUSES);
		return coll != null ? coll : Collections.EMPTY_LIST;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>SolrFacetSearchConfig.warehouses</code> attribute.
	 * @return the warehouses
	 */
	public List<Warehouse> getWarehouses(final SolrFacetSearchConfig item)
	{
		return getWarehouses( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>SolrFacetSearchConfig.warehouses</code> attribute. 
	 * @param value the warehouses
	 */
	public void setWarehouses(final SessionContext ctx, final SolrFacetSearchConfig item, final List<Warehouse> value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.SolrFacetSearchConfig.WAREHOUSES,value == null || !value.isEmpty() ? value : null );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>SolrFacetSearchConfig.warehouses</code> attribute. 
	 * @param value the warehouses
	 */
	public void setWarehouses(final SolrFacetSearchConfig item, final List<Warehouse> value)
	{
		setWarehouses( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.wasPrice</code> attribute.
	 * @return the wasPrice - Old price of the product
	 */
	public Double getWasPrice(final SessionContext ctx, final PriceRow item)
	{
		return (Double)item.getProperty( ctx, SslCoreConstants.Attributes.PriceRow.WASPRICE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.wasPrice</code> attribute.
	 * @return the wasPrice - Old price of the product
	 */
	public Double getWasPrice(final PriceRow item)
	{
		return getWasPrice( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.wasPrice</code> attribute. 
	 * @return the wasPrice - Old price of the product
	 */
	public double getWasPriceAsPrimitive(final SessionContext ctx, final PriceRow item)
	{
		Double value = getWasPrice( ctx,item );
		return value != null ? value.doubleValue() : 0.0d;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>PriceRow.wasPrice</code> attribute. 
	 * @return the wasPrice - Old price of the product
	 */
	public double getWasPriceAsPrimitive(final PriceRow item)
	{
		return getWasPriceAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.wasPrice</code> attribute. 
	 * @param value the wasPrice - Old price of the product
	 */
	public void setWasPrice(final SessionContext ctx, final PriceRow item, final Double value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.PriceRow.WASPRICE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.wasPrice</code> attribute. 
	 * @param value the wasPrice - Old price of the product
	 */
	public void setWasPrice(final PriceRow item, final Double value)
	{
		setWasPrice( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.wasPrice</code> attribute. 
	 * @param value the wasPrice - Old price of the product
	 */
	public void setWasPrice(final SessionContext ctx, final PriceRow item, final double value)
	{
		setWasPrice( ctx, item, Double.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>PriceRow.wasPrice</code> attribute. 
	 * @param value the wasPrice - Old price of the product
	 */
	public void setWasPrice(final PriceRow item, final double value)
	{
		setWasPrice( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.wasPrice</code> attribute.
	 * @return the wasPrice
	 */
	public Double getWasPrice(final SessionContext ctx, final AbstractOrderEntry item)
	{
		return (Double)item.getProperty( ctx, SslCoreConstants.Attributes.AbstractOrderEntry.WASPRICE);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.wasPrice</code> attribute.
	 * @return the wasPrice
	 */
	public Double getWasPrice(final AbstractOrderEntry item)
	{
		return getWasPrice( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.wasPrice</code> attribute. 
	 * @return the wasPrice
	 */
	public double getWasPriceAsPrimitive(final SessionContext ctx, final AbstractOrderEntry item)
	{
		Double value = getWasPrice( ctx,item );
		return value != null ? value.doubleValue() : 0.0d;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>AbstractOrderEntry.wasPrice</code> attribute. 
	 * @return the wasPrice
	 */
	public double getWasPriceAsPrimitive(final AbstractOrderEntry item)
	{
		return getWasPriceAsPrimitive( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.wasPrice</code> attribute. 
	 * @param value the wasPrice
	 */
	public void setWasPrice(final SessionContext ctx, final AbstractOrderEntry item, final Double value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.AbstractOrderEntry.WASPRICE,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.wasPrice</code> attribute. 
	 * @param value the wasPrice
	 */
	public void setWasPrice(final AbstractOrderEntry item, final Double value)
	{
		setWasPrice( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.wasPrice</code> attribute. 
	 * @param value the wasPrice
	 */
	public void setWasPrice(final SessionContext ctx, final AbstractOrderEntry item, final double value)
	{
		setWasPrice( ctx, item, Double.valueOf( value ) );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>AbstractOrderEntry.wasPrice</code> attribute. 
	 * @param value the wasPrice
	 */
	public void setWasPrice(final AbstractOrderEntry item, final double value)
	{
		setWasPrice( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.womenCollection</code> attribute.
	 * @return the womenCollection
	 */
	public WomenCollectionComponent getWomenCollection(final SessionContext ctx, final Category item)
	{
		return (WomenCollectionComponent)item.getProperty( ctx, SslCoreConstants.Attributes.Category.WOMENCOLLECTION);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.womenCollection</code> attribute.
	 * @return the womenCollection
	 */
	public WomenCollectionComponent getWomenCollection(final Category item)
	{
		return getWomenCollection( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.womenCollection</code> attribute. 
	 * @param value the womenCollection
	 */
	public void setWomenCollection(final SessionContext ctx, final Category item, final WomenCollectionComponent value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.WOMENCOLLECTION,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.womenCollection</code> attribute. 
	 * @param value the womenCollection
	 */
	public void setWomenCollection(final Category item, final WomenCollectionComponent value)
	{
		setWomenCollection( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.womenTopCollectionComponent</code> attribute.
	 * @return the womenTopCollectionComponent
	 */
	public WomenTopCollectionComponent getWomenTopCollectionComponent(final SessionContext ctx, final Category item)
	{
		return (WomenTopCollectionComponent)item.getProperty( ctx, SslCoreConstants.Attributes.Category.WOMENTOPCOLLECTIONCOMPONENT);
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Category.womenTopCollectionComponent</code> attribute.
	 * @return the womenTopCollectionComponent
	 */
	public WomenTopCollectionComponent getWomenTopCollectionComponent(final Category item)
	{
		return getWomenTopCollectionComponent( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.womenTopCollectionComponent</code> attribute. 
	 * @param value the womenTopCollectionComponent
	 */
	public void setWomenTopCollectionComponent(final SessionContext ctx, final Category item, final WomenTopCollectionComponent value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Category.WOMENTOPCOLLECTIONCOMPONENT,value);
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Category.womenTopCollectionComponent</code> attribute. 
	 * @param value the womenTopCollectionComponent
	 */
	public void setWomenTopCollectionComponent(final Category item, final WomenTopCollectionComponent value)
	{
		setWomenTopCollectionComponent( getSession().getSessionContext(), item, value );
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.wordPressTags</code> attribute.
	 * @return the wordPressTags
	 */
	public List<String> getWordPressTags(final SessionContext ctx, final Product item)
	{
		List<String> coll = (List<String>)item.getProperty( ctx, SslCoreConstants.Attributes.Product.WORDPRESSTAGS);
		return coll != null ? coll : Collections.EMPTY_LIST;
	}
	
	/**
	 * <i>Generated method</i> - Getter of the <code>Product.wordPressTags</code> attribute.
	 * @return the wordPressTags
	 */
	public List<String> getWordPressTags(final Product item)
	{
		return getWordPressTags( getSession().getSessionContext(), item );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.wordPressTags</code> attribute. 
	 * @param value the wordPressTags
	 */
	public void setWordPressTags(final SessionContext ctx, final Product item, final List<String> value)
	{
		item.setProperty(ctx, SslCoreConstants.Attributes.Product.WORDPRESSTAGS,value == null || !value.isEmpty() ? value : null );
	}
	
	/**
	 * <i>Generated method</i> - Setter of the <code>Product.wordPressTags</code> attribute. 
	 * @param value the wordPressTags
	 */
	public void setWordPressTags(final Product item, final List<String> value)
	{
		setWordPressTags( getSession().getSessionContext(), item, value );
	}
	
}
