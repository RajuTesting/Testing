<?xml version="1.0" encoding="UTF-8"?>
<!-- [y] hybris Platform Copyright (c) 2000-2015 hybris AG All rights reserved. This software is the confidential and proprietary information 
	of hybris ("Confidential Information"). You shall not disclose such Confidential Information and shall use it only in accordance with 
	the terms of the license agreement you entered into with hybris. -->

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:file="http://www.springframework.org/schema/integration/file" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/integration 
	http://www.springframework.org/schema/integration/spring-integration.xsd
	http://www.springframework.org/schema/integration/file 
	http://www.springframework.org/schema/integration/file/spring-integration-file.xsd
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

	<context:annotation-config />

	<bean id="baseDirectoryssl" class="java.lang.String">
		<constructor-arg value="#{baseDirectory}/${tenantId}/ssl" />
	</bean>
	<!-- 1) Scan for files -->
	<file:inbound-channel-adapter id="batchFilesssl" directory="#{baseDirectoryssl}" filename-regex="^(.*)-(\d+)\.csv"
		comparator="fileOrderComparator">
		<int:poller fixed-rate="60000" />
	</file:inbound-channel-adapter>

	<!-- 2) move the file to processing and create header -->
	<file:outbound-gateway request-channel="batchFilesssl" reply-channel="batchFilessslProc" directory="#{baseDirectoryssl}/processing"
		delete-source-files="true" />
	<int:service-activator input-channel="batchFilessslProc" output-channel="batchFilesHeaderInit" ref="sslHeaderSetupTask"
		method="execute" />
		<!-- MDM Hot Folder Configuration-->	  
	<bean id="baseDirectorySslMDMProduct" class="java.lang.String">
		<constructor-arg value="#{baseDirectory}/${tenantId}/sslmdmfiles" />
	  </bean>
	  <!-- START: Product ESB Changes -->
	  
	<!-- 1) Scan for MDM files -->
	<file:inbound-channel-adapter id="batchMDMFilesSsl" directory="#{baseDirectorySslMDMProduct}" filename-regex="^(.*)-(\d+)\.csv"
		comparator="fileOrderComparator">
		<int:poller fixed-rate="${ssl.mdm.product.hotfolder.pickupinterval}" />
	</file:inbound-channel-adapter>
	<!-- 2) move the file to processing -->
	<file:outbound-gateway request-channel="batchMDMFilesSsl" reply-channel="batchMDMFilesSslProc" directory="#{baseDirectoryssl}/processing"
		delete-source-files="true" />
	<int:service-activator input-channel="batchMDMFilesSslProc" output-channel="batchFilesHeaderInit" ref="sslHeaderSetupTask"
		method="execute" />
		
	 <!-- END: Product ESB Changes -->	
		
	<bean id="baseDirectorySslstock" class="java.lang.String">
		<constructor-arg value="#{baseDirectory}/${tenantId}/sslbigfiles" />
	</bean>
	<!-- 1) Scan for files for Stock -->
	<file:inbound-channel-adapter id="baseFileSslstock" directory="#{baseDirectorySslstock}" filename-regex="^(.*)-(\d+)\.csv"
		comparator="fileOrderComparator">
		<int:poller cron="0 0/30 * * * ?"/>
	</file:inbound-channel-adapter>

	<!-- 2) move the file to processing and create header for Stock -->
	<file:outbound-gateway request-channel="baseFileSslstock" reply-channel="batchFilesSslStockProc" directory="#{baseDirectorySslstock}/processing"
		delete-source-files="true" />
	<int:service-activator input-channel="batchFilesSslStockProc" output-channel="batchFilesHeaderInit" ref="sslHeaderSetupTask"
		method="execute" />
		
		
		
	<bean id="baseDirectorySslBanners" class="java.lang.String">
		<constructor-arg value="#{baseDirectory}/${tenantId}/sslbanners" />
	</bean>
	
	
	<!--  Scan for media files with extension jpg, jpeg, png, gif -->
	<file:inbound-channel-adapter id="batchFilesSslBanners" directory="#{baseDirectorySslBanners}" filename-regex="^(.*)\.((jpg)|(jpeg)|(png)|(gif))"
		comparator="fileOrderComparator">
		<int:poller fixed-rate="1000" />
	</file:inbound-channel-adapter>
	
	<int:service-activator input-channel="batchFilesSslBanners" ref="imageFileHandler" method="createCSV"
		output-channel="imageFileChannel" />
	
	<bean id="imageFileHandler" class="com.borngroup.ssl.core.dataimport.batch.image.SslImageFileHandler">
		<property name="imagePath" value="#{baseDirectorySslBanners}"></property>
		<property name="csvPath" value="#{baseDirectorySslBanners}/ssl_banner"></property>
		<property name="destinationImagePath" value="#{baseDirectorySslBanners}/processing/"></property>
	</bean>
	
	<int:channel id="imageFileChannel"></int:channel>
	
	<file:outbound-gateway request-channel="imageFileChannel" reply-channel="batchFilesSslBannersProc" directory="#{baseDirectorySslBanners}/processing"
		delete-source-files="true" />
	
	<int:service-activator input-channel="batchFilesSslBannersProc" output-channel="batchFilesHeaderInit" ref="sslHeaderSetupTask"
		method="execute" />
	
	
	<bean id="batchBannerMediaConverterMapping" 
		  class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping" 
		  p:mapping="ssl_banner" 
		  p:converter-ref="batchBannerMediaConverter"/>
		  
	<bean id="batchBannerMediaConverter" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
		<property name="header">
			<value>
				# Import media from file system
				$contentCatalog=sslContentCatalog
				$contentCV=catalogVersion(CatalogVersion.catalog(Catalog.id[default=$contentCatalog]),CatalogVersion.version[default=Staged])[default=$contentCatalog:Staged]
				$importFolder2=file:#{baseDirectorySslBanners}/processing
				INSERT_UPDATE Media;$contentCV[unique=true];code[unique=true];realfilename;@media[translator=de.hybris.platform.impex.jalo.media.MediaDataTranslator];mime[default='image/jpeg'];folder(qualifier)[default='images'];altText
			</value>
		</property>
		<property name="impexRow">
			<value>;;{0};{1};$importFolder2/{1};{2};;{3}
			</value>
		</property>
		<property name="type">
		<value>Media</value>
		</property>
	</bean>
	
	<bean id="batchBannerComponentConverterMapping" 
		  class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping" 
		  p:mapping="ssl_banner" 
		  p:converter-ref="batchBannerComponentMediaConverter"/>
		  
	<bean id="batchBannerComponentMediaConverter" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
		<property name="header">
			<value>
				# Create SimpleBannerComponent from imported media
				$contentCatalog=sslContentCatalog
				$contentCV=catalogVersion(CatalogVersion.catalog(Catalog.id[default=$contentCatalog]),CatalogVersion.version[default=Staged])[default=$contentCatalog:Staged]
				$picture=media(code, $contentCV)
				$lang=en
				INSERT_UPDATE SimpleBannerComponent;$contentCV[unique=true];uid[unique=true];name;$picture[lang=$lang]
				</value>
		</property>
		<property name="impexRow">
			<value>;;{4};{5};{0}
			</value>
		</property>
	</bean>
	
		
		

	<bean id="sslHeaderSetupTask" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.HeaderSetupTask">
		<property name="catalog" value="sslProductCatalog" />
		<property name="net" value="false" />
		<property name="storeBaseDirectory" ref="baseDirectoryssl" />
	</bean>

	<!-- Transformer converters mappings -->
	<bean id="batchSSLBrandMapConverterMapping" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
		p:mapping="ssl_brandMapping" p:converter-ref="batchSSLBrandMapConverter" />

	<bean id="batchSSLColorMapConverterMapping" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
		p:mapping="ssl_colorMapping" p:converter-ref="batchSSLColorMapConverter" />

	<bean id="batchSSLSizeMapConverterMapping" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
		p:mapping="ssl_sizeMapping" p:converter-ref="batchSSLSizeMapConverter" />

	<bean id="batchSSLBaseProductConverterMapping" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
		p:mapping="ssl_base_product" p:converter-ref="batchSSLBaseProductConverter" />
		
	<!-- START: Product ESB Changes -->
	<bean id="batchSSLGlobalAttributesConverterMapping" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
		p:mapping="${ssl.mdm.globalattributes.csvfile.name}" p:converter-ref="batchSSLGlobalAttributesConverter" />	
	
	<bean id="batchSSLClassificationProductConverterMapping" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
		p:mapping="${ssl.mdm.classification.csvfile.name}" p:converter-ref="batchSSLClassificationProductConverter" />
		
	<bean id="batchSSLClassificationAssignmentProductConverterMapping" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
		p:mapping="${ssl.mdm.classification.assignment.csvfile.name}" p:converter-ref="batchSSLClassificationAssignmentProductConverter" />
		
    <bean id="batchSSLClassificationAttributeValueConverterMapping" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
        p:mapping="${ssl.mdm.classification.attribute.value.csvfile.name}" p:converter-ref="batchSSLClassificationAttributeValueConverter" />
   
    <bean id="batchSSLMediaConverterMapping" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
		p:mapping="${ssl.mdm.media.csvfile.name}" p:converter-ref="batchSSLMediaConverter" />
	
	<bean id="batchSSLMediaFormatConverterMapping" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
		p:mapping="${ssl.mdm.media.format.csvfile.name}" p:converter-ref="batchSSLMediaFormatConverter" />
	
	<bean id="batchSSLMediaContainerConverterMapping" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
		p:mapping="${ssl.mdm.mediacontainer.csvfile.name}" p:converter-ref="batchSSLMediaContainerConverter" />
	
	<bean id="batchSSLProductMediaUpdateConverterMapping" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
		p:mapping="${ssl.mdm.media.product.csvfile.name}" p:converter-ref="batchSSLProductMediaUpdateConverter" /> 
		
	<bean id="batchSSLESBBaseProductConverterMapping" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
		p:mapping="${ssl.mdm.baseproduct.csvfile.name}" p:converter-ref="batchSSLESBBaseProductConverter" />
		
	<bean id="batchSSLESBStyleProductConverterMapping" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
		p:mapping="${ssl.mdm.productvarient.csvfile.name}" p:converter-ref="batchSSLESBStyleProductConverter" />
	
	<bean id="batchSSLESBSizeProductConverterMapping" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
		p:mapping="${ssl.mdm.productvarient.csvfile.name}" p:converter-ref="batchSSLESBSizeProductConverter" depends-on="batchSSLESBStyleProductConverterMapping" />
	
	<bean id="batchSSESBLPriceConverterMapping" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
		p:mapping="${ssl.mdm.product.pricerow.csvfile.name}" p:converter-ref="batchSSLESBPriceConverter" />
		
	<!-- END: Product ESB Changes -->

	<bean id="batchSSLStyleProductConverterMapping" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
		p:mapping="ssl_variant_product" p:converter-ref="batchSSLStyleProductConverter" />

	<bean id="batchSSLSizeProductConverterMapping" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
		p:mapping="ssl_variant_product" p:converter-ref="batchSSLSizeProductConverter" depends-on="batchSSLStyleProductConverterMapping" />

	<bean id="batchStockConverterMapping" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
		p:mapping="ssl_product_stock" p:converter-ref="batchStockConverter" />
		
	<bean id="batchSSLPriceConverterMapping" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
		p:mapping="ssl_product_price" p:converter-ref="batchSSLPriceConverter" />
		
	<bean id="batchSSLDiscountConverterMapping" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
		p:mapping="ssl_product_discount" p:converter-ref="batchSSLDiscountConverter" />
		
	<bean id="batchSSLEANSConverterMapping" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
		p:mapping="ssl_product_ean" p:converter-ref="batchSSLEANSConverter" />
		
	<bean id="batchSSLTaxConverterMapping" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping" 
		p:mapping="ssl_tax" p:converter-ref="batchSSLTaxConverter"/>
	
	<bean id="batchSSLPostalCodeConverterMapping"
       class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
             p:mapping="all_india_pin_code" p:converter-ref="batchSSLPostalCodeConverter" />	
	
	<bean id="batchSSLHSNConverterMapping" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping" 
		p:mapping="ssl_hsn" p:converter-ref="batchSSLHSNConverter"/>

	<alias name="sslFileOrderComparator" alias="fileOrderComparator" />
	<bean id="sslFileOrderComparator" class="de.hybris.platform.acceleratorservices.dataimport.batch.FileOrderComparator">
		<property name="prefixPriority">
			<map>
				<!-- default priority is 0 -->
				<entry key="ssl_brandMapping" value="19" />
				<entry key="ssl_colorMapping" value="18" />
				<entry key="ssl_sizeMapping" value="17" />
				<entry key="ssl_base_product" value="16" />
				<entry key="${ssl.mdm.baseproduct.csvfile.name}" value="15" />
				<entry key="ssl_variant_product" value="14" />
				<entry key="${ssl.mdm.productvarient.csvfile.name}" value="13" />
				<entry key="${ssl.mdm.globalattributes.csvfile.name}" value="12" />
				<entry key="${ssl.mdm.classification.attribute.value.csvfile.name}" value="11" />
				<entry key="${ssl.mdm.classification.assignment.csvfile.name}" value="10" />
				<entry key="${ssl.mdm.classification.csvfile.name}" value="9" />
				<entry key="${ssl.mdm.media.csvfile.name}" value="8" />
				<entry key="${ssl.mdm.media.format.csvfile.name}" value="7" />
				<entry key="${ssl.mdm.mediacontainer.csvfile.name}" value="6" />
				<entry key="${ssl.mdm.media.product.csvfile.name}" value="5" />
				<entry key="ssl_product_ean" value="4" />
				<entry key="ssl_product_price" value="3" />
				<entry key="${ssl.mdm.product.pricerow.csvfile.name}" value="2"/>
				<entry key="ssl_product_discount" value="1" />
			</map>
		</property>
	</bean>

	<!-- SSL Product specific converters -->
	<bean id="batchSSLBaseProductConverter" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
		<property name="header">
			<value>#{defaultImpexProductHeader}
				# Insert Base Products
				INSERT_UPDATE ApparelProduct;code[unique=true];styleCode;styleDesc;brandCode;brandInfo[cellDecorator=com.borngroup.ssl.core.decorator.BrandInfoDecorator];brandLogo[cellDecorator=com.borngroup.ssl.core.decorator.BrandLogoDecorator];seasonCode;departmentCode;departmentName;subDepartmentCode;subdepartmentName;classCode;className;subClassCode;subClassName;manufacturerName;returnDays;sequenceId[translator=de.hybris.platform.acceleratorservices.dataimport.batch.converter.SequenceIdTranslator];varianttype(code)[default='ApparelStyleVariantProduct'];unit(code)[default=pieces];$approved;$catalogVersion;
			</value>
		</property>
		<property name="impexRow">
			<value>;{+1};{2};{3};{+6};{+6};{+6};{8};{9};{10};{11};{12};{13};{14};{15};{16};{17};{18};{S}
			</value>
		</property>
		<property name="type" value="ApparelProduct" />
	</bean>

<bean id="batchSSLStyleProductConverter" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
		<property name="header">
			<value>#{defaultImpexProductHeader}
				# Insert Style Variant Products
				$baseProduct=baseProduct(code,$catalogVersion)
				INSERT_UPDATE ApparelStyleVariantProduct;$baseProduct;code[unique=true];styleCode;colourCode;style[cellDecorator=com.borngroup.ssl.core.decorator.ColorCellDecorator][default='NoColor'];sizeCode;departmentCode;departmentName;subDepartmentCode;subDepartmentName;varianttype(code)[default='ApparelSizeVariantProduct'];unit(code)[default=pieces];$approved;$catalogVersion
			</value>
		</property>
		<property name="impexRow">
			<value>;{+0};{1}_{4};{+2};{+4};{5};{6};{8};{9};{10};{11}
			</value>
		</property>
		<property name="type" value="ApparelStyleVariantProduct" />
	</bean>
	<bean id="batchSSLSizeProductConverter" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
		<property name="header">
			<value>#{defaultImpexProductHeader}
				# Insert Style Variant Products
				$baseProduct=baseProduct(code,$catalogVersion)
				INSERT_UPDATE ApparelSizeVariantProduct;$baseProduct;code[unique=true];styleCode;colourCode;style[cellDecorator=com.borngroup.ssl.core.decorator.ColorCellDecorator];size;departmentCode;departmentName;subDepartmentCode;subDepartmentName;unit(code)[default=pieces];$approved;$catalogVersion
			</value>
		</property>
		<property name="impexRow">
			<value>;{1}_{4};{+3};{2};{4};{5};{6};{8};{9};{10};{11}
			</value>
		</property>
		<property name="type" value="ApparelSizeVariantProduct" />
	</bean>

	<bean id="batchSSLBrandMapConverter" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
		<property name="header">
			<value>#{defaultImpexProductHeader}
				# Insert Brand Mapping
				INSERT_UPDATE BrandMapping;brandCode[unique=true][allowNull=false];brandDesc;altBrandCode;altBrandDesc;brandInfo;brandLogo
			</value>
		</property>
		<property name="impexRow">
			<value>;{+0};{1};{2};{3};{4};{5}
			</value>
		</property>
		<property name="type" value="BrandMapping" />
	</bean>

	<bean id="batchSSLColorMapConverter" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
		<property name="header">
			<value>#{defaultImpexProductHeader}
				# Insert Color Mapping
				INSERT_UPDATE ColorMapping;colourCode[unique=true][allowNull=false];colourDesc;altColorCode[allowNull=false];altColourDesc;colorFamily
			</value>
		</property>
		<property name="impexRow">
			<value>;{+0};{1};{2};{3};{4}
			</value>
		</property>
		<property name="type" value="ColorMapping" />
	</bean>

	<bean id="batchSSLSizeMapConverter" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
		<property name="header">
			<value>#{defaultImpexProductHeader}
				# Insert Size Mapping
				INSERT_UPDATE SizeMapping;departmentCode[unique=true][allowNull=false];subDepartmentCode[unique= true][allowNull=false];altBrandCode[unique=true][allowNull=false];sizeCode[unique=true][allowNull=false];description[allowNull=true];altSizeCode[allowNull=false];altSizeDesc[allowNull=false]
			</value>
		</property>
		<property name="impexRow">
			<value>;{0};{+1};{2};{3};{4};{5};{6};
			</value>
		</property>
		<property name="type" value="SizeMapping" />
	</bean>

	<!-- Product Stocks -->

	<bean id="batchStockConverter" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
		<property name="header">
			<value>
				# Insert StockLevel
				INSERT_UPDATE StockLevel;productCode[unique=true];warehouse(code)[unique=true];available;onlineReserved;nonSellableQuantity;holdQuantity;bufferQuantity
			</value>
		</property>
		<property name="impexRow">
			<value>;{+1};{+2};{3};{7};{8};{9};{10}</value>
		</property>
		<property name="type" value="StockLevel" />
	</bean>	
	
	<bean id="batchSSLPriceConverter" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
		<property name="header">
			<value>				
				#{defaultImpexProductHeader}
                #% impex.setLocale(Locale.ENGLISH);
                INSERT_UPDATE PriceRow;eventId[unique=true];locationID;productId[unique=true];priceType;eventDate[dateformat='yyyyMMdd'];startTime[dateformat='yyyyMMddHHmmss'];endTime[dateformat='yyyyMMddHHmmss'];price[translator=de.hybris.platform.acceleratorservices.dataimport.batch.converter.PriceTranslator];wasPrice[translator=de.hybris.platform.acceleratorservices.dataimport.batch.converter.PriceTranslator];currency(isocode)[unique=true][default=INR];unit(code)[default=pieces];unitFactor[default=1];minqtd[default=1];useThisPriceRow[default=true]
			</value>
		</property>
		<property name="impexRow">
			<value>
			;{+0};{+1};{+3};{+4};{+5};{+6};{+7};{+8};{9};			
			</value>
		</property>		
	</bean>
	
	<bean id="batchSSLDiscountConverter" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
		<property name="header">
			<value>
				#{defaultImpexProductHeader}							
				#% impex.setLocale(Locale.ENGLISH); 
				INSERT_UPDATE DiscountRow;locationID;product(code,$catalogVersion)[unique=true];startTime[dateformat='yyyyMMdd'][unique=true];endTime[dateformat='yyyyMMdd'][unique=true];value;discount(code)[forceWrite=true,allownull=true][default=ssl];currency(isocode)[unique=true][default=INR];$catalogVersion
			</value>
		</property>
		<property name="impexRow">
			<value>;{+0};{+2};{+5};{+6};{+7};</value>
		</property>		
	</bean>
	
	<bean id="batchSSLEANSConverter" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
		<property name="header">
			<value>#{defaultImpexProductHeader}				
				INSERT_UPDATE Ean;eanNumber[unique=true];products(code,$catalogVersion)[mode=append]
			</value>
		</property>
		<property name="impexRow">
			<value>;{+1};{+0};</value>
		</property>		
		<property name="type" value="ApparelProduct" />
	</bean>
	
	<bean id="batchSSLTaxConverter" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
		<property name="header">
			<value>
				# Insert Tax
				INSERT SslTax;deptId;subDeptId;classId;subClassId;code;validFromDate[dateformat='yyyyMMdd'];validToDate[dateformat='yyyyMMdd'];taxCalculationType;value;validFromAmount;validToAmount;taxFlag;stylecode;skucode;taxType[translator=com.borngroup.ssl.core.impex.translators.GSTTaxTypeTranslator];name;taxIdentifier
			</value>
		</property>
		<property name="impexRow">
			<value>;{0};{1};{2};{3};{12}_{11}_{0}_{1}_{2}_{3}_{13}{7};{4};{5};{6};{7};{8};{9};{10};{11};{12};{13};{14};{12}_{11}_{0}_{1}_{2}_{3}_{13};</value>
		</property>		
	</bean>
	
	<bean id="batchSSLPostalCodeConverter"
       class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
             <property name="header">
                    <value>
                           INSERT_UPDATE SSLPostalCodeCityStateMapping;pinCode[unique=true];city[unique=true];state;region(isocode)[translator=com.borngroup.ssl.core.impex.translators.PostalCodeTranslator];country(isocode)
                    </value>
             </property>
             <property name="impexRow">
                    <value>;{1};{8};{9};{9};IN;</value>
             </property>
       </bean>
	
	
			<bean id="batchSSLHSNConverter" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">

		<property name="header">
			<value>
				# Insert HSN
				$contentCatalog=sslProductCatalog
				$contentCV=catalogVersion(CatalogVersion.catalog(Catalog.id[default=$contentCatalog]),CatalogVersion.version[default=Staged])[default=$contentCatalog:Staged]
				Update Product;$contentCV[unique=true];code[unique=true];categoryOfSupply;hsnCode;uqc;classificationOfGoods;
			</value>
		</property>
		<property name="impexRow">
			<value>;;{0};{1};{2};{3};{4};</value>
		</property>		
	</bean>
	<!-- START: Product ESB Changes -->
	<!-- SSL Product global attribute converters-->
	<bean id="batchSSLGlobalAttributesConverter" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
		<property name="header">
			<value>#{defaultImpexProductHeader}
				# Insert Global Attributes
				UPDATE ApparelProduct;code[unique = true, allownull = true];name[lang = en];shortName;summary[lang = en];description[lang = en];supercategories(code, $catalogVersion)[mode=replace];careInstructions;returnPolicy;shippingInfo;isAvailableForCoD;deliveryPinCodes(PincodesList.code);numberContentUnits;maxOrderQuantity;minOrderQuantity;outOfStockNotice(code);unit(code);genders(code);giftAgeGroup;giftTo;occasion;relationship;giftWrap;searchKeywords;metaDescription;seoKeywords;channelLicence(code);sellableMarketPlaces;isAvailable;preOrder;codPinCodes(PincodesList.code);internationalShipping;sameDayDelivery;shipAlone;shippingWeight;packingType;primaryCategory;vendors(code);primaryVendor;onlineExclusive;newArrival;heroProduct;comingSoon;exclusive;dealOfTheDay;returnDays;approvalStatus(code)[allownull = true];categoryOfSupply;hsnCode;uqc;classificationOfGoods;tags;taxCategoryCode;$catalogVersion
			</value>
		</property>
		<property name="impexRow">
			<value>;{+0};{1};{2};{3};{4};{5};{6};{7};{8};{9};{10};{11};{12};{13};{14};{15};{16};{17};{18};{19};{20};{21};{22};{23};{24};{25};{26};{27};{28};{29};{30};{31};{32};{33};{34};{35};{36};{37};{38};{39};{40};{41};{42};{43};{44};{45};{46};{47};{48};{49};{50};{51}
			</value>
		</property>
		<property name="type" value="ApparelProduct" />
	</bean>
	<bean id="batchSSLClassificationProductConverter" class="com.borngroup.ssl.mdm.impex.converter.ClassificationImpexConverter">
		<property name="header">
			<value>
	          $productCatalog=sslProductCatalog
              $productCV=catalogVersion(catalog(id[default=$productCatalog]),version[default='Staged'])[unique=true,default=$productCatalog:Staged] 
              UPDATE ApparelProduct;$productCV;code[unique=true];features[translator=com.ssl.mdm.impex.translators.SSLMDMClassificationAttributeValueTranslator]                         			  		  
		</value>
		</property>
		<property name="impexRow">
			<value>;;{+0};{1}
			</value>
		</property>
		<property name="type" value="ApparelProduct" />
	</bean>

<bean id="batchSSLClassificationAssignmentProductConverter" class="com.borngroup.ssl.mdm.impex.converter.ClassificationImpexConverter">
		<property name="header">
		<value>
	#{defaultImpexProductHeader}
	
                  $productCatalog=sslProductCatalog
                  $productCatalogName=SSL Product Catalog
                  $catalogVersion=catalogversion(catalog(id[default=$productCatalog]),version[default='Staged'])[unique=true,default=$productCatalog:Staged]
                  $classCatalogVersion=catalogversion(catalog(id[default='sslClassification']),version[default='1.0'])[unique=true,default='sslClassification:1.0']
                  $classSystemVersion=systemVersion(catalog(id[default='sslClassification']),version[default='1.0'])[unique=true]
                  $class=classificationClass(ClassificationClass.code,$classCatalogVersion)[unique=true]
                  $supercategories=source(code, $classCatalogVersion)[unique=true]
                  $categories=target(code, $catalogVersion)[unique=true]
                  $attribute=classificationAttribute(code,$classSystemVersion)[unique=true]
                  $unit=unit(code,$classSystemVersion)
                        INSERT_UPDATE ClassAttributeAssignment; $class; $attribute; position; attributeValues(code, $classSystemVersion)[mode = append, allownull = false]; $unit; attributeType(code[default = enum]); multiValued[default = false]; range[default = false]; localized[default = true];

		  </value>
		</property>
		<property name="impexRow">
			<value>
			;{+0};{+1};{2};{+3};{4};{5};{6};{7};{8};
			</value>
		</property>
		<property name="type" value="ClassAttributeAssignment" />
	</bean>
    <bean id="batchSSLClassificationAttributeValueConverter" class="com.borngroup.ssl.mdm.impex.converter.ClassificationImpexConverter">
             <property name="header">
                 <value>#{defaultImpexProductHeader}
                   $classSystemVersion = systemVersion(catalog(id[default = 'sslClassification']), version[default = '1.0'])[unique = true]
                   INSERT_UPDATE ClassificationAttributeValue;code[unique = true];$classSystemVersion;name[allownull = false]
                 </value>
             </property>
             <property name="impexRow">
                 <value>;{+0};{1};{+2}
                 </value>
             </property>
             <property name="type" value="ApparelSizeVariantProduct" />
    </bean>
	
	<!-- Hot folder configuation for Media -->
	<bean id="batchSSLMediaConverter"
		class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
		<property name="header">
			<value>#{defaultImpexProductHeader}
				$productCatalog=sslProductCatalog
				$contentCV=catalogVersion(CatalogVersion.catalog(Catalog.id[default=$productCatalog]),CatalogVersion.version[default=Staged])[default=$productCatalog:Staged]
				$productCatalogName=ssl Product Catalog
				$catalogVersion=catalogversion(catalog(id[default=$productCatalog]),version[default='Staged'])[unique=true,default=$productCatalog:Staged]
				$medias=medias(code, $catalogVersion)

				INSERT_UPDATE Media;mediaFormat(qualifier[unique=true]);code[unique=true];internalURL;realfilename;altText;mime[default='image/jpeg'];location;dataPK;$catalogVersion[unique=true];folder(qualifier)[default=images]
			</value>
		</property>
		<property name="impexRow">
			<value>;{+1};{+2};{+3};{4};{5};{6};{7};{8}
			</value>
		</property>
		<property name="type" value="Media" />
	</bean>
<bean id="batchSSLMediaFormatConverter"
		class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
		<property name="header">
			<value>#{defaultImpexProductHeader}
				$productCatalog=sslProductCatalog
				$contentCV=catalogVersion(CatalogVersion.catalog(Catalog.id[default=$productCatalog]),CatalogVersion.version[default=Staged])[default=$productCatalog:Staged]
				$productCatalogName=ssl Product Catalog
				$catalogVersion=catalogversion(catalog(id[default=$productCatalog]),version[default='Staged'])[unique=true,default=$productCatalog:Staged]
				$medias=medias(code, $catalogVersion)

				INSERT_UPDATE Media;mediaFormat(qualifier[unique=true]);code[unique=true];internalURL;realfilename;altText;mime[default='image/jpeg'];original(code, $catalogVersion);originalDataPK[cellDecorator=com.ssl.mdm.impex.decorator.MediaPkCellDecorator];location;dataPK;$catalogVersion[unique=true];folder(qualifier)[default=images]
			</value>
		</property>
		<property name="impexRow">
			<value>;{+1};{+2};{+3};{4};{5};{6};{7};{7};{8};{9}
			</value>
		</property>
		<property name="type" value="Media" />
	</bean>


	<bean id="batchSSLMediaContainerConverter"
		class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
		<property name="header">
			<value>#{defaultImpexProductHeader}
				$productCatalog=sslProductCatalog
				$contentCV=catalogVersion(CatalogVersion.catalog(Catalog.id[default=$productCatalog]),CatalogVersion.version[default=Staged])[default=$productCatalog:Staged]
				$productCatalogName=ssl Product Catalog
				$catalogVersion=catalogversion(catalog(id[default=$productCatalog]),version[default='Staged'])[unique=true,default=$productCatalog:Staged]
				$medias=medias(code, $catalogVersion)

				INSERT_UPDATE MediaContainer;qualifier[unique=true];$medias;$catalogVersion[unique=true];conversionGroup(code)[default='sslConversionGroup']
			</value>
		</property>
		<property name="impexRow">
			<value>;{+0};{1}
			</value>
		</property>
		<property name="type" value="MediaContainer" />
	</bean>
	
	<!-- SSL Media update for ApparelProduct and ApparelStyleVariantProduct -->
	<bean id="batchSSLProductMediaUpdateConverter"
		class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
		<property name="header">
			<value>#{defaultImpexProductHeader}
				$productCatalog=sslProductCatalog
				$contentCV=catalogVersion(CatalogVersion.catalog(Catalog.id[default=$productCatalog]),CatalogVersion.version[default=Staged])[default=$productCatalog:Staged]
				$productCatalogName=ssl Product Catalog
				$catalogVersion=catalogversion(catalog(id[default=$productCatalog]),version[default='Staged'])[unique=true,default=$productCatalog:Staged]
				$medias=medias(code, $catalogVersion)
				$thumbnail=thumbnail(code, $catalogVersion)
				$thumbnails=thumbnails(code, $catalogVersion)
				$normal=normal(code, $catalogVersion)
				$others=others(code, $catalogVersion)
				$galleryImages=galleryImages(qualifier, $catalogVersion)

			 UPDATE Product;code[unique=true];$others;$thumbnails;$galleryImages;$thumbnail;videosLinks;$approved[cellDecorator=com.ssl.mdm.impex.decorator.ArticleApprovalStatusCellDecorator];$catalogVersion
			</value>
		</property>
		<property name="impexRow">
			<value>;{+1};{2};{3};{4};{5};{6};{7}
			</value>
		</property>
		<property name="type" value="Product" />
	</bean>
	
	<!-- Start: Product ESB Changes -->
	
	<!-- SSL Product specific converters -->
	<bean id="batchSSLESBBaseProductConverter" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
		<property name="header">
			<value>#{defaultImpexProductHeader}
				# Insert Base Products
				INSERT_UPDATE ApparelProduct;code[unique=true];styleCode;styleDesc;brandCode;brandInfo[cellDecorator=com.borngroup.ssl.core.decorator.BrandInfoDecorator];brandLogo[cellDecorator=com.borngroup.ssl.core.decorator.BrandLogoDecorator];seasonCode;departmentCode;departmentName;subDepartmentCode;subdepartmentName;classCode;className;subClassCode;subClassName;manufacturerName;sequenceId[translator=de.hybris.platform.acceleratorservices.dataimport.batch.converter.SequenceIdTranslator];varianttype(code)[default='ApparelStyleVariantProduct'];unit(code)[default=pieces];$approved;$catalogVersion
			</value>
		</property>
		<property name="impexRow">
			<value>;{+1};{2};{3};{+6};{+6};{+6};{8};{9};{10};{11};{12};{13};{14};{15};{16};{17};{S}
			</value>
		</property>
		<property name="type" value="ApparelProduct" />
	</bean>
	<bean id="batchSSLESBStyleProductConverter"
	class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
	<property name="header">
		<value>#{defaultImpexProductHeader}
			# Insert Style Variant Products
			$baseProduct=baseProduct(code,$catalogVersion)
			INSERT_UPDATE ApparelStyleVariantProduct;$baseProduct;code[unique=true];styleCode;colourCode;style[cellDecorator=com.borngroup.ssl.core.decorator.ColorCellDecorator][default='NoColor'];sizeCode;departmentCode;departmentName;subDepartmentCode;subDepartmentName;varianttype(code)[default='ApparelSizeVariantProduct'];unit(code)[default=pieces];$approved;hsnCode;taxCategoryCode;isAvailable;$catalogVersion
		</value>
	</property>
	<property name="impexRow">
		<value>;{+0};{1};{+2};{+4};{5};{6};{8};{9};{10};{11};;;;{13};{15};{18}
		</value>
	</property>
	<property name="type" value="ApparelStyleVariantProduct" />
</bean>
	<bean id="batchSSLESBSizeProductConverter"
		class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
		<property name="header">
			<value>#{defaultImpexProductHeader}
				# Insert Style Variant Products
				$baseProduct=baseProduct(code,$catalogVersion)
				INSERT_UPDATE ApparelSizeVariantProduct;$baseProduct;code[unique=true];styleCode;colourCode;style[cellDecorator=com.borngroup.ssl.core.decorator.ColorCellDecorator];size;departmentCode;departmentName;subDepartmentCode;subDepartmentName;unit(code)[default=pieces];$approved;hsnCode;taxCategoryCode;isAvailable;alternateEans(eanNumber)[cellDecorator=com.borngroup.ssl.core.decorator.EanCellDecorator][mode=append];$catalogVersion
			</value>
		</property>
		<property name="impexRow">
			<value>;{1};{+3};{2};{4};{5};{6};{8};{9};{10};{11};;{12};{14};{16};{19};{17}
			</value>
		</property>
		<property name="type" value="ApparelSizeVariantProduct" />
	</bean>
	
	<bean id="batchSSLESBPriceConverter"
	class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
	<property name="header">
		<value>
			#{defaultImpexProductHeader}
			#% impex.setLocale(Locale.ENGLISH);
			INSERT PriceRow;eventId[unique=true];locationID[unique=true];productId[unique=true];priceType;eventDate[dateformat='yyyyMMdd'];startTime[dateformat='yyyyMMddHHmmss'];endTime[dateformat='yyyyMMddHHmmss'];price[translator=de.hybris.platform.acceleratorservices.dataimport.batch.converter.PriceTranslator];wasPrice[translator=de.hybris.platform.acceleratorservices.dataimport.batch.converter.PriceTranslator];currency(isocode)[default=INR];unit(code)[default=pieces];unitFactor[default=1];minqtd[default=1];useThisPriceRow[default=true];preferenceId
		</value>
	</property>
	<property name="impexRow">
		<value>
			;{+0};{+1};{+3};{+4};{+5};{+6};{+7};{+8};{9};;;;;;{10};
		</value>
	</property>
 </bean>
	<!-- END: Product ESB Changes -->

	 <bean id="headerInitTask" class="com.borngroup.ssl.core.dataimport.batch.task.SslHeaderInitTask">
		<property name="sequenceIdParser" ref="batchSequenceIdParser" />
		<property name="languageParser" ref="batchLanguageParser" />
		<property name="fallbackLanguage" value="en" />
	</bean>

	<bean id="batchRunnerTask" class="com.borngroup.ssl.core.dataimport.batch.task.SslImpexRunnerTask">
		<property name="sessionService" ref="sessionService" />
		<property name="importService" ref="importService" />
		<lookup-method name="getImportConfig" bean="importConfig" />
	</bean>


	<bean id="batchCleanupTask" class="com.borngroup.ssl.core.dataimport.batch.task.SslCleanupTask">
		<property name="cleanupHelper" ref="cleanupHelper" />
		<property name="filePath" value="#{baseDirectorySslBanners}/processing"></property>
	</bean> 
</beans>
